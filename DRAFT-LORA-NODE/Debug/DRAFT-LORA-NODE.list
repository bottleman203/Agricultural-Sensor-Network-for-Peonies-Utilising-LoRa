
DRAFT-LORA-NODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e448  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fc8  0800e588  0800e588  0000f588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f550  0800f550  000111f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800f550  0800f550  00010550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f558  0800f558  000111f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f558  0800f558  00010558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f55c  0800f55c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800f560  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a7c  200001f4  0800f754  000111f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c70  0800f754  00011c70  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000111f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274a1  00000000  00000000  0001121e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000588a  00000000  00000000  000386bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026a0  00000000  00000000  0003df50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d9e  00000000  00000000  000405f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fe8  00000000  00000000  0004238e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aafe  00000000  00000000  00067376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7466  00000000  00000000  00091e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001692da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b63c  00000000  00000000  00169320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0017495c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001f4 	.word	0x200001f4
 800015c:	00000000 	.word	0x00000000
 8000160:	0800e570 	.word	0x0800e570

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f8 	.word	0x200001f8
 800017c:	0800e570 	.word	0x0800e570

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_frsub>:
 8000bf8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bfc:	e002      	b.n	8000c04 <__addsf3>
 8000bfe:	bf00      	nop

08000c00 <__aeabi_fsub>:
 8000c00:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c04 <__addsf3>:
 8000c04:	0042      	lsls	r2, r0, #1
 8000c06:	bf1f      	itttt	ne
 8000c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c0c:	ea92 0f03 	teqne	r2, r3
 8000c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c18:	d06a      	beq.n	8000cf0 <__addsf3+0xec>
 8000c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c22:	bfc1      	itttt	gt
 8000c24:	18d2      	addgt	r2, r2, r3
 8000c26:	4041      	eorgt	r1, r0
 8000c28:	4048      	eorgt	r0, r1
 8000c2a:	4041      	eorgt	r1, r0
 8000c2c:	bfb8      	it	lt
 8000c2e:	425b      	neglt	r3, r3
 8000c30:	2b19      	cmp	r3, #25
 8000c32:	bf88      	it	hi
 8000c34:	4770      	bxhi	lr
 8000c36:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c3e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c4a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c4e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c52:	bf18      	it	ne
 8000c54:	4249      	negne	r1, r1
 8000c56:	ea92 0f03 	teq	r2, r3
 8000c5a:	d03f      	beq.n	8000cdc <__addsf3+0xd8>
 8000c5c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c60:	fa41 fc03 	asr.w	ip, r1, r3
 8000c64:	eb10 000c 	adds.w	r0, r0, ip
 8000c68:	f1c3 0320 	rsb	r3, r3, #32
 8000c6c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c70:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__addsf3+0x78>
 8000c76:	4249      	negs	r1, r1
 8000c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c7c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c80:	d313      	bcc.n	8000caa <__addsf3+0xa6>
 8000c82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c86:	d306      	bcc.n	8000c96 <__addsf3+0x92>
 8000c88:	0840      	lsrs	r0, r0, #1
 8000c8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c8e:	f102 0201 	add.w	r2, r2, #1
 8000c92:	2afe      	cmp	r2, #254	@ 0xfe
 8000c94:	d251      	bcs.n	8000d3a <__addsf3+0x136>
 8000c96:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c9e:	bf08      	it	eq
 8000ca0:	f020 0001 	biceq.w	r0, r0, #1
 8000ca4:	ea40 0003 	orr.w	r0, r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	0049      	lsls	r1, r1, #1
 8000cac:	eb40 0000 	adc.w	r0, r0, r0
 8000cb0:	3a01      	subs	r2, #1
 8000cb2:	bf28      	it	cs
 8000cb4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb8:	d2ed      	bcs.n	8000c96 <__addsf3+0x92>
 8000cba:	fab0 fc80 	clz	ip, r0
 8000cbe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cc2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cc6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cca:	bfaa      	itet	ge
 8000ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cd0:	4252      	neglt	r2, r2
 8000cd2:	4318      	orrge	r0, r3
 8000cd4:	bfbc      	itt	lt
 8000cd6:	40d0      	lsrlt	r0, r2
 8000cd8:	4318      	orrlt	r0, r3
 8000cda:	4770      	bx	lr
 8000cdc:	f092 0f00 	teq	r2, #0
 8000ce0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ce4:	bf06      	itte	eq
 8000ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cea:	3201      	addeq	r2, #1
 8000cec:	3b01      	subne	r3, #1
 8000cee:	e7b5      	b.n	8000c5c <__addsf3+0x58>
 8000cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	bf18      	it	ne
 8000cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cfe:	d021      	beq.n	8000d44 <__addsf3+0x140>
 8000d00:	ea92 0f03 	teq	r2, r3
 8000d04:	d004      	beq.n	8000d10 <__addsf3+0x10c>
 8000d06:	f092 0f00 	teq	r2, #0
 8000d0a:	bf08      	it	eq
 8000d0c:	4608      	moveq	r0, r1
 8000d0e:	4770      	bx	lr
 8000d10:	ea90 0f01 	teq	r0, r1
 8000d14:	bf1c      	itt	ne
 8000d16:	2000      	movne	r0, #0
 8000d18:	4770      	bxne	lr
 8000d1a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d1e:	d104      	bne.n	8000d2a <__addsf3+0x126>
 8000d20:	0040      	lsls	r0, r0, #1
 8000d22:	bf28      	it	cs
 8000d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d2e:	bf3c      	itt	cc
 8000d30:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d34:	4770      	bxcc	lr
 8000d36:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d3e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d42:	4770      	bx	lr
 8000d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d48:	bf16      	itet	ne
 8000d4a:	4608      	movne	r0, r1
 8000d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d50:	4601      	movne	r1, r0
 8000d52:	0242      	lsls	r2, r0, #9
 8000d54:	bf06      	itte	eq
 8000d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d5a:	ea90 0f01 	teqeq	r0, r1
 8000d5e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d62:	4770      	bx	lr

08000d64 <__aeabi_ui2f>:
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e004      	b.n	8000d74 <__aeabi_i2f+0x8>
 8000d6a:	bf00      	nop

08000d6c <__aeabi_i2f>:
 8000d6c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d70:	bf48      	it	mi
 8000d72:	4240      	negmi	r0, r0
 8000d74:	ea5f 0c00 	movs.w	ip, r0
 8000d78:	bf08      	it	eq
 8000d7a:	4770      	bxeq	lr
 8000d7c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d80:	4601      	mov	r1, r0
 8000d82:	f04f 0000 	mov.w	r0, #0
 8000d86:	e01c      	b.n	8000dc2 <__aeabi_l2f+0x2a>

08000d88 <__aeabi_ul2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e00a      	b.n	8000dac <__aeabi_l2f+0x14>
 8000d96:	bf00      	nop

08000d98 <__aeabi_l2f>:
 8000d98:	ea50 0201 	orrs.w	r2, r0, r1
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000da4:	d502      	bpl.n	8000dac <__aeabi_l2f+0x14>
 8000da6:	4240      	negs	r0, r0
 8000da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dac:	ea5f 0c01 	movs.w	ip, r1
 8000db0:	bf02      	ittt	eq
 8000db2:	4684      	moveq	ip, r0
 8000db4:	4601      	moveq	r1, r0
 8000db6:	2000      	moveq	r0, #0
 8000db8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000dbc:	bf08      	it	eq
 8000dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dc6:	fabc f28c 	clz	r2, ip
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dd0:	db10      	blt.n	8000df4 <__aeabi_l2f+0x5c>
 8000dd2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ddc:	f1c2 0220 	rsb	r2, r2, #32
 8000de0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000de4:	fa20 f202 	lsr.w	r2, r0, r2
 8000de8:	eb43 0002 	adc.w	r0, r3, r2
 8000dec:	bf08      	it	eq
 8000dee:	f020 0001 	biceq.w	r0, r0, #1
 8000df2:	4770      	bx	lr
 8000df4:	f102 0220 	add.w	r2, r2, #32
 8000df8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfc:	f1c2 0220 	rsb	r2, r2, #32
 8000e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e04:	fa21 f202 	lsr.w	r2, r1, r2
 8000e08:	eb43 0002 	adc.w	r0, r3, r2
 8000e0c:	bf08      	it	eq
 8000e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e12:	4770      	bx	lr

08000e14 <__aeabi_fmul>:
 8000e14:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e1c:	bf1e      	ittt	ne
 8000e1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e22:	ea92 0f0c 	teqne	r2, ip
 8000e26:	ea93 0f0c 	teqne	r3, ip
 8000e2a:	d06f      	beq.n	8000f0c <__aeabi_fmul+0xf8>
 8000e2c:	441a      	add	r2, r3
 8000e2e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e32:	0240      	lsls	r0, r0, #9
 8000e34:	bf18      	it	ne
 8000e36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e3a:	d01e      	beq.n	8000e7a <__aeabi_fmul+0x66>
 8000e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000e40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e48:	fba0 3101 	umull	r3, r1, r0, r1
 8000e4c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e50:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e54:	bf3e      	ittt	cc
 8000e56:	0049      	lslcc	r1, r1, #1
 8000e58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e5c:	005b      	lslcc	r3, r3, #1
 8000e5e:	ea40 0001 	orr.w	r0, r0, r1
 8000e62:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e66:	2afd      	cmp	r2, #253	@ 0xfd
 8000e68:	d81d      	bhi.n	8000ea6 <__aeabi_fmul+0x92>
 8000e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e72:	bf08      	it	eq
 8000e74:	f020 0001 	biceq.w	r0, r0, #1
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e82:	bf08      	it	eq
 8000e84:	0249      	lsleq	r1, r1, #9
 8000e86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e8e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e90:	bfc2      	ittt	gt
 8000e92:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e9a:	4770      	bxgt	lr
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	f04f 0300 	mov.w	r3, #0
 8000ea4:	3a01      	subs	r2, #1
 8000ea6:	dc5d      	bgt.n	8000f64 <__aeabi_fmul+0x150>
 8000ea8:	f112 0f19 	cmn.w	r2, #25
 8000eac:	bfdc      	itt	le
 8000eae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000eb2:	4770      	bxle	lr
 8000eb4:	f1c2 0200 	rsb	r2, r2, #0
 8000eb8:	0041      	lsls	r1, r0, #1
 8000eba:	fa21 f102 	lsr.w	r1, r1, r2
 8000ebe:	f1c2 0220 	rsb	r2, r2, #32
 8000ec2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ec6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eca:	f140 0000 	adc.w	r0, r0, #0
 8000ece:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ed2:	bf08      	it	eq
 8000ed4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ed8:	4770      	bx	lr
 8000eda:	f092 0f00 	teq	r2, #0
 8000ede:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0040      	lsleq	r0, r0, #1
 8000ee6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000eea:	3a01      	subeq	r2, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fmul+0xce>
 8000eee:	ea40 000c 	orr.w	r0, r0, ip
 8000ef2:	f093 0f00 	teq	r3, #0
 8000ef6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0049      	lsleq	r1, r1, #1
 8000efe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f02:	3b01      	subeq	r3, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fmul+0xe6>
 8000f06:	ea41 010c 	orr.w	r1, r1, ip
 8000f0a:	e78f      	b.n	8000e2c <__aeabi_fmul+0x18>
 8000f0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f10:	ea92 0f0c 	teq	r2, ip
 8000f14:	bf18      	it	ne
 8000f16:	ea93 0f0c 	teqne	r3, ip
 8000f1a:	d00a      	beq.n	8000f32 <__aeabi_fmul+0x11e>
 8000f1c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f20:	bf18      	it	ne
 8000f22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f26:	d1d8      	bne.n	8000eda <__aeabi_fmul+0xc6>
 8000f28:	ea80 0001 	eor.w	r0, r0, r1
 8000f2c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f30:	4770      	bx	lr
 8000f32:	f090 0f00 	teq	r0, #0
 8000f36:	bf17      	itett	ne
 8000f38:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000f3c:	4608      	moveq	r0, r1
 8000f3e:	f091 0f00 	teqne	r1, #0
 8000f42:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000f46:	d014      	beq.n	8000f72 <__aeabi_fmul+0x15e>
 8000f48:	ea92 0f0c 	teq	r2, ip
 8000f4c:	d101      	bne.n	8000f52 <__aeabi_fmul+0x13e>
 8000f4e:	0242      	lsls	r2, r0, #9
 8000f50:	d10f      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f52:	ea93 0f0c 	teq	r3, ip
 8000f56:	d103      	bne.n	8000f60 <__aeabi_fmul+0x14c>
 8000f58:	024b      	lsls	r3, r1, #9
 8000f5a:	bf18      	it	ne
 8000f5c:	4608      	movne	r0, r1
 8000f5e:	d108      	bne.n	8000f72 <__aeabi_fmul+0x15e>
 8000f60:	ea80 0001 	eor.w	r0, r0, r1
 8000f64:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f68:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f6c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f70:	4770      	bx	lr
 8000f72:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f76:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f7a:	4770      	bx	lr

08000f7c <__aeabi_fdiv>:
 8000f7c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f84:	bf1e      	ittt	ne
 8000f86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f8a:	ea92 0f0c 	teqne	r2, ip
 8000f8e:	ea93 0f0c 	teqne	r3, ip
 8000f92:	d069      	beq.n	8001068 <__aeabi_fdiv+0xec>
 8000f94:	eba2 0203 	sub.w	r2, r2, r3
 8000f98:	ea80 0c01 	eor.w	ip, r0, r1
 8000f9c:	0249      	lsls	r1, r1, #9
 8000f9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fa2:	d037      	beq.n	8001014 <__aeabi_fdiv+0x98>
 8000fa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000fa8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fb0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000fb4:	428b      	cmp	r3, r1
 8000fb6:	bf38      	it	cc
 8000fb8:	005b      	lslcc	r3, r3, #1
 8000fba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000fbe:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	bf24      	itt	cs
 8000fc6:	1a5b      	subcs	r3, r3, r1
 8000fc8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fd0:	bf24      	itt	cs
 8000fd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fde:	bf24      	itt	cs
 8000fe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fec:	bf24      	itt	cs
 8000fee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ff2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	bf18      	it	ne
 8000ffa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ffe:	d1e0      	bne.n	8000fc2 <__aeabi_fdiv+0x46>
 8001000:	2afd      	cmp	r2, #253	@ 0xfd
 8001002:	f63f af50 	bhi.w	8000ea6 <__aeabi_fmul+0x92>
 8001006:	428b      	cmp	r3, r1
 8001008:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800100c:	bf08      	it	eq
 800100e:	f020 0001 	biceq.w	r0, r0, #1
 8001012:	4770      	bx	lr
 8001014:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8001018:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800101c:	327f      	adds	r2, #127	@ 0x7f
 800101e:	bfc2      	ittt	gt
 8001020:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8001024:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001028:	4770      	bxgt	lr
 800102a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	3a01      	subs	r2, #1
 8001034:	e737      	b.n	8000ea6 <__aeabi_fmul+0x92>
 8001036:	f092 0f00 	teq	r2, #0
 800103a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800103e:	bf02      	ittt	eq
 8001040:	0040      	lsleq	r0, r0, #1
 8001042:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8001046:	3a01      	subeq	r2, #1
 8001048:	d0f9      	beq.n	800103e <__aeabi_fdiv+0xc2>
 800104a:	ea40 000c 	orr.w	r0, r0, ip
 800104e:	f093 0f00 	teq	r3, #0
 8001052:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8001056:	bf02      	ittt	eq
 8001058:	0049      	lsleq	r1, r1, #1
 800105a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800105e:	3b01      	subeq	r3, #1
 8001060:	d0f9      	beq.n	8001056 <__aeabi_fdiv+0xda>
 8001062:	ea41 010c 	orr.w	r1, r1, ip
 8001066:	e795      	b.n	8000f94 <__aeabi_fdiv+0x18>
 8001068:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800106c:	ea92 0f0c 	teq	r2, ip
 8001070:	d108      	bne.n	8001084 <__aeabi_fdiv+0x108>
 8001072:	0242      	lsls	r2, r0, #9
 8001074:	f47f af7d 	bne.w	8000f72 <__aeabi_fmul+0x15e>
 8001078:	ea93 0f0c 	teq	r3, ip
 800107c:	f47f af70 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 8001080:	4608      	mov	r0, r1
 8001082:	e776      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001084:	ea93 0f0c 	teq	r3, ip
 8001088:	d104      	bne.n	8001094 <__aeabi_fdiv+0x118>
 800108a:	024b      	lsls	r3, r1, #9
 800108c:	f43f af4c 	beq.w	8000f28 <__aeabi_fmul+0x114>
 8001090:	4608      	mov	r0, r1
 8001092:	e76e      	b.n	8000f72 <__aeabi_fmul+0x15e>
 8001094:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001098:	bf18      	it	ne
 800109a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800109e:	d1ca      	bne.n	8001036 <__aeabi_fdiv+0xba>
 80010a0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80010a4:	f47f af5c 	bne.w	8000f60 <__aeabi_fmul+0x14c>
 80010a8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 80010ac:	f47f af3c 	bne.w	8000f28 <__aeabi_fmul+0x114>
 80010b0:	e75f      	b.n	8000f72 <__aeabi_fmul+0x15e>
 80010b2:	bf00      	nop

080010b4 <__aeabi_ldivmod>:
 80010b4:	b97b      	cbnz	r3, 80010d6 <__aeabi_ldivmod+0x22>
 80010b6:	b972      	cbnz	r2, 80010d6 <__aeabi_ldivmod+0x22>
 80010b8:	2900      	cmp	r1, #0
 80010ba:	bfbe      	ittt	lt
 80010bc:	2000      	movlt	r0, #0
 80010be:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80010c2:	e006      	blt.n	80010d2 <__aeabi_ldivmod+0x1e>
 80010c4:	bf08      	it	eq
 80010c6:	2800      	cmpeq	r0, #0
 80010c8:	bf1c      	itt	ne
 80010ca:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80010ce:	f04f 30ff 	movne.w	r0, #4294967295
 80010d2:	f000 b9b5 	b.w	8001440 <__aeabi_idiv0>
 80010d6:	f1ad 0c08 	sub.w	ip, sp, #8
 80010da:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010de:	2900      	cmp	r1, #0
 80010e0:	db09      	blt.n	80010f6 <__aeabi_ldivmod+0x42>
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	db1a      	blt.n	800111c <__aeabi_ldivmod+0x68>
 80010e6:	f000 f84d 	bl	8001184 <__udivmoddi4>
 80010ea:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010f2:	b004      	add	sp, #16
 80010f4:	4770      	bx	lr
 80010f6:	4240      	negs	r0, r0
 80010f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db1b      	blt.n	8001138 <__aeabi_ldivmod+0x84>
 8001100:	f000 f840 	bl	8001184 <__udivmoddi4>
 8001104:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800110c:	b004      	add	sp, #16
 800110e:	4240      	negs	r0, r0
 8001110:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001114:	4252      	negs	r2, r2
 8001116:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800111a:	4770      	bx	lr
 800111c:	4252      	negs	r2, r2
 800111e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001122:	f000 f82f 	bl	8001184 <__udivmoddi4>
 8001126:	f8dd e004 	ldr.w	lr, [sp, #4]
 800112a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800112e:	b004      	add	sp, #16
 8001130:	4240      	negs	r0, r0
 8001132:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001136:	4770      	bx	lr
 8001138:	4252      	negs	r2, r2
 800113a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800113e:	f000 f821 	bl	8001184 <__udivmoddi4>
 8001142:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001146:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800114a:	b004      	add	sp, #16
 800114c:	4252      	negs	r2, r2
 800114e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001152:	4770      	bx	lr

08001154 <__aeabi_uldivmod>:
 8001154:	b953      	cbnz	r3, 800116c <__aeabi_uldivmod+0x18>
 8001156:	b94a      	cbnz	r2, 800116c <__aeabi_uldivmod+0x18>
 8001158:	2900      	cmp	r1, #0
 800115a:	bf08      	it	eq
 800115c:	2800      	cmpeq	r0, #0
 800115e:	bf1c      	itt	ne
 8001160:	f04f 31ff 	movne.w	r1, #4294967295
 8001164:	f04f 30ff 	movne.w	r0, #4294967295
 8001168:	f000 b96a 	b.w	8001440 <__aeabi_idiv0>
 800116c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001174:	f000 f806 	bl	8001184 <__udivmoddi4>
 8001178:	f8dd e004 	ldr.w	lr, [sp, #4]
 800117c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001180:	b004      	add	sp, #16
 8001182:	4770      	bx	lr

08001184 <__udivmoddi4>:
 8001184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001188:	9d08      	ldr	r5, [sp, #32]
 800118a:	460c      	mov	r4, r1
 800118c:	2b00      	cmp	r3, #0
 800118e:	d14e      	bne.n	800122e <__udivmoddi4+0xaa>
 8001190:	4694      	mov	ip, r2
 8001192:	458c      	cmp	ip, r1
 8001194:	4686      	mov	lr, r0
 8001196:	fab2 f282 	clz	r2, r2
 800119a:	d962      	bls.n	8001262 <__udivmoddi4+0xde>
 800119c:	b14a      	cbz	r2, 80011b2 <__udivmoddi4+0x2e>
 800119e:	f1c2 0320 	rsb	r3, r2, #32
 80011a2:	4091      	lsls	r1, r2
 80011a4:	fa20 f303 	lsr.w	r3, r0, r3
 80011a8:	fa0c fc02 	lsl.w	ip, ip, r2
 80011ac:	4319      	orrs	r1, r3
 80011ae:	fa00 fe02 	lsl.w	lr, r0, r2
 80011b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011b6:	fa1f f68c 	uxth.w	r6, ip
 80011ba:	fbb1 f4f7 	udiv	r4, r1, r7
 80011be:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011c2:	fb07 1114 	mls	r1, r7, r4, r1
 80011c6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011ca:	fb04 f106 	mul.w	r1, r4, r6
 80011ce:	4299      	cmp	r1, r3
 80011d0:	d90a      	bls.n	80011e8 <__udivmoddi4+0x64>
 80011d2:	eb1c 0303 	adds.w	r3, ip, r3
 80011d6:	f104 30ff 	add.w	r0, r4, #4294967295
 80011da:	f080 8112 	bcs.w	8001402 <__udivmoddi4+0x27e>
 80011de:	4299      	cmp	r1, r3
 80011e0:	f240 810f 	bls.w	8001402 <__udivmoddi4+0x27e>
 80011e4:	3c02      	subs	r4, #2
 80011e6:	4463      	add	r3, ip
 80011e8:	1a59      	subs	r1, r3, r1
 80011ea:	fa1f f38e 	uxth.w	r3, lr
 80011ee:	fbb1 f0f7 	udiv	r0, r1, r7
 80011f2:	fb07 1110 	mls	r1, r7, r0, r1
 80011f6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011fa:	fb00 f606 	mul.w	r6, r0, r6
 80011fe:	429e      	cmp	r6, r3
 8001200:	d90a      	bls.n	8001218 <__udivmoddi4+0x94>
 8001202:	eb1c 0303 	adds.w	r3, ip, r3
 8001206:	f100 31ff 	add.w	r1, r0, #4294967295
 800120a:	f080 80fc 	bcs.w	8001406 <__udivmoddi4+0x282>
 800120e:	429e      	cmp	r6, r3
 8001210:	f240 80f9 	bls.w	8001406 <__udivmoddi4+0x282>
 8001214:	4463      	add	r3, ip
 8001216:	3802      	subs	r0, #2
 8001218:	1b9b      	subs	r3, r3, r6
 800121a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800121e:	2100      	movs	r1, #0
 8001220:	b11d      	cbz	r5, 800122a <__udivmoddi4+0xa6>
 8001222:	40d3      	lsrs	r3, r2
 8001224:	2200      	movs	r2, #0
 8001226:	e9c5 3200 	strd	r3, r2, [r5]
 800122a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122e:	428b      	cmp	r3, r1
 8001230:	d905      	bls.n	800123e <__udivmoddi4+0xba>
 8001232:	b10d      	cbz	r5, 8001238 <__udivmoddi4+0xb4>
 8001234:	e9c5 0100 	strd	r0, r1, [r5]
 8001238:	2100      	movs	r1, #0
 800123a:	4608      	mov	r0, r1
 800123c:	e7f5      	b.n	800122a <__udivmoddi4+0xa6>
 800123e:	fab3 f183 	clz	r1, r3
 8001242:	2900      	cmp	r1, #0
 8001244:	d146      	bne.n	80012d4 <__udivmoddi4+0x150>
 8001246:	42a3      	cmp	r3, r4
 8001248:	d302      	bcc.n	8001250 <__udivmoddi4+0xcc>
 800124a:	4290      	cmp	r0, r2
 800124c:	f0c0 80f0 	bcc.w	8001430 <__udivmoddi4+0x2ac>
 8001250:	1a86      	subs	r6, r0, r2
 8001252:	eb64 0303 	sbc.w	r3, r4, r3
 8001256:	2001      	movs	r0, #1
 8001258:	2d00      	cmp	r5, #0
 800125a:	d0e6      	beq.n	800122a <__udivmoddi4+0xa6>
 800125c:	e9c5 6300 	strd	r6, r3, [r5]
 8001260:	e7e3      	b.n	800122a <__udivmoddi4+0xa6>
 8001262:	2a00      	cmp	r2, #0
 8001264:	f040 8090 	bne.w	8001388 <__udivmoddi4+0x204>
 8001268:	eba1 040c 	sub.w	r4, r1, ip
 800126c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001270:	fa1f f78c 	uxth.w	r7, ip
 8001274:	2101      	movs	r1, #1
 8001276:	fbb4 f6f8 	udiv	r6, r4, r8
 800127a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800127e:	fb08 4416 	mls	r4, r8, r6, r4
 8001282:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001286:	fb07 f006 	mul.w	r0, r7, r6
 800128a:	4298      	cmp	r0, r3
 800128c:	d908      	bls.n	80012a0 <__udivmoddi4+0x11c>
 800128e:	eb1c 0303 	adds.w	r3, ip, r3
 8001292:	f106 34ff 	add.w	r4, r6, #4294967295
 8001296:	d202      	bcs.n	800129e <__udivmoddi4+0x11a>
 8001298:	4298      	cmp	r0, r3
 800129a:	f200 80cd 	bhi.w	8001438 <__udivmoddi4+0x2b4>
 800129e:	4626      	mov	r6, r4
 80012a0:	1a1c      	subs	r4, r3, r0
 80012a2:	fa1f f38e 	uxth.w	r3, lr
 80012a6:	fbb4 f0f8 	udiv	r0, r4, r8
 80012aa:	fb08 4410 	mls	r4, r8, r0, r4
 80012ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012b2:	fb00 f707 	mul.w	r7, r0, r7
 80012b6:	429f      	cmp	r7, r3
 80012b8:	d908      	bls.n	80012cc <__udivmoddi4+0x148>
 80012ba:	eb1c 0303 	adds.w	r3, ip, r3
 80012be:	f100 34ff 	add.w	r4, r0, #4294967295
 80012c2:	d202      	bcs.n	80012ca <__udivmoddi4+0x146>
 80012c4:	429f      	cmp	r7, r3
 80012c6:	f200 80b0 	bhi.w	800142a <__udivmoddi4+0x2a6>
 80012ca:	4620      	mov	r0, r4
 80012cc:	1bdb      	subs	r3, r3, r7
 80012ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012d2:	e7a5      	b.n	8001220 <__udivmoddi4+0x9c>
 80012d4:	f1c1 0620 	rsb	r6, r1, #32
 80012d8:	408b      	lsls	r3, r1
 80012da:	fa22 f706 	lsr.w	r7, r2, r6
 80012de:	431f      	orrs	r7, r3
 80012e0:	fa20 fc06 	lsr.w	ip, r0, r6
 80012e4:	fa04 f301 	lsl.w	r3, r4, r1
 80012e8:	ea43 030c 	orr.w	r3, r3, ip
 80012ec:	40f4      	lsrs	r4, r6
 80012ee:	fa00 f801 	lsl.w	r8, r0, r1
 80012f2:	0c38      	lsrs	r0, r7, #16
 80012f4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80012f8:	fbb4 fef0 	udiv	lr, r4, r0
 80012fc:	fa1f fc87 	uxth.w	ip, r7
 8001300:	fb00 441e 	mls	r4, r0, lr, r4
 8001304:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001308:	fb0e f90c 	mul.w	r9, lr, ip
 800130c:	45a1      	cmp	r9, r4
 800130e:	fa02 f201 	lsl.w	r2, r2, r1
 8001312:	d90a      	bls.n	800132a <__udivmoddi4+0x1a6>
 8001314:	193c      	adds	r4, r7, r4
 8001316:	f10e 3aff 	add.w	sl, lr, #4294967295
 800131a:	f080 8084 	bcs.w	8001426 <__udivmoddi4+0x2a2>
 800131e:	45a1      	cmp	r9, r4
 8001320:	f240 8081 	bls.w	8001426 <__udivmoddi4+0x2a2>
 8001324:	f1ae 0e02 	sub.w	lr, lr, #2
 8001328:	443c      	add	r4, r7
 800132a:	eba4 0409 	sub.w	r4, r4, r9
 800132e:	fa1f f983 	uxth.w	r9, r3
 8001332:	fbb4 f3f0 	udiv	r3, r4, r0
 8001336:	fb00 4413 	mls	r4, r0, r3, r4
 800133a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800133e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001342:	45a4      	cmp	ip, r4
 8001344:	d907      	bls.n	8001356 <__udivmoddi4+0x1d2>
 8001346:	193c      	adds	r4, r7, r4
 8001348:	f103 30ff 	add.w	r0, r3, #4294967295
 800134c:	d267      	bcs.n	800141e <__udivmoddi4+0x29a>
 800134e:	45a4      	cmp	ip, r4
 8001350:	d965      	bls.n	800141e <__udivmoddi4+0x29a>
 8001352:	3b02      	subs	r3, #2
 8001354:	443c      	add	r4, r7
 8001356:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800135a:	fba0 9302 	umull	r9, r3, r0, r2
 800135e:	eba4 040c 	sub.w	r4, r4, ip
 8001362:	429c      	cmp	r4, r3
 8001364:	46ce      	mov	lr, r9
 8001366:	469c      	mov	ip, r3
 8001368:	d351      	bcc.n	800140e <__udivmoddi4+0x28a>
 800136a:	d04e      	beq.n	800140a <__udivmoddi4+0x286>
 800136c:	b155      	cbz	r5, 8001384 <__udivmoddi4+0x200>
 800136e:	ebb8 030e 	subs.w	r3, r8, lr
 8001372:	eb64 040c 	sbc.w	r4, r4, ip
 8001376:	fa04 f606 	lsl.w	r6, r4, r6
 800137a:	40cb      	lsrs	r3, r1
 800137c:	431e      	orrs	r6, r3
 800137e:	40cc      	lsrs	r4, r1
 8001380:	e9c5 6400 	strd	r6, r4, [r5]
 8001384:	2100      	movs	r1, #0
 8001386:	e750      	b.n	800122a <__udivmoddi4+0xa6>
 8001388:	f1c2 0320 	rsb	r3, r2, #32
 800138c:	fa20 f103 	lsr.w	r1, r0, r3
 8001390:	fa0c fc02 	lsl.w	ip, ip, r2
 8001394:	fa24 f303 	lsr.w	r3, r4, r3
 8001398:	4094      	lsls	r4, r2
 800139a:	430c      	orrs	r4, r1
 800139c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013a0:	fa00 fe02 	lsl.w	lr, r0, r2
 80013a4:	fa1f f78c 	uxth.w	r7, ip
 80013a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80013ac:	fb08 3110 	mls	r1, r8, r0, r3
 80013b0:	0c23      	lsrs	r3, r4, #16
 80013b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013b6:	fb00 f107 	mul.w	r1, r0, r7
 80013ba:	4299      	cmp	r1, r3
 80013bc:	d908      	bls.n	80013d0 <__udivmoddi4+0x24c>
 80013be:	eb1c 0303 	adds.w	r3, ip, r3
 80013c2:	f100 36ff 	add.w	r6, r0, #4294967295
 80013c6:	d22c      	bcs.n	8001422 <__udivmoddi4+0x29e>
 80013c8:	4299      	cmp	r1, r3
 80013ca:	d92a      	bls.n	8001422 <__udivmoddi4+0x29e>
 80013cc:	3802      	subs	r0, #2
 80013ce:	4463      	add	r3, ip
 80013d0:	1a5b      	subs	r3, r3, r1
 80013d2:	b2a4      	uxth	r4, r4
 80013d4:	fbb3 f1f8 	udiv	r1, r3, r8
 80013d8:	fb08 3311 	mls	r3, r8, r1, r3
 80013dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013e0:	fb01 f307 	mul.w	r3, r1, r7
 80013e4:	42a3      	cmp	r3, r4
 80013e6:	d908      	bls.n	80013fa <__udivmoddi4+0x276>
 80013e8:	eb1c 0404 	adds.w	r4, ip, r4
 80013ec:	f101 36ff 	add.w	r6, r1, #4294967295
 80013f0:	d213      	bcs.n	800141a <__udivmoddi4+0x296>
 80013f2:	42a3      	cmp	r3, r4
 80013f4:	d911      	bls.n	800141a <__udivmoddi4+0x296>
 80013f6:	3902      	subs	r1, #2
 80013f8:	4464      	add	r4, ip
 80013fa:	1ae4      	subs	r4, r4, r3
 80013fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001400:	e739      	b.n	8001276 <__udivmoddi4+0xf2>
 8001402:	4604      	mov	r4, r0
 8001404:	e6f0      	b.n	80011e8 <__udivmoddi4+0x64>
 8001406:	4608      	mov	r0, r1
 8001408:	e706      	b.n	8001218 <__udivmoddi4+0x94>
 800140a:	45c8      	cmp	r8, r9
 800140c:	d2ae      	bcs.n	800136c <__udivmoddi4+0x1e8>
 800140e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001412:	eb63 0c07 	sbc.w	ip, r3, r7
 8001416:	3801      	subs	r0, #1
 8001418:	e7a8      	b.n	800136c <__udivmoddi4+0x1e8>
 800141a:	4631      	mov	r1, r6
 800141c:	e7ed      	b.n	80013fa <__udivmoddi4+0x276>
 800141e:	4603      	mov	r3, r0
 8001420:	e799      	b.n	8001356 <__udivmoddi4+0x1d2>
 8001422:	4630      	mov	r0, r6
 8001424:	e7d4      	b.n	80013d0 <__udivmoddi4+0x24c>
 8001426:	46d6      	mov	lr, sl
 8001428:	e77f      	b.n	800132a <__udivmoddi4+0x1a6>
 800142a:	4463      	add	r3, ip
 800142c:	3802      	subs	r0, #2
 800142e:	e74d      	b.n	80012cc <__udivmoddi4+0x148>
 8001430:	4606      	mov	r6, r0
 8001432:	4623      	mov	r3, r4
 8001434:	4608      	mov	r0, r1
 8001436:	e70f      	b.n	8001258 <__udivmoddi4+0xd4>
 8001438:	3e02      	subs	r6, #2
 800143a:	4463      	add	r3, ip
 800143c:	e730      	b.n	80012a0 <__udivmoddi4+0x11c>
 800143e:	bf00      	nop

08001440 <__aeabi_idiv0>:
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	@ 0x30
 8001448:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	2319      	movs	r3, #25
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	463b      	mov	r3, r7
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2301      	movs	r3, #1
 800145a:	2288      	movs	r2, #136	@ 0x88
 800145c:	21ec      	movs	r1, #236	@ 0xec
 800145e:	4857      	ldr	r0, [pc, #348]	@ (80015bc <TrimRead+0x178>)
 8001460:	f006 f96a 	bl	8007738 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001464:	463b      	mov	r3, r7
 8001466:	3319      	adds	r3, #25
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	9202      	str	r2, [sp, #8]
 800146e:	2207      	movs	r2, #7
 8001470:	9201      	str	r2, [sp, #4]
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	2301      	movs	r3, #1
 8001476:	22e1      	movs	r2, #225	@ 0xe1
 8001478:	21ec      	movs	r1, #236	@ 0xec
 800147a:	4850      	ldr	r0, [pc, #320]	@ (80015bc <TrimRead+0x178>)
 800147c:	f006 f95c 	bl	8007738 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	b21a      	sxth	r2, r3
 8001486:	783b      	ldrb	r3, [r7, #0]
 8001488:	b21b      	sxth	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b21b      	sxth	r3, r3
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b4b      	ldr	r3, [pc, #300]	@ (80015c0 <TrimRead+0x17c>)
 8001492:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001494:	78fb      	ldrb	r3, [r7, #3]
 8001496:	021b      	lsls	r3, r3, #8
 8001498:	b21a      	sxth	r2, r3
 800149a:	78bb      	ldrb	r3, [r7, #2]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b48      	ldr	r3, [pc, #288]	@ (80015c4 <TrimRead+0x180>)
 80014a4:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80014a6:	797b      	ldrb	r3, [r7, #5]
 80014a8:	021b      	lsls	r3, r3, #8
 80014aa:	b21a      	sxth	r2, r3
 80014ac:	793b      	ldrb	r3, [r7, #4]
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	b21a      	sxth	r2, r3
 80014b4:	4b44      	ldr	r3, [pc, #272]	@ (80015c8 <TrimRead+0x184>)
 80014b6:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	021b      	lsls	r3, r3, #8
 80014bc:	b21a      	sxth	r2, r3
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	b21b      	sxth	r3, r3
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b40      	ldr	r3, [pc, #256]	@ (80015cc <TrimRead+0x188>)
 80014ca:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 80014cc:	7a7b      	ldrb	r3, [r7, #9]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	b21a      	sxth	r2, r3
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b21a      	sxth	r2, r3
 80014da:	4b3d      	ldr	r3, [pc, #244]	@ (80015d0 <TrimRead+0x18c>)
 80014dc:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 80014de:	7afb      	ldrb	r3, [r7, #11]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	7abb      	ldrb	r3, [r7, #10]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	4b39      	ldr	r3, [pc, #228]	@ (80015d4 <TrimRead+0x190>)
 80014ee:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 80014f0:	7b7b      	ldrb	r3, [r7, #13]
 80014f2:	021b      	lsls	r3, r3, #8
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	7b3b      	ldrb	r3, [r7, #12]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	4b36      	ldr	r3, [pc, #216]	@ (80015d8 <TrimRead+0x194>)
 8001500:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	b21a      	sxth	r2, r3
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	b21b      	sxth	r3, r3
 800150c:	4313      	orrs	r3, r2
 800150e:	b21a      	sxth	r2, r3
 8001510:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <TrimRead+0x198>)
 8001512:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001514:	7c7b      	ldrb	r3, [r7, #17]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b21a      	sxth	r2, r3
 800151a:	7c3b      	ldrb	r3, [r7, #16]
 800151c:	b21b      	sxth	r3, r3
 800151e:	4313      	orrs	r3, r2
 8001520:	b21a      	sxth	r2, r3
 8001522:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <TrimRead+0x19c>)
 8001524:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001526:	7cfb      	ldrb	r3, [r7, #19]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	7cbb      	ldrb	r3, [r7, #18]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21a      	sxth	r2, r3
 8001534:	4b2b      	ldr	r3, [pc, #172]	@ (80015e4 <TrimRead+0x1a0>)
 8001536:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001538:	7d7b      	ldrb	r3, [r7, #21]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	7d3b      	ldrb	r3, [r7, #20]
 8001540:	b21b      	sxth	r3, r3
 8001542:	4313      	orrs	r3, r2
 8001544:	b21a      	sxth	r2, r3
 8001546:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <TrimRead+0x1a4>)
 8001548:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	021b      	lsls	r3, r3, #8
 800154e:	b21a      	sxth	r2, r3
 8001550:	7dbb      	ldrb	r3, [r7, #22]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b24      	ldr	r3, [pc, #144]	@ (80015ec <TrimRead+0x1a8>)
 800155a:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 800155c:	7e3b      	ldrb	r3, [r7, #24]
 800155e:	461a      	mov	r2, r3
 8001560:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <TrimRead+0x1ac>)
 8001562:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001564:	7ebb      	ldrb	r3, [r7, #26]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	7e7b      	ldrb	r3, [r7, #25]
 800156c:	b21b      	sxth	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b21a      	sxth	r2, r3
 8001572:	4b20      	ldr	r3, [pc, #128]	@ (80015f4 <TrimRead+0x1b0>)
 8001574:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001576:	7efb      	ldrb	r3, [r7, #27]
 8001578:	461a      	mov	r2, r3
 800157a:	4b1f      	ldr	r3, [pc, #124]	@ (80015f8 <TrimRead+0x1b4>)
 800157c:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 800157e:	7f3b      	ldrb	r3, [r7, #28]
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	b21a      	sxth	r2, r3
 8001584:	7f7b      	ldrb	r3, [r7, #29]
 8001586:	b21b      	sxth	r3, r3
 8001588:	f003 030f 	and.w	r3, r3, #15
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	b21a      	sxth	r2, r3
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <TrimRead+0x1b8>)
 8001594:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 8001596:	7fbb      	ldrb	r3, [r7, #30]
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	b21a      	sxth	r2, r3
 800159c:	7f7b      	ldrb	r3, [r7, #29]
 800159e:	091b      	lsrs	r3, r3, #4
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	4313      	orrs	r3, r2
 80015a6:	b21a      	sxth	r2, r3
 80015a8:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <TrimRead+0x1bc>)
 80015aa:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80015ac:	7ffb      	ldrb	r3, [r7, #31]
 80015ae:	b21a      	sxth	r2, r3
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <TrimRead+0x1c0>)
 80015b2:	801a      	strh	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200002ac 	.word	0x200002ac
 80015c0:	20000220 	.word	0x20000220
 80015c4:	20000228 	.word	0x20000228
 80015c8:	2000022a 	.word	0x2000022a
 80015cc:	20000222 	.word	0x20000222
 80015d0:	2000022c 	.word	0x2000022c
 80015d4:	2000022e 	.word	0x2000022e
 80015d8:	20000230 	.word	0x20000230
 80015dc:	20000232 	.word	0x20000232
 80015e0:	20000234 	.word	0x20000234
 80015e4:	20000236 	.word	0x20000236
 80015e8:	20000238 	.word	0x20000238
 80015ec:	2000023a 	.word	0x2000023a
 80015f0:	20000224 	.word	0x20000224
 80015f4:	2000023c 	.word	0x2000023c
 80015f8:	20000226 	.word	0x20000226
 80015fc:	2000023e 	.word	0x2000023e
 8001600:	20000240 	.word	0x20000240
 8001604:	20000242 	.word	0x20000242

08001608 <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b089      	sub	sp, #36	@ 0x24
 800160c:	af04      	add	r7, sp, #16
 800160e:	4604      	mov	r4, r0
 8001610:	4608      	mov	r0, r1
 8001612:	4611      	mov	r1, r2
 8001614:	461a      	mov	r2, r3
 8001616:	4623      	mov	r3, r4
 8001618:	71fb      	strb	r3, [r7, #7]
 800161a:	4603      	mov	r3, r0
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	460b      	mov	r3, r1
 8001620:	717b      	strb	r3, [r7, #5]
 8001622:	4613      	mov	r3, r2
 8001624:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 8001626:	f7ff ff0d 	bl	8001444 <TrimRead>


	uint8_t datatowrite = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001632:	23b6      	movs	r3, #182	@ 0xb6
 8001634:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	2301      	movs	r3, #1
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	f107 030f 	add.w	r3, r7, #15
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	2301      	movs	r3, #1
 8001648:	22e0      	movs	r2, #224	@ 0xe0
 800164a:	21ec      	movs	r1, #236	@ 0xec
 800164c:	4858      	ldr	r0, [pc, #352]	@ (80017b0 <BME280_Config+0x1a8>)
 800164e:	f005 ff5f 	bl	8007510 <HAL_I2C_Mem_Write>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d002      	beq.n	800165e <BME280_Config+0x56>
	{
		return -1;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295
 800165c:	e0a3      	b.n	80017a6 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 800165e:	2064      	movs	r0, #100	@ 0x64
 8001660:	f004 f9a4 	bl	80059ac <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001664:	797b      	ldrb	r3, [r7, #5]
 8001666:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001668:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800166c:	9302      	str	r3, [sp, #8]
 800166e:	2301      	movs	r3, #1
 8001670:	9301      	str	r3, [sp, #4]
 8001672:	f107 030f 	add.w	r3, r7, #15
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	2301      	movs	r3, #1
 800167a:	22f2      	movs	r2, #242	@ 0xf2
 800167c:	21ec      	movs	r1, #236	@ 0xec
 800167e:	484c      	ldr	r0, [pc, #304]	@ (80017b0 <BME280_Config+0x1a8>)
 8001680:	f005 ff46 	bl	8007510 <HAL_I2C_Mem_Write>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d002      	beq.n	8001690 <BME280_Config+0x88>
	{
		return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
 800168e:	e08a      	b.n	80017a6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001690:	2064      	movs	r0, #100	@ 0x64
 8001692:	f004 f98b 	bl	80059ac <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 8001696:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	f107 030e 	add.w	r3, r7, #14
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	2301      	movs	r3, #1
 80016a8:	22f2      	movs	r2, #242	@ 0xf2
 80016aa:	21ec      	movs	r1, #236	@ 0xec
 80016ac:	4840      	ldr	r0, [pc, #256]	@ (80017b0 <BME280_Config+0x1a8>)
 80016ae:	f006 f843 	bl	8007738 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80016b2:	7bba      	ldrb	r2, [r7, #14]
 80016b4:	7bfb      	ldrb	r3, [r7, #15]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d002      	beq.n	80016c0 <BME280_Config+0xb8>
	{
		return -1;
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	e072      	b.n	80017a6 <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80016c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016c4:	015b      	lsls	r3, r3, #5
 80016c6:	b25a      	sxtb	r2, r3
 80016c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	b25b      	sxtb	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b25b      	sxtb	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80016d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016dc:	9302      	str	r3, [sp, #8]
 80016de:	2301      	movs	r3, #1
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	f107 030f 	add.w	r3, r7, #15
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2301      	movs	r3, #1
 80016ea:	22f5      	movs	r2, #245	@ 0xf5
 80016ec:	21ec      	movs	r1, #236	@ 0xec
 80016ee:	4830      	ldr	r0, [pc, #192]	@ (80017b0 <BME280_Config+0x1a8>)
 80016f0:	f005 ff0e 	bl	8007510 <HAL_I2C_Mem_Write>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <BME280_Config+0xf8>
	{
		return -1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	e052      	b.n	80017a6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001700:	2064      	movs	r0, #100	@ 0x64
 8001702:	f004 f953 	bl	80059ac <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	2301      	movs	r3, #1
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	f107 030e 	add.w	r3, r7, #14
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	2301      	movs	r3, #1
 8001718:	22f5      	movs	r2, #245	@ 0xf5
 800171a:	21ec      	movs	r1, #236	@ 0xec
 800171c:	4824      	ldr	r0, [pc, #144]	@ (80017b0 <BME280_Config+0x1a8>)
 800171e:	f006 f80b 	bl	8007738 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001722:	7bba      	ldrb	r2, [r7, #14]
 8001724:	7bfb      	ldrb	r3, [r7, #15]
 8001726:	429a      	cmp	r2, r3
 8001728:	d002      	beq.n	8001730 <BME280_Config+0x128>
	{
		return -1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
 800172e:	e03a      	b.n	80017a6 <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001730:	79fb      	ldrb	r3, [r7, #7]
 8001732:	015b      	lsls	r3, r3, #5
 8001734:	b25a      	sxtb	r2, r3
 8001736:	79bb      	ldrb	r3, [r7, #6]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	b25b      	sxtb	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b25a      	sxtb	r2, r3
 8001740:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001744:	4313      	orrs	r3, r2
 8001746:	b25b      	sxtb	r3, r3
 8001748:	b2db      	uxtb	r3, r3
 800174a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800174c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001750:	9302      	str	r3, [sp, #8]
 8001752:	2301      	movs	r3, #1
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	f107 030f 	add.w	r3, r7, #15
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2301      	movs	r3, #1
 800175e:	22f4      	movs	r2, #244	@ 0xf4
 8001760:	21ec      	movs	r1, #236	@ 0xec
 8001762:	4813      	ldr	r0, [pc, #76]	@ (80017b0 <BME280_Config+0x1a8>)
 8001764:	f005 fed4 	bl	8007510 <HAL_I2C_Mem_Write>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <BME280_Config+0x16c>
	{
		return -1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e018      	b.n	80017a6 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001774:	2064      	movs	r0, #100	@ 0x64
 8001776:	f004 f919 	bl	80059ac <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800177a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800177e:	9302      	str	r3, [sp, #8]
 8001780:	2301      	movs	r3, #1
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	f107 030e 	add.w	r3, r7, #14
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2301      	movs	r3, #1
 800178c:	22f4      	movs	r2, #244	@ 0xf4
 800178e:	21ec      	movs	r1, #236	@ 0xec
 8001790:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <BME280_Config+0x1a8>)
 8001792:	f005 ffd1 	bl	8007738 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001796:	7bba      	ldrb	r2, [r7, #14]
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	429a      	cmp	r2, r3
 800179c:	d002      	beq.n	80017a4 <BME280_Config+0x19c>
	{
		return -1;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	e000      	b.n	80017a6 <BME280_Config+0x19e>
	}

	return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200002ac 	.word	0x200002ac

080017b4 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80017ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001840 <BMEReadRaw+0x8c>)
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	22d0      	movs	r2, #208	@ 0xd0
 80017cc:	21ec      	movs	r1, #236	@ 0xec
 80017ce:	481d      	ldr	r0, [pc, #116]	@ (8001844 <BMEReadRaw+0x90>)
 80017d0:	f005 ffb2 	bl	8007738 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 80017d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <BMEReadRaw+0x8c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b60      	cmp	r3, #96	@ 0x60
 80017da:	d12a      	bne.n	8001832 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	9302      	str	r3, [sp, #8]
 80017e2:	2308      	movs	r3, #8
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	463b      	mov	r3, r7
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2301      	movs	r3, #1
 80017ec:	22f7      	movs	r2, #247	@ 0xf7
 80017ee:	21ec      	movs	r1, #236	@ 0xec
 80017f0:	4814      	ldr	r0, [pc, #80]	@ (8001844 <BMEReadRaw+0x90>)
 80017f2:	f005 ffa1 	bl	8007738 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80017f6:	783b      	ldrb	r3, [r7, #0]
 80017f8:	031a      	lsls	r2, r3, #12
 80017fa:	787b      	ldrb	r3, [r7, #1]
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	4313      	orrs	r3, r2
 8001800:	78ba      	ldrb	r2, [r7, #2]
 8001802:	0912      	lsrs	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	4313      	orrs	r3, r2
 8001808:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <BMEReadRaw+0x94>)
 800180a:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	031a      	lsls	r2, r3, #12
 8001810:	793b      	ldrb	r3, [r7, #4]
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	4313      	orrs	r3, r2
 8001816:	797a      	ldrb	r2, [r7, #5]
 8001818:	0912      	lsrs	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	4313      	orrs	r3, r2
 800181e:	4a0b      	ldr	r2, [pc, #44]	@ (800184c <BMEReadRaw+0x98>)
 8001820:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001822:	79bb      	ldrb	r3, [r7, #6]
 8001824:	021b      	lsls	r3, r3, #8
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	4313      	orrs	r3, r2
 800182a:	4a09      	ldr	r2, [pc, #36]	@ (8001850 <BMEReadRaw+0x9c>)
 800182c:	6013      	str	r3, [r2, #0]

		return 0;
 800182e:	2300      	movs	r3, #0
 8001830:	e001      	b.n	8001836 <BMEReadRaw+0x82>
	}

	else return -1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000210 	.word	0x20000210
 8001844:	200002ac 	.word	0x200002ac
 8001848:	20000218 	.word	0x20000218
 800184c:	20000214 	.word	0x20000214
 8001850:	2000021c 	.word	0x2000021c

08001854 <BME280_WakeUP>:

/* To be used when doing the force measurement
 * the Device need to be put in forced mode every time the measurement is needed
 */
void BME280_WakeUP(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af04      	add	r7, sp, #16
	uint8_t datatowrite = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	71fb      	strb	r3, [r7, #7]

	// first read the register
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000);
 800185e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001862:	9302      	str	r3, [sp, #8]
 8001864:	2301      	movs	r3, #1
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	1dfb      	adds	r3, r7, #7
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2301      	movs	r3, #1
 800186e:	22f4      	movs	r2, #244	@ 0xf4
 8001870:	21ec      	movs	r1, #236	@ 0xec
 8001872:	480e      	ldr	r0, [pc, #56]	@ (80018ac <BME280_WakeUP+0x58>)
 8001874:	f005 ff60 	bl	8007738 <HAL_I2C_Mem_Read>

	// modify the data with the forced mode
	datatowrite = datatowrite | MODE_FORCED;
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f043 0301 	orr.w	r3, r3, #1
 800187e:	b2db      	uxtb	r3, r3
 8001880:	71fb      	strb	r3, [r7, #7]

	// write the new data to the register
	HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000);
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	9302      	str	r3, [sp, #8]
 8001888:	2301      	movs	r3, #1
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	1dfb      	adds	r3, r7, #7
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	2301      	movs	r3, #1
 8001892:	22f4      	movs	r2, #244	@ 0xf4
 8001894:	21ec      	movs	r1, #236	@ 0xec
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <BME280_WakeUP+0x58>)
 8001898:	f005 fe3a 	bl	8007510 <HAL_I2C_Mem_Write>

	HAL_Delay (100);
 800189c:	2064      	movs	r0, #100	@ 0x64
 800189e:	f004 f885 	bl	80059ac <HAL_Delay>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200002ac 	.word	0x200002ac

080018b0 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	10da      	asrs	r2, r3, #3
 80018bc:	4b18      	ldr	r3, [pc, #96]	@ (8001920 <BME280_compensate_T_int32+0x70>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <BME280_compensate_T_int32+0x74>)
 80018c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	12db      	asrs	r3, r3, #11
 80018d0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	111b      	asrs	r3, r3, #4
 80018d6:	4a12      	ldr	r2, [pc, #72]	@ (8001920 <BME280_compensate_T_int32+0x70>)
 80018d8:	8812      	ldrh	r2, [r2, #0]
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	1112      	asrs	r2, r2, #4
 80018e0:	490f      	ldr	r1, [pc, #60]	@ (8001920 <BME280_compensate_T_int32+0x70>)
 80018e2:	8809      	ldrh	r1, [r1, #0]
 80018e4:	1a52      	subs	r2, r2, r1
 80018e6:	fb02 f303 	mul.w	r3, r2, r3
 80018ea:	131b      	asrs	r3, r3, #12
 80018ec:	4a0e      	ldr	r2, [pc, #56]	@ (8001928 <BME280_compensate_T_int32+0x78>)
 80018ee:	f9b2 2000 	ldrsh.w	r2, [r2]
 80018f2:	fb02 f303 	mul.w	r3, r2, r3
 80018f6:	139b      	asrs	r3, r3, #14
 80018f8:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4413      	add	r3, r2
 8001900:	4a0a      	ldr	r2, [pc, #40]	@ (800192c <BME280_compensate_T_int32+0x7c>)
 8001902:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <BME280_compensate_T_int32+0x7c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	3380      	adds	r3, #128	@ 0x80
 8001910:	121b      	asrs	r3, r3, #8
 8001912:	60fb      	str	r3, [r7, #12]
	return T;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr
 8001920:	20000220 	.word	0x20000220
 8001924:	20000228 	.word	0x20000228
 8001928:	2000022a 	.word	0x2000022a
 800192c:	20000244 	.word	0x20000244

08001930 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001934:	b0ca      	sub	sp, #296	@ 0x128
 8001936:	af00      	add	r7, sp, #0
 8001938:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 800193c:	4bae      	ldr	r3, [pc, #696]	@ (8001bf8 <BME280_compensate_P_int64+0x2c8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	17da      	asrs	r2, r3, #31
 8001942:	461c      	mov	r4, r3
 8001944:	4615      	mov	r5, r2
 8001946:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800194a:	f145 3bff 	adc.w	fp, r5, #4294967295
 800194e:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001952:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001956:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800195a:	fb03 f102 	mul.w	r1, r3, r2
 800195e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001962:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	18ca      	adds	r2, r1, r3
 800196c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001970:	fba3 8903 	umull	r8, r9, r3, r3
 8001974:	eb02 0309 	add.w	r3, r2, r9
 8001978:	4699      	mov	r9, r3
 800197a:	4ba0      	ldr	r3, [pc, #640]	@ (8001bfc <BME280_compensate_P_int64+0x2cc>)
 800197c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001980:	b21b      	sxth	r3, r3
 8001982:	17da      	asrs	r2, r3, #31
 8001984:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001988:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800198c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001990:	4603      	mov	r3, r0
 8001992:	fb03 f209 	mul.w	r2, r3, r9
 8001996:	460b      	mov	r3, r1
 8001998:	fb08 f303 	mul.w	r3, r8, r3
 800199c:	4413      	add	r3, r2
 800199e:	4602      	mov	r2, r0
 80019a0:	fba8 2102 	umull	r2, r1, r8, r2
 80019a4:	f8c7 10c4 	str.w	r1, [r7, #196]	@ 0xc4
 80019a8:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80019ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80019b0:	4413      	add	r3, r2
 80019b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80019b6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80019ba:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80019be:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80019c2:	4b8f      	ldr	r3, [pc, #572]	@ (8001c00 <BME280_compensate_P_int64+0x2d0>)
 80019c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c8:	b21b      	sxth	r3, r3
 80019ca:	17da      	asrs	r2, r3, #31
 80019cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80019d0:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80019d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80019d8:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80019dc:	462a      	mov	r2, r5
 80019de:	fb02 f203 	mul.w	r2, r2, r3
 80019e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80019e6:	4621      	mov	r1, r4
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	441a      	add	r2, r3
 80019ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80019f2:	4621      	mov	r1, r4
 80019f4:	fba3 3101 	umull	r3, r1, r3, r1
 80019f8:	f8c7 1104 	str.w	r1, [r7, #260]	@ 0x104
 80019fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001a04:	18d3      	adds	r3, r2, r3
 8001a06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001a0a:	f04f 0000 	mov.w	r0, #0
 8001a0e:	f04f 0100 	mov.w	r1, #0
 8001a12:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001a16:	462b      	mov	r3, r5
 8001a18:	0459      	lsls	r1, r3, #17
 8001a1a:	4622      	mov	r2, r4
 8001a1c:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001a20:	4623      	mov	r3, r4
 8001a22:	0458      	lsls	r0, r3, #17
 8001a24:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a28:	1814      	adds	r4, r2, r0
 8001a2a:	643c      	str	r4, [r7, #64]	@ 0x40
 8001a2c:	414b      	adcs	r3, r1
 8001a2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a30:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001a34:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001a38:	4b72      	ldr	r3, [pc, #456]	@ (8001c04 <BME280_compensate_P_int64+0x2d4>)
 8001a3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3e:	b21b      	sxth	r3, r3
 8001a40:	17da      	asrs	r2, r3, #31
 8001a42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001a46:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001a4a:	f04f 0000 	mov.w	r0, #0
 8001a4e:	f04f 0100 	mov.w	r1, #0
 8001a52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a56:	00d9      	lsls	r1, r3, #3
 8001a58:	2000      	movs	r0, #0
 8001a5a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a5e:	1814      	adds	r4, r2, r0
 8001a60:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001a62:	414b      	adcs	r3, r1
 8001a64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a66:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001a6a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001a6e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a72:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a76:	fb03 f102 	mul.w	r1, r3, r2
 8001a7a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001a7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	18ca      	adds	r2, r1, r3
 8001a88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a8c:	fba3 3103 	umull	r3, r1, r3, r3
 8001a90:	f8c7 10fc 	str.w	r1, [r7, #252]	@ 0xfc
 8001a94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001a9c:	18d3      	adds	r3, r2, r3
 8001a9e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001aa2:	4b59      	ldr	r3, [pc, #356]	@ (8001c08 <BME280_compensate_P_int64+0x2d8>)
 8001aa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	17da      	asrs	r2, r3, #31
 8001aac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001ab0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001ab4:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	@ 0xf8
 8001ab8:	4622      	mov	r2, r4
 8001aba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001abe:	4641      	mov	r1, r8
 8001ac0:	fb01 f202 	mul.w	r2, r1, r2
 8001ac4:	464d      	mov	r5, r9
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	4621      	mov	r1, r4
 8001aca:	4603      	mov	r3, r0
 8001acc:	fb03 f305 	mul.w	r3, r3, r5
 8001ad0:	4413      	add	r3, r2
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4641      	mov	r1, r8
 8001ad6:	fba2 2101 	umull	r2, r1, r2, r1
 8001ada:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8001ade:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001ae2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001aec:	f04f 0000 	mov.w	r0, #0
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001af8:	4623      	mov	r3, r4
 8001afa:	0a18      	lsrs	r0, r3, #8
 8001afc:	462a      	mov	r2, r5
 8001afe:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001b02:	462b      	mov	r3, r5
 8001b04:	1219      	asrs	r1, r3, #8
 8001b06:	4b41      	ldr	r3, [pc, #260]	@ (8001c0c <BME280_compensate_P_int64+0x2dc>)
 8001b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	17da      	asrs	r2, r3, #31
 8001b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001b14:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001b18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b1c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001b20:	464a      	mov	r2, r9
 8001b22:	fb02 f203 	mul.w	r2, r2, r3
 8001b26:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001b2a:	4644      	mov	r4, r8
 8001b2c:	fb04 f303 	mul.w	r3, r4, r3
 8001b30:	441a      	add	r2, r3
 8001b32:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001b36:	4644      	mov	r4, r8
 8001b38:	fba3 3404 	umull	r3, r4, r3, r4
 8001b3c:	f8c7 40ec 	str.w	r4, [r7, #236]	@ 0xec
 8001b40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001b44:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001b48:	18d3      	adds	r3, r2, r3
 8001b4a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001b5a:	464c      	mov	r4, r9
 8001b5c:	0323      	lsls	r3, r4, #12
 8001b5e:	46c4      	mov	ip, r8
 8001b60:	ea43 531c 	orr.w	r3, r3, ip, lsr #20
 8001b64:	4644      	mov	r4, r8
 8001b66:	0322      	lsls	r2, r4, #12
 8001b68:	1884      	adds	r4, r0, r2
 8001b6a:	633c      	str	r4, [r7, #48]	@ 0x30
 8001b6c:	eb41 0303 	adc.w	r3, r1, r3
 8001b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b72:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001b76:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001b7a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b7e:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001b82:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001b86:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001b8a:	4b21      	ldr	r3, [pc, #132]	@ (8001c10 <BME280_compensate_P_int64+0x2e0>)
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	2200      	movs	r2, #0
 8001b92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b96:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b9a:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001ba4:	4641      	mov	r1, r8
 8001ba6:	fb01 f202 	mul.w	r2, r1, r2
 8001baa:	464d      	mov	r5, r9
 8001bac:	4618      	mov	r0, r3
 8001bae:	4621      	mov	r1, r4
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	fb03 f305 	mul.w	r3, r3, r5
 8001bb6:	4413      	add	r3, r2
 8001bb8:	4602      	mov	r2, r0
 8001bba:	4641      	mov	r1, r8
 8001bbc:	fba2 2101 	umull	r2, r1, r2, r1
 8001bc0:	f8c7 10e4 	str.w	r1, [r7, #228]	@ 0xe4
 8001bc4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001bc8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001bcc:	4413      	add	r3, r2
 8001bce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001bde:	4629      	mov	r1, r5
 8001be0:	104a      	asrs	r2, r1, #1
 8001be2:	4629      	mov	r1, r5
 8001be4:	17cb      	asrs	r3, r1, #31
 8001be6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001bea:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	d110      	bne.n	8001c14 <BME280_compensate_P_int64+0x2e4>
	{
		return 0; // avoid exception caused by division by zero
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e152      	b.n	8001e9c <BME280_compensate_P_int64+0x56c>
 8001bf6:	bf00      	nop
 8001bf8:	20000244 	.word	0x20000244
 8001bfc:	20000234 	.word	0x20000234
 8001c00:	20000232 	.word	0x20000232
 8001c04:	20000230 	.word	0x20000230
 8001c08:	2000022e 	.word	0x2000022e
 8001c0c:	2000022c 	.word	0x2000022c
 8001c10:	20000222 	.word	0x20000222
	}
	p = 1048576-adc_P;
 8001c14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001c18:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001c1c:	17da      	asrs	r2, r3, #31
 8001c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c22:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001c26:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c2e:	105b      	asrs	r3, r3, #1
 8001c30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001c34:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001c38:	07db      	lsls	r3, r3, #31
 8001c3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001c3e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8001c46:	4604      	mov	r4, r0
 8001c48:	1aa4      	subs	r4, r4, r2
 8001c4a:	67bc      	str	r4, [r7, #120]	@ 0x78
 8001c4c:	eb61 0303 	sbc.w	r3, r1, r3
 8001c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001c52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001c56:	4622      	mov	r2, r4
 8001c58:	462b      	mov	r3, r5
 8001c5a:	1891      	adds	r1, r2, r2
 8001c5c:	6239      	str	r1, [r7, #32]
 8001c5e:	415b      	adcs	r3, r3
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001c66:	4621      	mov	r1, r4
 8001c68:	1851      	adds	r1, r2, r1
 8001c6a:	61b9      	str	r1, [r7, #24]
 8001c6c:	4629      	mov	r1, r5
 8001c6e:	414b      	adcs	r3, r1
 8001c70:	61fb      	str	r3, [r7, #28]
 8001c72:	f04f 0200 	mov.w	r2, #0
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001c7e:	4649      	mov	r1, r9
 8001c80:	018b      	lsls	r3, r1, #6
 8001c82:	4641      	mov	r1, r8
 8001c84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c88:	4641      	mov	r1, r8
 8001c8a:	018a      	lsls	r2, r1, #6
 8001c8c:	4641      	mov	r1, r8
 8001c8e:	1889      	adds	r1, r1, r2
 8001c90:	6139      	str	r1, [r7, #16]
 8001c92:	4649      	mov	r1, r9
 8001c94:	eb43 0101 	adc.w	r1, r3, r1
 8001c98:	6179      	str	r1, [r7, #20]
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	008b      	lsls	r3, r1, #2
 8001caa:	46c4      	mov	ip, r8
 8001cac:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001cb0:	4641      	mov	r1, r8
 8001cb2:	008a      	lsls	r2, r1, #2
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4622      	mov	r2, r4
 8001cbc:	189b      	adds	r3, r3, r2
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	462a      	mov	r2, r5
 8001cc4:	eb42 0303 	adc.w	r3, r2, r3
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001cd6:	4649      	mov	r1, r9
 8001cd8:	008b      	lsls	r3, r1, #2
 8001cda:	46c4      	mov	ip, r8
 8001cdc:	ea43 739c 	orr.w	r3, r3, ip, lsr #30
 8001ce0:	4641      	mov	r1, r8
 8001ce2:	008a      	lsls	r2, r1, #2
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4622      	mov	r2, r4
 8001cec:	189b      	adds	r3, r3, r2
 8001cee:	673b      	str	r3, [r7, #112]	@ 0x70
 8001cf0:	462b      	mov	r3, r5
 8001cf2:	460a      	mov	r2, r1
 8001cf4:	eb42 0303 	adc.w	r3, r2, r3
 8001cf8:	677b      	str	r3, [r7, #116]	@ 0x74
 8001cfa:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001cfe:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001d02:	f7ff f9d7 	bl	80010b4 <__aeabi_ldivmod>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001d0e:	4b66      	ldr	r3, [pc, #408]	@ (8001ea8 <BME280_compensate_P_int64+0x578>)
 8001d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	17da      	asrs	r2, r3, #31
 8001d18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001d1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001d1c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001d20:	f04f 0000 	mov.w	r0, #0
 8001d24:	f04f 0100 	mov.w	r1, #0
 8001d28:	0b50      	lsrs	r0, r2, #13
 8001d2a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d2e:	1359      	asrs	r1, r3, #13
 8001d30:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001d34:	462b      	mov	r3, r5
 8001d36:	fb00 f203 	mul.w	r2, r0, r3
 8001d3a:	4623      	mov	r3, r4
 8001d3c:	fb03 f301 	mul.w	r3, r3, r1
 8001d40:	4413      	add	r3, r2
 8001d42:	4622      	mov	r2, r4
 8001d44:	fba2 2100 	umull	r2, r1, r2, r0
 8001d48:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8001d4c:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001d50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001d54:	4413      	add	r3, r2
 8001d56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001d5a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001d5e:	f04f 0000 	mov.w	r0, #0
 8001d62:	f04f 0100 	mov.w	r1, #0
 8001d66:	0b50      	lsrs	r0, r2, #13
 8001d68:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001d6c:	1359      	asrs	r1, r3, #13
 8001d6e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001d72:	462b      	mov	r3, r5
 8001d74:	fb00 f203 	mul.w	r2, r0, r3
 8001d78:	4623      	mov	r3, r4
 8001d7a:	fb03 f301 	mul.w	r3, r3, r1
 8001d7e:	4413      	add	r3, r2
 8001d80:	4622      	mov	r2, r4
 8001d82:	fba2 2100 	umull	r2, r1, r2, r0
 8001d86:	f8c7 10d4 	str.w	r1, [r7, #212]	@ 0xd4
 8001d8a:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001d8e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001d92:	4413      	add	r3, r2
 8001d94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001d98:	f04f 0200 	mov.w	r2, #0
 8001d9c:	f04f 0300 	mov.w	r3, #0
 8001da0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001da4:	4621      	mov	r1, r4
 8001da6:	0e4a      	lsrs	r2, r1, #25
 8001da8:	4620      	mov	r0, r4
 8001daa:	4629      	mov	r1, r5
 8001dac:	460c      	mov	r4, r1
 8001dae:	ea42 12c4 	orr.w	r2, r2, r4, lsl #7
 8001db2:	164b      	asrs	r3, r1, #25
 8001db4:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001db8:	4b3c      	ldr	r3, [pc, #240]	@ (8001eac <BME280_compensate_P_int64+0x57c>)
 8001dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dbe:	b21b      	sxth	r3, r3
 8001dc0:	17da      	asrs	r2, r3, #31
 8001dc2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dc4:	667a      	str	r2, [r7, #100]	@ 0x64
 8001dc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001dca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001dce:	462a      	mov	r2, r5
 8001dd0:	fb02 f203 	mul.w	r2, r2, r3
 8001dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001dd8:	4621      	mov	r1, r4
 8001dda:	fb01 f303 	mul.w	r3, r1, r3
 8001dde:	4413      	add	r3, r2
 8001de0:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001de4:	4621      	mov	r1, r4
 8001de6:	fba2 2101 	umull	r2, r1, r2, r1
 8001dea:	f8c7 10cc 	str.w	r1, [r7, #204]	@ 0xcc
 8001dee:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001df2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001df6:	4413      	add	r3, r2
 8001df8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	f04f 0300 	mov.w	r3, #0
 8001e04:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001e08:	4621      	mov	r1, r4
 8001e0a:	0cca      	lsrs	r2, r1, #19
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	4629      	mov	r1, r5
 8001e10:	460c      	mov	r4, r1
 8001e12:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 8001e16:	14cb      	asrs	r3, r1, #19
 8001e18:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001e1c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001e20:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001e24:	1884      	adds	r4, r0, r2
 8001e26:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001e28:	eb41 0303 	adc.w	r3, r1, r3
 8001e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e2e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001e32:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001e36:	4621      	mov	r1, r4
 8001e38:	1889      	adds	r1, r1, r2
 8001e3a:	6539      	str	r1, [r7, #80]	@ 0x50
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	eb43 0101 	adc.w	r1, r3, r1
 8001e42:	6579      	str	r1, [r7, #84]	@ 0x54
 8001e44:	f04f 0000 	mov.w	r0, #0
 8001e48:	f04f 0100 	mov.w	r1, #0
 8001e4c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001e50:	4623      	mov	r3, r4
 8001e52:	0a18      	lsrs	r0, r3, #8
 8001e54:	462a      	mov	r2, r5
 8001e56:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8001e5a:	462b      	mov	r3, r5
 8001e5c:	1219      	asrs	r1, r3, #8
 8001e5e:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <BME280_compensate_P_int64+0x580>)
 8001e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	17da      	asrs	r2, r3, #31
 8001e68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001e78:	464c      	mov	r4, r9
 8001e7a:	0123      	lsls	r3, r4, #4
 8001e7c:	46c4      	mov	ip, r8
 8001e7e:	ea43 731c 	orr.w	r3, r3, ip, lsr #28
 8001e82:	4644      	mov	r4, r8
 8001e84:	0122      	lsls	r2, r4, #4
 8001e86:	1884      	adds	r4, r0, r2
 8001e88:	603c      	str	r4, [r7, #0]
 8001e8a:	eb41 0303 	adc.w	r3, r1, r3
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001e94:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001e98:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea8:	2000023a 	.word	0x2000023a
 8001eac:	20000238 	.word	0x20000238
 8001eb0:	20000236 	.word	0x20000236

08001eb4 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8001f70 <bme280_compensate_H_int32+0xbc>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001ec4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	039a      	lsls	r2, r3, #14
 8001eca:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <bme280_compensate_H_int32+0xc0>)
 8001ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed0:	051b      	lsls	r3, r3, #20
 8001ed2:	1ad2      	subs	r2, r2, r3
 8001ed4:	4b28      	ldr	r3, [pc, #160]	@ (8001f78 <bme280_compensate_H_int32+0xc4>)
 8001ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eda:	4619      	mov	r1, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	fb01 f303 	mul.w	r3, r1, r3
 8001ee2:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ee4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001ee8:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001eea:	4a24      	ldr	r2, [pc, #144]	@ (8001f7c <bme280_compensate_H_int32+0xc8>)
 8001eec:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ef0:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001ef8:	1292      	asrs	r2, r2, #10
 8001efa:	4921      	ldr	r1, [pc, #132]	@ (8001f80 <bme280_compensate_H_int32+0xcc>)
 8001efc:	8809      	ldrh	r1, [r1, #0]
 8001efe:	4608      	mov	r0, r1
 8001f00:	68f9      	ldr	r1, [r7, #12]
 8001f02:	fb00 f101 	mul.w	r1, r0, r1
 8001f06:	12c9      	asrs	r1, r1, #11
 8001f08:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001f0c:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001f10:	1292      	asrs	r2, r2, #10
 8001f12:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001f16:	491b      	ldr	r1, [pc, #108]	@ (8001f84 <bme280_compensate_H_int32+0xd0>)
 8001f18:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001f1c:	fb01 f202 	mul.w	r2, r1, r2
 8001f20:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001f24:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	13db      	asrs	r3, r3, #15
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	13d2      	asrs	r2, r2, #15
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001f3a:	4a13      	ldr	r2, [pc, #76]	@ (8001f88 <bme280_compensate_H_int32+0xd4>)
 8001f3c:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001f3e:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001f42:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001f50:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001f58:	bfa8      	it	ge
 8001f5a:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001f5e:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	131b      	asrs	r3, r3, #12
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3714      	adds	r7, #20
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000244 	.word	0x20000244
 8001f74:	2000023e 	.word	0x2000023e
 8001f78:	20000240 	.word	0x20000240
 8001f7c:	20000242 	.word	0x20000242
 8001f80:	20000226 	.word	0x20000226
 8001f84:	2000023c 	.word	0x2000023c
 8001f88:	20000224 	.word	0x20000224

08001f8c <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001f90:	f7ff fc10 	bl	80017b4 <BMEReadRaw>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d163      	bne.n	8002062 <BME280_Measure+0xd6>
	{
		  if (tRaw == 0x800000) Temperature = 0; // value in case temp measurement was disabled
 8001f9a:	4b39      	ldr	r3, [pc, #228]	@ (8002080 <BME280_Measure+0xf4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fa2:	d104      	bne.n	8001fae <BME280_Measure+0x22>
 8001fa4:	4b37      	ldr	r3, [pc, #220]	@ (8002084 <BME280_Measure+0xf8>)
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e016      	b.n	8001fdc <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001fae:	4b34      	ldr	r3, [pc, #208]	@ (8002080 <BME280_Measure+0xf4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fc7c 	bl	80018b0 <BME280_compensate_T_int32>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fa8a 	bl	80004d4 <__aeabi_i2d>
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	4b30      	ldr	r3, [pc, #192]	@ (8002088 <BME280_Measure+0xfc>)
 8001fc6:	f7fe fc19 	bl	80007fc <__aeabi_ddiv>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	460b      	mov	r3, r1
 8001fce:	4610      	mov	r0, r2
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f7fe fdc1 	bl	8000b58 <__aeabi_d2f>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4a2a      	ldr	r2, [pc, #168]	@ (8002084 <BME280_Measure+0xf8>)
 8001fda:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // value in case temp measurement was disabled
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <BME280_Measure+0x100>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001fe4:	d104      	bne.n	8001ff0 <BME280_Measure+0x64>
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8002090 <BME280_Measure+0x104>)
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e016      	b.n	800201e <BME280_Measure+0x92>
		  else
		  {
#if SUPPORT_64BIT
			  Pressure = (BME280_compensate_P_int64 (pRaw))/25600.0;  // as per datasheet, the pressure is x256 //divided by an additonal 100 to get to standard pascal
 8001ff0:	4b26      	ldr	r3, [pc, #152]	@ (800208c <BME280_Measure+0x100>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fc9b 	bl	8001930 <BME280_compensate_P_int64>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fa59 	bl	80004b4 <__aeabi_ui2d>
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	4b23      	ldr	r3, [pc, #140]	@ (8002094 <BME280_Measure+0x108>)
 8002008:	f7fe fbf8 	bl	80007fc <__aeabi_ddiv>
 800200c:	4602      	mov	r2, r0
 800200e:	460b      	mov	r3, r1
 8002010:	4610      	mov	r0, r2
 8002012:	4619      	mov	r1, r3
 8002014:	f7fe fda0 	bl	8000b58 <__aeabi_d2f>
 8002018:	4603      	mov	r3, r0
 800201a:	4a1d      	ldr	r2, [pc, #116]	@ (8002090 <BME280_Measure+0x104>)
 800201c:	6013      	str	r3, [r2, #0]
			  Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) Humidity = 0; // value in case temp measurement was disabled
 800201e:	4b1e      	ldr	r3, [pc, #120]	@ (8002098 <BME280_Measure+0x10c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002026:	d104      	bne.n	8002032 <BME280_Measure+0xa6>
 8002028:	4b1c      	ldr	r3, [pc, #112]	@ (800209c <BME280_Measure+0x110>)
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
	// if the device is detached
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8002030:	e023      	b.n	800207a <BME280_Measure+0xee>
			  Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8002032:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <BME280_Measure+0x10c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff3c 	bl	8001eb4 <bme280_compensate_H_int32>
 800203c:	4603      	mov	r3, r0
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa38 	bl	80004b4 <__aeabi_ui2d>
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <BME280_Measure+0x114>)
 800204a:	f7fe fbd7 	bl	80007fc <__aeabi_ddiv>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fd7f 	bl	8000b58 <__aeabi_d2f>
 800205a:	4603      	mov	r3, r0
 800205c:	4a0f      	ldr	r2, [pc, #60]	@ (800209c <BME280_Measure+0x110>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	e00b      	b.n	800207a <BME280_Measure+0xee>
		Temperature = Pressure = Humidity = 0;
 8002062:	4b0e      	ldr	r3, [pc, #56]	@ (800209c <BME280_Measure+0x110>)
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	4b0c      	ldr	r3, [pc, #48]	@ (800209c <BME280_Measure+0x110>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a08      	ldr	r2, [pc, #32]	@ (8002090 <BME280_Measure+0x104>)
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <BME280_Measure+0x104>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a03      	ldr	r2, [pc, #12]	@ (8002084 <BME280_Measure+0xf8>)
 8002078:	6013      	str	r3, [r2, #0]
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	20000214 	.word	0x20000214
 8002084:	20000388 	.word	0x20000388
 8002088:	40590000 	.word	0x40590000
 800208c:	20000218 	.word	0x20000218
 8002090:	2000038c 	.word	0x2000038c
 8002094:	40d90000 	.word	0x40d90000
 8002098:	2000021c 	.word	0x2000021c
 800209c:	20000390 	.word	0x20000390
 80020a0:	40900000 	.word	0x40900000

080020a4 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4013      	ands	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020c8:	68fb      	ldr	r3, [r7, #12]
}
 80020ca:	bf00      	nop
 80020cc:	3714      	adds	r7, #20
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80020ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4013      	ands	r3, r2
 80020f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020f8:	68fb      	ldr	r3, [r7, #12]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800210c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002110:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	43db      	mvns	r3, r3
 8002116:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800211a:	4013      	ands	r3, r2
 800211c:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr

08002128 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8002138:	4b2c      	ldr	r3, [pc, #176]	@ (80021ec <MX_ADC_Init+0xc4>)
 800213a:	4a2d      	ldr	r2, [pc, #180]	@ (80021f0 <MX_ADC_Init+0xc8>)
 800213c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800213e:	4b2b      	ldr	r3, [pc, #172]	@ (80021ec <MX_ADC_Init+0xc4>)
 8002140:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002144:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002146:	4b29      	ldr	r3, [pc, #164]	@ (80021ec <MX_ADC_Init+0xc4>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800214c:	4b27      	ldr	r3, [pc, #156]	@ (80021ec <MX_ADC_Init+0xc4>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002152:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <MX_ADC_Init+0xc4>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002158:	4b24      	ldr	r3, [pc, #144]	@ (80021ec <MX_ADC_Init+0xc4>)
 800215a:	2204      	movs	r2, #4
 800215c:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800215e:	4b23      	ldr	r3, [pc, #140]	@ (80021ec <MX_ADC_Init+0xc4>)
 8002160:	2200      	movs	r2, #0
 8002162:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002164:	4b21      	ldr	r3, [pc, #132]	@ (80021ec <MX_ADC_Init+0xc4>)
 8002166:	2200      	movs	r2, #0
 8002168:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800216a:	4b20      	ldr	r3, [pc, #128]	@ (80021ec <MX_ADC_Init+0xc4>)
 800216c:	2200      	movs	r2, #0
 800216e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8002170:	4b1e      	ldr	r3, [pc, #120]	@ (80021ec <MX_ADC_Init+0xc4>)
 8002172:	2201      	movs	r2, #1
 8002174:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002176:	4b1d      	ldr	r3, [pc, #116]	@ (80021ec <MX_ADC_Init+0xc4>)
 8002178:	2200      	movs	r2, #0
 800217a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800217e:	4b1b      	ldr	r3, [pc, #108]	@ (80021ec <MX_ADC_Init+0xc4>)
 8002180:	2200      	movs	r2, #0
 8002182:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002184:	4b19      	ldr	r3, [pc, #100]	@ (80021ec <MX_ADC_Init+0xc4>)
 8002186:	2200      	movs	r2, #0
 8002188:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800218a:	4b18      	ldr	r3, [pc, #96]	@ (80021ec <MX_ADC_Init+0xc4>)
 800218c:	2200      	movs	r2, #0
 800218e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002192:	4b16      	ldr	r3, [pc, #88]	@ (80021ec <MX_ADC_Init+0xc4>)
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_19CYCLES_5;
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <MX_ADC_Init+0xc4>)
 800219a:	2204      	movs	r2, #4
 800219c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_19CYCLES_5;
 800219e:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <MX_ADC_Init+0xc4>)
 80021a0:	2204      	movs	r2, #4
 80021a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80021a4:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <MX_ADC_Init+0xc4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	@ (80021ec <MX_ADC_Init+0xc4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80021b2:	480e      	ldr	r0, [pc, #56]	@ (80021ec <MX_ADC_Init+0xc4>)
 80021b4:	f003 fdbe 	bl	8005d34 <HAL_ADC_Init>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_ADC_Init+0x9a>
  {
    Error_Handler();
 80021be:	f001 fc61 	bl	8003a84 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80021c2:	4b0c      	ldr	r3, [pc, #48]	@ (80021f4 <MX_ADC_Init+0xcc>)
 80021c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021c6:	2300      	movs	r3, #0
 80021c8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4806      	ldr	r0, [pc, #24]	@ (80021ec <MX_ADC_Init+0xc4>)
 80021d4:	f004 f8b8 	bl	8006348 <HAL_ADC_ConfigChannel>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_ADC_Init+0xba>
  {
    Error_Handler();
 80021de:	f001 fc51 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20000248 	.word	0x20000248
 80021f0:	40012400 	.word	0x40012400
 80021f4:	18000040 	.word	0x18000040

080021f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b088      	sub	sp, #32
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 030c 	add.w	r3, r7, #12
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <HAL_ADC_MspInit+0x54>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d114      	bne.n	8002244 <HAL_ADC_MspInit+0x4c>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800221a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800221e:	f7ff ff59 	bl	80020d4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2001      	movs	r0, #1
 8002224:	f7ff ff3e 	bl	80020a4 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PA10     ------> ADC_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002228:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800222c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800222e:	2303      	movs	r3, #3
 8002230:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 030c 	add.w	r3, r7, #12
 800223a:	4619      	mov	r1, r3
 800223c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002240:	f004 fd3e 	bl	8006cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8002244:	bf00      	nop
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40012400 	.word	0x40012400

08002250 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a08      	ldr	r2, [pc, #32]	@ (8002280 <HAL_ADC_MspDeInit+0x30>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d109      	bne.n	8002276 <HAL_ADC_MspDeInit+0x26>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8002262:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002266:	f7ff ff4d 	bl	8002104 <LL_APB2_GRP1_DisableClock>

    /**ADC GPIO Configuration
    PA10     ------> ADC_IN6
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 800226a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800226e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002272:	f004 fe85 	bl	8006f80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8002276:	bf00      	nop
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40012400 	.word	0x40012400

08002284 <LL_AHB2_GRP1_EnableClock>:
{
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002290:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002292:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4313      	orrs	r3, r2
 800229a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800229c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80022a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4013      	ands	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022a8:	68fb      	ldr	r3, [r7, #12]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <LL_SYSCFG_EnableFastModePlus>:
  *         @arg @ref LL_SYSCFG_I2C_FASTMODEPLUS_I2C2
  *         @arg @ref LL_SYSCFG_I2C_FASTMODEPLUS_I2C3
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4904      	ldr	r1, [pc, #16]	@ (80022d4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40010000 	.word	0x40010000

080022d8 <MX_GPIO_Init>:
        * EXTI
     PB9   ------> I2C1_SDA
     PB8   ------> I2C1_SCL
*/
void MX_GPIO_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b086      	sub	sp, #24
 80022dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2200      	movs	r2, #0
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	605a      	str	r2, [r3, #4]
 80022e6:	609a      	str	r2, [r3, #8]
 80022e8:	60da      	str	r2, [r3, #12]
 80022ea:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ec:	2001      	movs	r0, #1
 80022ee:	f7ff ffc9 	bl	8002284 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	2004      	movs	r0, #4
 80022f4:	f7ff ffc6 	bl	8002284 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f8:	2002      	movs	r0, #2
 80022fa:	f7ff ffc3 	bl	8002284 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80022fe:	2200      	movs	r2, #0
 8002300:	2138      	movs	r1, #56	@ 0x38
 8002302:	481f      	ldr	r0, [pc, #124]	@ (8002380 <MX_GPIO_Init+0xa8>)
 8002304:	f004 ff21 	bl	800714a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SM_Power_GPIO_Port, SM_Power_Pin, GPIO_PIN_SET);
 8002308:	2201      	movs	r2, #1
 800230a:	2104      	movs	r1, #4
 800230c:	481d      	ldr	r0, [pc, #116]	@ (8002384 <MX_GPIO_Init+0xac>)
 800230e:	f004 ff1c 	bl	800714a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Onewire_GPIO_Port, Onewire_Pin, GPIO_PIN_RESET);
 8002312:	2200      	movs	r2, #0
 8002314:	2140      	movs	r1, #64	@ 0x40
 8002316:	481b      	ldr	r0, [pc, #108]	@ (8002384 <MX_GPIO_Init+0xac>)
 8002318:	f004 ff17 	bl	800714a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800231c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002320:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002322:	2312      	movs	r3, #18
 8002324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800232e:	2304      	movs	r3, #4
 8002330:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	4619      	mov	r1, r3
 8002336:	4813      	ldr	r0, [pc, #76]	@ (8002384 <MX_GPIO_Init+0xac>)
 8002338:	f004 fcc2 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 800233c:	2338      	movs	r3, #56	@ 0x38
 800233e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002340:	2301      	movs	r3, #1
 8002342:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002348:	2303      	movs	r3, #3
 800234a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	4619      	mov	r1, r3
 8002350:	480b      	ldr	r0, [pc, #44]	@ (8002380 <MX_GPIO_Init+0xa8>)
 8002352:	f004 fcb5 	bl	8006cc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SM_Power_Pin|Onewire_Pin;
 8002356:	2344      	movs	r3, #68	@ 0x44
 8002358:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235a:	2301      	movs	r3, #1
 800235c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002362:	2303      	movs	r3, #3
 8002364:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4806      	ldr	r0, [pc, #24]	@ (8002384 <MX_GPIO_Init+0xac>)
 800236c:	f004 fca8 	bl	8006cc0 <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 8002370:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8002374:	f7ff ff9e 	bl	80022b4 <LL_SYSCFG_EnableFastModePlus>

}
 8002378:	bf00      	nop
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	48000800 	.word	0x48000800
 8002384:	48000400 	.word	0x48000400

08002388 <LL_AHB2_GRP1_EnableClock>:
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002394:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4313      	orrs	r3, r2
 800239e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023ac:	68fb      	ldr	r3, [r7, #12]
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bc80      	pop	{r7}
 80023b6:	4770      	bx	lr

080023b8 <LL_APB1_GRP1_EnableClock>:
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023dc:	68fb      	ldr	r3, [r7, #12]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <LL_APB1_GRP1_DisableClock>:
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80023f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80023fe:	4013      	ands	r3, r2
 8002400:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002410:	4b1b      	ldr	r3, [pc, #108]	@ (8002480 <MX_I2C2_Init+0x74>)
 8002412:	4a1c      	ldr	r2, [pc, #112]	@ (8002484 <MX_I2C2_Init+0x78>)
 8002414:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10805D88;
 8002416:	4b1a      	ldr	r3, [pc, #104]	@ (8002480 <MX_I2C2_Init+0x74>)
 8002418:	4a1b      	ldr	r2, [pc, #108]	@ (8002488 <MX_I2C2_Init+0x7c>)
 800241a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800241c:	4b18      	ldr	r3, [pc, #96]	@ (8002480 <MX_I2C2_Init+0x74>)
 800241e:	2200      	movs	r2, #0
 8002420:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002422:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <MX_I2C2_Init+0x74>)
 8002424:	2201      	movs	r2, #1
 8002426:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002428:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <MX_I2C2_Init+0x74>)
 800242a:	2200      	movs	r2, #0
 800242c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <MX_I2C2_Init+0x74>)
 8002430:	2200      	movs	r2, #0
 8002432:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002434:	4b12      	ldr	r3, [pc, #72]	@ (8002480 <MX_I2C2_Init+0x74>)
 8002436:	2200      	movs	r2, #0
 8002438:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800243a:	4b11      	ldr	r3, [pc, #68]	@ (8002480 <MX_I2C2_Init+0x74>)
 800243c:	2200      	movs	r2, #0
 800243e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002440:	4b0f      	ldr	r3, [pc, #60]	@ (8002480 <MX_I2C2_Init+0x74>)
 8002442:	2200      	movs	r2, #0
 8002444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002446:	480e      	ldr	r0, [pc, #56]	@ (8002480 <MX_I2C2_Init+0x74>)
 8002448:	f004 feaf 	bl	80071aa <HAL_I2C_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002452:	f001 fb17 	bl	8003a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002456:	2100      	movs	r1, #0
 8002458:	4809      	ldr	r0, [pc, #36]	@ (8002480 <MX_I2C2_Init+0x74>)
 800245a:	f005 fe27 	bl	80080ac <HAL_I2CEx_ConfigAnalogFilter>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002464:	f001 fb0e 	bl	8003a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002468:	2100      	movs	r1, #0
 800246a:	4805      	ldr	r0, [pc, #20]	@ (8002480 <MX_I2C2_Init+0x74>)
 800246c:	f005 fe68 	bl	8008140 <HAL_I2CEx_ConfigDigitalFilter>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002476:	f001 fb05 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	200002ac 	.word	0x200002ac
 8002484:	40005800 	.word	0x40005800
 8002488:	10805d88 	.word	0x10805d88

0800248c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002490:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <MX_I2C3_Init+0x74>)
 8002492:	4a1c      	ldr	r2, [pc, #112]	@ (8002504 <MX_I2C3_Init+0x78>)
 8002494:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0090194B;
 8002496:	4b1a      	ldr	r3, [pc, #104]	@ (8002500 <MX_I2C3_Init+0x74>)
 8002498:	4a1b      	ldr	r2, [pc, #108]	@ (8002508 <MX_I2C3_Init+0x7c>)
 800249a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800249c:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <MX_I2C3_Init+0x74>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a2:	4b17      	ldr	r3, [pc, #92]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024a8:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80024ae:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80024b4:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024ba:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80024c6:	480e      	ldr	r0, [pc, #56]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024c8:	f004 fe6f 	bl	80071aa <HAL_I2C_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80024d2:	f001 fad7 	bl	8003a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80024d6:	2100      	movs	r1, #0
 80024d8:	4809      	ldr	r0, [pc, #36]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024da:	f005 fde7 	bl	80080ac <HAL_I2CEx_ConfigAnalogFilter>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80024e4:	f001 face 	bl	8003a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80024e8:	2100      	movs	r1, #0
 80024ea:	4805      	ldr	r0, [pc, #20]	@ (8002500 <MX_I2C3_Init+0x74>)
 80024ec:	f005 fe28 	bl	8008140 <HAL_I2CEx_ConfigDigitalFilter>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80024f6:	f001 fac5 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000300 	.word	0x20000300
 8002504:	40005c00 	.word	0x40005c00
 8002508:	0090194b 	.word	0x0090194b

0800250c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b096      	sub	sp, #88	@ 0x58
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	2238      	movs	r2, #56	@ 0x38
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f009 ff46 	bl	800c3be <memset>
  if(i2cHandle->Instance==I2C2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a2e      	ldr	r2, [pc, #184]	@ (80025f0 <HAL_I2C_MspInit+0xe4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d128      	bne.n	800258e <HAL_I2C_MspInit+0x82>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800253c:	2380      	movs	r3, #128	@ 0x80
 800253e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002540:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002546:	f107 030c 	add.w	r3, r7, #12
 800254a:	4618      	mov	r0, r3
 800254c:	f007 f882 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002556:	f001 fa95 	bl	8003a84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255a:	2001      	movs	r0, #1
 800255c:	f7ff ff14 	bl	8002388 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 8002560:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 8002564:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002566:	2312      	movs	r3, #18
 8002568:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	2300      	movs	r3, #0
 800256c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256e:	2300      	movs	r3, #0
 8002570:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002572:	2304      	movs	r3, #4
 8002574:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002576:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800257a:	4619      	mov	r1, r3
 800257c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002580:	f004 fb9e 	bl	8006cc0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002584:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002588:	f7ff ff16 	bl	80023b8 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800258c:	e02c      	b.n	80025e8 <HAL_I2C_MspInit+0xdc>
  else if(i2cHandle->Instance==I2C3)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a18      	ldr	r2, [pc, #96]	@ (80025f4 <HAL_I2C_MspInit+0xe8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d127      	bne.n	80025e8 <HAL_I2C_MspInit+0xdc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002598:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800259c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800259e:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80025a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025a4:	f107 030c 	add.w	r3, r7, #12
 80025a8:	4618      	mov	r0, r3
 80025aa:	f007 f853 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <HAL_I2C_MspInit+0xac>
      Error_Handler();
 80025b4:	f001 fa66 	bl	8003a84 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b8:	2002      	movs	r0, #2
 80025ba:	f7ff fee5 	bl	8002388 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_13;
 80025be:	f242 0310 	movw	r3, #8208	@ 0x2010
 80025c2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025c4:	2312      	movs	r3, #18
 80025c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80025d0:	2304      	movs	r3, #4
 80025d2:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80025d8:	4619      	mov	r1, r3
 80025da:	4807      	ldr	r0, [pc, #28]	@ (80025f8 <HAL_I2C_MspInit+0xec>)
 80025dc:	f004 fb70 	bl	8006cc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025e0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80025e4:	f7ff fee8 	bl	80023b8 <LL_APB1_GRP1_EnableClock>
}
 80025e8:	bf00      	nop
 80025ea:	3758      	adds	r7, #88	@ 0x58
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40005800 	.word	0x40005800
 80025f4:	40005c00 	.word	0x40005c00
 80025f8:	48000400 	.word	0x48000400

080025fc <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a14      	ldr	r2, [pc, #80]	@ (800265c <HAL_I2C_MspDeInit+0x60>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d110      	bne.n	8002630 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800260e:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002612:	f7ff fee9 	bl	80023e8 <LL_APB1_GRP1_DisableClock>

    /**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 8002616:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800261a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800261e:	f004 fcaf 	bl	8006f80 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8002622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002626:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800262a:	f004 fca9 	bl	8006f80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800262e:	e011      	b.n	8002654 <HAL_I2C_MspDeInit+0x58>
  else if(i2cHandle->Instance==I2C3)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a0a      	ldr	r2, [pc, #40]	@ (8002660 <HAL_I2C_MspDeInit+0x64>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d10c      	bne.n	8002654 <HAL_I2C_MspDeInit+0x58>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800263a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800263e:	f7ff fed3 	bl	80023e8 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8002642:	2110      	movs	r1, #16
 8002644:	4807      	ldr	r0, [pc, #28]	@ (8002664 <HAL_I2C_MspDeInit+0x68>)
 8002646:	f004 fc9b 	bl	8006f80 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 800264a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800264e:	4805      	ldr	r0, [pc, #20]	@ (8002664 <HAL_I2C_MspDeInit+0x68>)
 8002650:	f004 fc96 	bl	8006f80 <HAL_GPIO_DeInit>
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40005800 	.word	0x40005800
 8002660:	40005c00 	.word	0x40005c00
 8002664:	48000400 	.word	0x48000400

08002668 <LL_AHB2_GRP1_EnableClock>:
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002674:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002676:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4313      	orrs	r3, r2
 800267e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002684:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4013      	ands	r3, r2
 800268a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800268c:	68fb      	ldr	r3, [r7, #12]
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <LL_APB1_GRP1_EnableClock>:
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80026b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026bc:	68fb      	ldr	r3, [r7, #12]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <LL_APB1_GRP1_DisableClock>:
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80026d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	43db      	mvns	r3, r3
 80026da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026de:	4013      	ands	r3, r2
 80026e0:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <LL_APB2_GRP1_EnableClock>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80026f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80026f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4313      	orrs	r3, r2
 8002702:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002708:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4013      	ands	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002710:	68fb      	ldr	r3, [r7, #12]
}
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr

0800271c <LL_APB2_GRP1_DisableClock>:
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002728:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	43db      	mvns	r3, r3
 800272e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002732:	4013      	ands	r3, r2
 8002734:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b0a1      	sub	sp, #132	@ 0x84
 8002744:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002746:	f003 f8bb 	bl	80058c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800274a:	f000 f8ef 	bl	800292c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274e:	463b      	mov	r3, r7
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]

  // Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800275c:	2001      	movs	r0, #1
 800275e:	f7ff ff83 	bl	8002668 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002762:	2002      	movs	r0, #2
 8002764:	f7ff ff80 	bl	8002668 <LL_AHB2_GRP1_EnableClock>

  // DEBUG_SUBGHZSPI_{NSSOUT, SCKOUT, MSIOOUT, MOSIOUT} pins
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 8002768:	23f0      	movs	r3, #240	@ 0xf0
 800276a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002774:	2303      	movs	r3, #3
 8002776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_SUBGHZSPI;
 8002778:	230d      	movs	r3, #13
 800277a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277c:	463b      	mov	r3, r7
 800277e:	4619      	mov	r1, r3
 8002780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002784:	f004 fa9c 	bl	8006cc0 <HAL_GPIO_Init>

  // DEBUG_RF_{HSE32RDY, NRESET} pins
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8002788:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800278c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 800278e:	230d      	movs	r3, #13
 8002790:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002792:	463b      	mov	r3, r7
 8002794:	4619      	mov	r1, r3
 8002796:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800279a:	f004 fa91 	bl	8006cc0 <HAL_GPIO_Init>

  // DEBUG_RF_{SMPSRDY, LDORDY} pins
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4;
 800279e:	2314      	movs	r3, #20
 80027a0:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a2:	463b      	mov	r3, r7
 80027a4:	4619      	mov	r1, r3
 80027a6:	4853      	ldr	r0, [pc, #332]	@ (80028f4 <main+0x1b4>)
 80027a8:	f004 fa8a 	bl	8006cc0 <HAL_GPIO_Init>

  // RF_BUSY pin
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_BUSY;
 80027b2:	2306      	movs	r3, #6
 80027b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b6:	463b      	mov	r3, r7
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027be:	f004 fa7f 	bl	8006cc0 <HAL_GPIO_Init>

  // RF_{IRQ0, IRQ1, IRQ2} pins
  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8;
 80027c2:	f44f 7394 	mov.w	r3, #296	@ 0x128
 80027c6:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c8:	463b      	mov	r3, r7
 80027ca:	4619      	mov	r1, r3
 80027cc:	4849      	ldr	r0, [pc, #292]	@ (80028f4 <main+0x1b4>)
 80027ce:	f004 fa77 	bl	8006cc0 <HAL_GPIO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027d2:	f7ff fd81 	bl	80022d8 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 80027d6:	f001 fcf5 	bl	80041c4 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 80027da:	f001 fe97 	bl	800450c <MX_USART2_UART_Init>
  MX_ADC_Init();
 80027de:	f7ff fca3 	bl	8002128 <MX_ADC_Init>
  MX_TIM2_Init();
 80027e2:	f001 fdf3 	bl	80043cc <MX_TIM2_Init>
  MX_I2C3_Init();
 80027e6:	f7ff fe51 	bl	800248c <MX_I2C3_Init>
  MX_I2C2_Init();
 80027ea:	f7ff fe0f 	bl	800240c <MX_I2C2_Init>
  MX_RTC_Init();
 80027ee:	f001 f977 	bl	8003ae0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Clear(); // clear screen of old info before operation
 80027f2:	f001 fbf2 	bl	8003fda <SSD1306_Clear>

  HAL_TIM_Base_Start(&htim2); // start timer used for us delays
 80027f6:	4840      	ldr	r0, [pc, #256]	@ (80028f8 <main+0x1b8>)
 80027f8:	f007 ff4c 	bl	800a694 <HAL_TIM_Base_Start>

  if(BMEenable) BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 80027fc:	2304      	movs	r3, #4
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	2300      	movs	r3, #0
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	2303      	movs	r3, #3
 8002806:	2201      	movs	r2, #1
 8002808:	2105      	movs	r1, #5
 800280a:	2002      	movs	r0, #2
 800280c:	f7fe fefc 	bl	8001608 <BME280_Config>

  // Calibrate The ADC On Power-Up For Better Accuracy
  HAL_GPIO_WritePin(GPIOB, SM_Power_Pin, GPIO_PIN_SET);
 8002810:	2201      	movs	r2, #1
 8002812:	2104      	movs	r1, #4
 8002814:	4837      	ldr	r0, [pc, #220]	@ (80028f4 <main+0x1b4>)
 8002816:	f004 fc98 	bl	800714a <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800281a:	2064      	movs	r0, #100	@ 0x64
 800281c:	f003 f8c6 	bl	80059ac <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc);
 8002820:	4836      	ldr	r0, [pc, #216]	@ (80028fc <main+0x1bc>)
 8002822:	f004 f874 	bl	800690e <HAL_ADCEx_Calibration_Start>
  HAL_GPIO_WritePin(GPIOB, SM_Power_Pin, GPIO_PIN_RESET);
 8002826:	2200      	movs	r2, #0
 8002828:	2104      	movs	r1, #4
 800282a:	4832      	ldr	r0, [pc, #200]	@ (80028f4 <main+0x1b4>)
 800282c:	f004 fc8d 	bl	800714a <HAL_GPIO_WritePin>

  SSD1306_Init (); // initialise the display TODO : for debugging only
 8002830:	f001 f9b2 	bl	8003b98 <SSD1306_Init>
  soilMOISTUREinit();
 8002834:	f000 fc84 	bl	8003140 <soilMOISTUREinit>
  //BSP_LED_Init(LED_RED);
  //BSP_LED_Init(LED_BLUE);
  //BSP_LED_Init(LED_GREEN);

	/* Check and handle if the system was resumed from StandBy mode */
	if(__HAL_PWR_GET_FLAG(PWR_FLAG_SB) == RESET)
 8002838:	4b31      	ldr	r3, [pc, #196]	@ (8002900 <main+0x1c0>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800283e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <main+0x10c>
	{
	  MX_RTC_Init();
 8002846:	f001 f94b 	bl	8003ae0 <MX_RTC_Init>
 800284a:	e009      	b.n	8002860 <main+0x120>
	}
	else
	{
	  /* Clear Standby flag */
	  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 800284c:	4b2c      	ldr	r3, [pc, #176]	@ (8002900 <main+0x1c0>)
 800284e:	2201      	movs	r2, #1
 8002850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

	  /* Enable access to RTC domain for following wake-up source configuration */
	  HAL_PWR_EnableBkUpAccess();
 8002854:	f005 fcc0 	bl	80081d8 <HAL_PWR_EnableBkUpAccess>
	  __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002858:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800285c:	f7ff ff1c 	bl	8002698 <LL_APB1_GRP1_EnableClock>
	}

  DBGMCU->CR &= ~(DBGMCU_CR_DBG_SLEEP | DBGMCU_CR_DBG_STOP | DBGMCU_CR_DBG_STANDBY);
 8002860:	4b28      	ldr	r3, [pc, #160]	@ (8002904 <main+0x1c4>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a27      	ldr	r2, [pc, #156]	@ (8002904 <main+0x1c4>)
 8002866:	f023 0307 	bic.w	r3, r3, #7
 800286a:	6053      	str	r3, [r2, #4]

  //strcpy(uartBuff, "\nAngus is doing his best\n---------------\r\n");
  //HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
//  sprintf(uartBuff, "LORA_MODULATION\r\nLORA_BW=%d Hz\r\nLORA_SF=%d\r\n", (1 << LORA_BANDWIDTH) * 125, LORA_SPREADING_FACTOR);
//  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
  radioInit();
 800286c:	f000 fe3e 	bl	80034ec <radioInit>

  getUniqueID(uniqueID);
 8002870:	4825      	ldr	r0, [pc, #148]	@ (8002908 <main+0x1c8>)
 8002872:	f000 fa8d 	bl	8002d90 <getUniqueID>
  transmitData((uint8_t *)uniqueID);
 8002876:	4824      	ldr	r0, [pc, #144]	@ (8002908 <main+0x1c8>)
 8002878:	f000 fda8 	bl	80033cc <transmitData>

  printFlowerArt();
 800287c:	f000 fa70 	bl	8002d60 <printFlowerArt>
  LEDstartup();
 8002880:	f000 fe10 	bl	80034a4 <LEDstartup>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //take measurements
	  if (BMEenable){
		  BME280_WakeUP();
 8002884:	f7fe ffe6 	bl	8001854 <BME280_WakeUP>
		  BME280_Measure();
 8002888:	f7ff fb80 	bl	8001f8c <BME280_Measure>
	  }

	  SM = soilMOISTURE();
 800288c:	f000 fca2 	bl	80031d4 <soilMOISTURE>
 8002890:	4603      	mov	r3, r0
 8002892:	4a1e      	ldr	r2, [pc, #120]	@ (800290c <main+0x1cc>)
 8002894:	6013      	str	r3, [r2, #0]
	  ST = soilTEMP();
 8002896:	f000 fb27 	bl	8002ee8 <soilTEMP>
 800289a:	4603      	mov	r3, r0
 800289c:	4a1c      	ldr	r2, [pc, #112]	@ (8002910 <main+0x1d0>)
 800289e:	6013      	str	r3, [r2, #0]
	  if (OLEDenable) printOLED(SM, ST, Temperature, Pressure, Humidity);//TODO: for debugging
 80028a0:	4b1a      	ldr	r3, [pc, #104]	@ (800290c <main+0x1cc>)
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002910 <main+0x1d0>)
 80028a6:	6819      	ldr	r1, [r3, #0]
 80028a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <main+0x1d4>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002918 <main+0x1d8>)
 80028ae:	681c      	ldr	r4, [r3, #0]
 80028b0:	4b1a      	ldr	r3, [pc, #104]	@ (800291c <main+0x1dc>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4623      	mov	r3, r4
 80028b8:	f000 fcba 	bl	8003230 <printOLED>

	  //TODO: put data into formatted string txData
	  formatSensorData(txData);
 80028bc:	4818      	ldr	r0, [pc, #96]	@ (8002920 <main+0x1e0>)
 80028be:	f000 fa85 	bl	8002dcc <formatSensorData>

	  //HAL_Delay(5000);

	  //Transmit Data
	  BSP_LED_On(LED_RED);
 80028c2:	2002      	movs	r0, #2
 80028c4:	f001 fef6 	bl	80046b4 <BSP_LED_On>
	  transmitData((uint8_t *)txData);
 80028c8:	4815      	ldr	r0, [pc, #84]	@ (8002920 <main+0x1e0>)
 80028ca:	f000 fd7f 	bl	80033cc <transmitData>

	  __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);  // Disable UART RX interrupt
 80028ce:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <main+0x1e4>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b13      	ldr	r3, [pc, #76]	@ (8002924 <main+0x1e4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0220 	bic.w	r2, r2, #32
 80028dc:	601a      	str	r2, [r3, #0]

//	  HAL_Delay(100);
		// Wait for LoRa transmission to complete before entering Stop 2 mode
	  waitForLoRaTxComplete();
 80028de:	f000 fd63 	bl	80033a8 <waitForLoRaTxComplete>
	  BSP_LED_Off(LED_RED);
 80028e2:	2002      	movs	r0, #2
 80028e4:	f001 ff00 	bl	80046e8 <BSP_LED_Off>
	  sleep(halfMinutes);
 80028e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002928 <main+0x1e8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 f873 	bl	80029d8 <sleep>
  {
 80028f2:	e7c7      	b.n	8002884 <main+0x144>
 80028f4:	48000400 	.word	0x48000400
 80028f8:	20000a30 	.word	0x20000a30
 80028fc:	20000248 	.word	0x20000248
 8002900:	58000400 	.word	0x58000400
 8002904:	e0042000 	.word	0xe0042000
 8002908:	200003c0 	.word	0x200003c0
 800290c:	20000394 	.word	0x20000394
 8002910:	200003a0 	.word	0x200003a0
 8002914:	20000388 	.word	0x20000388
 8002918:	2000038c 	.word	0x2000038c
 800291c:	20000390 	.word	0x20000390
 8002920:	200003dc 	.word	0x200003dc
 8002924:	20000a7c 	.word	0x20000a7c
 8002928:	20000010 	.word	0x20000010

0800292c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b09a      	sub	sp, #104	@ 0x68
 8002930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002932:	f107 0320 	add.w	r3, r7, #32
 8002936:	2248      	movs	r2, #72	@ 0x48
 8002938:	2100      	movs	r1, #0
 800293a:	4618      	mov	r0, r3
 800293c:	f009 fd3f 	bl	800c3be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002940:	1d3b      	adds	r3, r7, #4
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	605a      	str	r2, [r3, #4]
 8002948:	609a      	str	r2, [r3, #8]
 800294a:	60da      	str	r2, [r3, #12]
 800294c:	611a      	str	r2, [r3, #16]
 800294e:	615a      	str	r2, [r3, #20]
 8002950:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <SystemClock_Config+0xa8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800295a:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <SystemClock_Config+0xa8>)
 800295c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b1c      	ldr	r3, [pc, #112]	@ (80029d4 <SystemClock_Config+0xa8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800296e:	2328      	movs	r3, #40	@ 0x28
 8002970:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002972:	2301      	movs	r3, #1
 8002974:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002976:	2300      	movs	r3, #0
 8002978:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800297a:	23b0      	movs	r3, #176	@ 0xb0
 800297c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800297e:	2300      	movs	r3, #0
 8002980:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002982:	2301      	movs	r3, #1
 8002984:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002986:	2300      	movs	r3, #0
 8002988:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800298a:	f107 0320 	add.w	r3, r7, #32
 800298e:	4618      	mov	r0, r3
 8002990:	f005 ff1e 	bl	80087d0 <HAL_RCC_OscConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800299a:	f001 f873 	bl	8003a84 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800299e:	234f      	movs	r3, #79	@ 0x4f
 80029a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80029b6:	1d3b      	adds	r3, r7, #4
 80029b8:	2102      	movs	r1, #2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f006 fa8a 	bl	8008ed4 <HAL_RCC_ClockConfig>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80029c6:	f001 f85d 	bl	8003a84 <Error_Handler>
  }
}
 80029ca:	bf00      	nop
 80029cc:	3768      	adds	r7, #104	@ 0x68
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	58000400 	.word	0x58000400

080029d8 <sleep>:

/* USER CODE BEGIN 4 */
void sleep(long int hMinutes)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	/* Deactivate RTC wake-up timer */
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80029e0:	4838      	ldr	r0, [pc, #224]	@ (8002ac4 <sleep+0xec>)
 80029e2:	f007 f8f1 	bl	8009bc8 <HAL_RTCEx_DeactivateWakeUpTimer>

	/* Clear all related wakeup flags */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80029e6:	4b38      	ldr	r3, [pc, #224]	@ (8002ac8 <sleep+0xf0>)
 80029e8:	2207      	movs	r2, #7
 80029ea:	619a      	str	r2, [r3, #24]

	/* Re-enable wakeup source: configure the Wakeup timer */
	// if you do this too fast then things get garbled
	HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0xEA60, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0);
 80029ec:	2300      	movs	r3, #0
 80029ee:	2200      	movs	r2, #0
 80029f0:	f64e 2160 	movw	r1, #60000	@ 0xea60
 80029f4:	4833      	ldr	r0, [pc, #204]	@ (8002ac4 <sleep+0xec>)
 80029f6:	f007 f861 	bl	8009abc <HAL_RTCEx_SetWakeUpTimer_IT>
	BSP_LED_On(LED_GREEN);
 80029fa:	2001      	movs	r0, #1
 80029fc:	f001 fe5a 	bl	80046b4 <BSP_LED_On>

	// Disable peripherals before sleep
	HAL_ADC_DeInit(&hadc);
 8002a00:	4832      	ldr	r0, [pc, #200]	@ (8002acc <sleep+0xf4>)
 8002a02:	f003 fb2b 	bl	800605c <HAL_ADC_DeInit>
	HAL_UART_DeInit(&huart2);
 8002a06:	4832      	ldr	r0, [pc, #200]	@ (8002ad0 <sleep+0xf8>)
 8002a08:	f008 f91b 	bl	800ac42 <HAL_UART_DeInit>
	HAL_I2C_DeInit(&hi2c2);
 8002a0c:	4831      	ldr	r0, [pc, #196]	@ (8002ad4 <sleep+0xfc>)
 8002a0e:	f004 fc5b 	bl	80072c8 <HAL_I2C_DeInit>
	HAL_I2C_DeInit(&hi2c3);
 8002a12:	4831      	ldr	r0, [pc, #196]	@ (8002ad8 <sleep+0x100>)
 8002a14:	f004 fc58 	bl	80072c8 <HAL_I2C_DeInit>

	// Disable unnecessary clocks before entering sleep mode
	    __HAL_RCC_USART2_CLK_DISABLE();
 8002a18:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002a1c:	f7ff fe54 	bl	80026c8 <LL_APB1_GRP1_DisableClock>
	    __HAL_RCC_ADC_CLK_DISABLE();
 8002a20:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002a24:	f7ff fe7a 	bl	800271c <LL_APB2_GRP1_DisableClock>
	    __HAL_RCC_I2C2_CLK_DISABLE();
 8002a28:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002a2c:	f7ff fe4c 	bl	80026c8 <LL_APB1_GRP1_DisableClock>
	    __HAL_RCC_I2C3_CLK_DISABLE();
 8002a30:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002a34:	f7ff fe48 	bl	80026c8 <LL_APB1_GRP1_DisableClock>
	    __HAL_RCC_TIM2_CLK_DISABLE();
 8002a38:	2001      	movs	r0, #1
 8002a3a:	f7ff fe45 	bl	80026c8 <LL_APB1_GRP1_DisableClock>


	/* Enter Stop 2 Mode */
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f005 fbe4 	bl	800820c <HAL_PWREx_EnterSTOP2Mode>
	// code will resume from here
	// Increment wake-up count and check if 1 minute (2 wake-ups) is reached
	    wakeUpCount++;
 8002a44:	4b25      	ldr	r3, [pc, #148]	@ (8002adc <sleep+0x104>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	4a24      	ldr	r2, [pc, #144]	@ (8002adc <sleep+0x104>)
 8002a4c:	6013      	str	r3, [r2, #0]

	    // If we have woken up twice (for a total of 60 seconds), reset count
	    if (wakeUpCount >= hMinutes)
 8002a4e:	4b23      	ldr	r3, [pc, #140]	@ (8002adc <sleep+0x104>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	dc03      	bgt.n	8002a60 <sleep+0x88>
	    {
	        wakeUpCount = 0;  // Reset counter
 8002a58:	4b20      	ldr	r3, [pc, #128]	@ (8002adc <sleep+0x104>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e002      	b.n	8002a66 <sleep+0x8e>
	        // Reinitialize clock and peripherals
	    }
	    else
	    {
	        // Enter Stop 2 Mode again for duration of period
	        sleep(hMinutes);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7ff ffb9 	bl	80029d8 <sleep>
	    }


	    // Upon waking up, re-enable the clocks
		SystemClock_Config();
 8002a66:	f7ff ff61 	bl	800292c <SystemClock_Config>
		__HAL_RCC_USART2_CLK_ENABLE();
 8002a6a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002a6e:	f7ff fe13 	bl	8002698 <LL_APB1_GRP1_EnableClock>
		__HAL_RCC_ADC_CLK_ENABLE();
 8002a72:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002a76:	f7ff fe39 	bl	80026ec <LL_APB2_GRP1_EnableClock>
		__HAL_RCC_I2C2_CLK_ENABLE();
 8002a7a:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8002a7e:	f7ff fe0b 	bl	8002698 <LL_APB1_GRP1_EnableClock>
		__HAL_RCC_I2C3_CLK_ENABLE();
 8002a82:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002a86:	f7ff fe07 	bl	8002698 <LL_APB1_GRP1_EnableClock>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f7ff fe04 	bl	8002698 <LL_APB1_GRP1_EnableClock>

	BSP_LED_Off(LED_GREEN);
 8002a90:	2001      	movs	r0, #1
 8002a92:	f001 fe29 	bl	80046e8 <BSP_LED_Off>



	//reinit some things
	SystemClock_Config();
 8002a96:	f7ff ff49 	bl	800292c <SystemClock_Config>
	MX_TIM2_Init();
 8002a9a:	f001 fc97 	bl	80043cc <MX_TIM2_Init>
	HAL_TIM_Base_Start(&htim2); // Restart the timer if it is used for delays
 8002a9e:	4810      	ldr	r0, [pc, #64]	@ (8002ae0 <sleep+0x108>)
 8002aa0:	f007 fdf8 	bl	800a694 <HAL_TIM_Base_Start>

	MX_USART2_UART_Init();
 8002aa4:	f001 fd32 	bl	800450c <MX_USART2_UART_Init>
	MX_I2C2_Init();
 8002aa8:	f7ff fcb0 	bl	800240c <MX_I2C2_Init>
	MX_I2C3_Init();
 8002aac:	f7ff fcee 	bl	800248c <MX_I2C3_Init>
	MX_ADC_Init();
 8002ab0:	f7ff fb3a 	bl	8002128 <MX_ADC_Init>

	MX_SUBGHZ_Init();
 8002ab4:	f001 fb86 	bl	80041c4 <MX_SUBGHZ_Init>
	radioInit(); // Custom radio initialization function
 8002ab8:	f000 fd18 	bl	80034ec <radioInit>


}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	200005e0 	.word	0x200005e0
 8002ac8:	58000400 	.word	0x58000400
 8002acc:	20000248 	.word	0x20000248
 8002ad0:	20000a7c 	.word	0x20000a7c
 8002ad4:	200002ac 	.word	0x200002ac
 8002ad8:	20000300 	.word	0x20000300
 8002adc:	200005dc 	.word	0x200005dc
 8002ae0:	20000a30 	.word	0x20000a30

08002ae4 <handleRxTimeout>:

void handleRxTimeout(void)
{
 8002ae4:	b590      	push	{r4, r7, lr}
 8002ae6:	b08f      	sub	sp, #60	@ 0x3c
 8002ae8:	af00      	add	r7, sp, #0
    char uartBuff[50];
    // Apply workaround to reset certain timing registers after RX timeout
    SUBGRF_WriteRegister(0x0920, 0x00);
 8002aea:	2100      	movs	r1, #0
 8002aec:	f44f 6012 	mov.w	r0, #2336	@ 0x920
 8002af0:	f002 fcf6 	bl	80054e0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8002af4:	f640 1044 	movw	r0, #2372	@ 0x944
 8002af8:	f002 fd06 	bl	8005508 <SUBGRF_ReadRegister>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	4619      	mov	r1, r3
 8002b06:	f640 1044 	movw	r0, #2372	@ 0x944
 8002b0a:	f002 fce9 	bl	80054e0 <SUBGRF_WriteRegister>

    strcpy(uartBuff, "RX Timeout!\r\n");
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	4a0e      	ldr	r2, [pc, #56]	@ (8002b4c <handleRxTimeout+0x68>)
 8002b12:	461c      	mov	r4, r3
 8002b14:	4613      	mov	r3, r2
 8002b16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b18:	c407      	stmia	r4!, {r0, r1, r2}
 8002b1a:	8023      	strh	r3, [r4, #0]
    HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fb7e 	bl	8000220 <strlen>
 8002b24:	4603      	mov	r3, r0
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	1d39      	adds	r1, r7, #4
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	4808      	ldr	r0, [pc, #32]	@ (8002b50 <handleRxTimeout+0x6c>)
 8002b30:	f008 f8c6 	bl	800acc0 <HAL_UART_Transmit>

    // Clear interrupt status
    SUBGRF_ClearIrqStatus(IRQ_RX_TX_TIMEOUT);
 8002b34:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002b38:	f002 fcba 	bl	80054b0 <SUBGRF_ClearIrqStatus>

    // Re-set RX mode explicitly after timeout handling
    SUBGRF_SetRx(3000 << 6); // Ensure radio is back in RX mode
 8002b3c:	4805      	ldr	r0, [pc, #20]	@ (8002b54 <handleRxTimeout+0x70>)
 8002b3e:	f002 f823 	bl	8004b88 <SUBGRF_SetRx>
}
 8002b42:	bf00      	nop
 8002b44:	373c      	adds	r7, #60	@ 0x3c
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	0800e588 	.word	0x0800e588
 8002b50:	20000a7c 	.word	0x20000a7c
 8002b54:	0002ee00 	.word	0x0002ee00

08002b58 <handleRxError>:

void handleRxError(void)
{
 8002b58:	b5b0      	push	{r4, r5, r7, lr}
 8002b5a:	b08e      	sub	sp, #56	@ 0x38
 8002b5c:	af00      	add	r7, sp, #0
    char uartBuff[50];
    // Apply workaround to reset certain timing registers after CRC error
    SUBGRF_WriteRegister(0x0920, 0x00);
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f44f 6012 	mov.w	r0, #2336	@ 0x920
 8002b64:	f002 fcbc 	bl	80054e0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8002b68:	f640 1044 	movw	r0, #2372	@ 0x944
 8002b6c:	f002 fccc 	bl	8005508 <SUBGRF_ReadRegister>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f640 1044 	movw	r0, #2372	@ 0x944
 8002b7e:	f002 fcaf 	bl	80054e0 <SUBGRF_WriteRegister>

    strcpy(uartBuff, "RX Error: CRC Error Detected!\r\n");
 8002b82:	1d3b      	adds	r3, r7, #4
 8002b84:	4a0f      	ldr	r2, [pc, #60]	@ (8002bc4 <handleRxError+0x6c>)
 8002b86:	461c      	mov	r4, r3
 8002b88:	4615      	mov	r5, r2
 8002b8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002b92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8002b96:	1d3b      	adds	r3, r7, #4
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fb41 	bl	8000220 <strlen>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	1d39      	adds	r1, r7, #4
 8002ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ba8:	4807      	ldr	r0, [pc, #28]	@ (8002bc8 <handleRxError+0x70>)
 8002baa:	f008 f889 	bl	800acc0 <HAL_UART_Transmit>

    // Clear interrupt status
    SUBGRF_ClearIrqStatus(IRQ_CRC_ERROR);
 8002bae:	2040      	movs	r0, #64	@ 0x40
 8002bb0:	f002 fc7e 	bl	80054b0 <SUBGRF_ClearIrqStatus>

    // Re-set RX mode explicitly after error handling
    SUBGRF_SetRx(3000 << 6); // Ensure radio is back in RX mode
 8002bb4:	4805      	ldr	r0, [pc, #20]	@ (8002bcc <handleRxError+0x74>)
 8002bb6:	f001 ffe7 	bl	8004b88 <SUBGRF_SetRx>
}
 8002bba:	bf00      	nop
 8002bbc:	3738      	adds	r7, #56	@ 0x38
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	0800e598 	.word	0x0800e598
 8002bc8:	20000a7c 	.word	0x20000a7c
 8002bcc:	0002ee00 	.word	0x0002ee00

08002bd0 <handleRxDone>:


void handleRxDone(bool reset)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b0a9      	sub	sp, #164	@ 0xa4
 8002bd4:	af04      	add	r7, sp, #16
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
    char uartBuff[100];
//    uint8_t rxBuffer[256] = {0};  // Buffer to hold received data
    uint8_t rxSize = 0;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	77fb      	strb	r3, [r7, #31]
    PacketStatus_t packetStatus;

    // Apply workaround to reset certain timing registers after RX
    SUBGRF_WriteRegister(0x0920, 0x00); // Specific workaround for RX timing sequence
 8002bde:	2100      	movs	r1, #0
 8002be0:	f44f 6012 	mov.w	r0, #2336	@ 0x920
 8002be4:	f002 fc7c 	bl	80054e0 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02)); // Another timing-related workaround
 8002be8:	f640 1044 	movw	r0, #2372	@ 0x944
 8002bec:	f002 fc8c 	bl	8005508 <SUBGRF_ReadRegister>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f043 0302 	orr.w	r3, r3, #2
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	f640 1044 	movw	r0, #2372	@ 0x944
 8002bfe:	f002 fc6f 	bl	80054e0 <SUBGRF_WriteRegister>

    // Retrieve the payload from the radio buffer
    SUBGRF_GetPayload((uint8_t *)rxBuffer, &rxSize, 0xFF);
 8002c02:	f107 031f 	add.w	r3, r7, #31
 8002c06:	22ff      	movs	r2, #255	@ 0xff
 8002c08:	4619      	mov	r1, r3
 8002c0a:	484d      	ldr	r0, [pc, #308]	@ (8002d40 <handleRxDone+0x170>)
 8002c0c:	f001 ff0a 	bl	8004a24 <SUBGRF_GetPayload>

    // Debug: Print the actual size of the received data
    snprintf(uartBuff, sizeof(uartBuff), "Payload Length: %d\r\n", rxSize);
 8002c10:	7ffb      	ldrb	r3, [r7, #31]
 8002c12:	f107 0020 	add.w	r0, r7, #32
 8002c16:	4a4b      	ldr	r2, [pc, #300]	@ (8002d44 <handleRxDone+0x174>)
 8002c18:	2164      	movs	r1, #100	@ 0x64
 8002c1a:	f009 fb39 	bl	800c290 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8002c1e:	f107 0320 	add.w	r3, r7, #32
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fafc 	bl	8000220 <strlen>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	f107 0120 	add.w	r1, r7, #32
 8002c30:	f04f 33ff 	mov.w	r3, #4294967295
 8002c34:	4844      	ldr	r0, [pc, #272]	@ (8002d48 <handleRxDone+0x178>)
 8002c36:	f008 f843 	bl	800acc0 <HAL_UART_Transmit>

    // Get the packet status
    SUBGRF_GetPacketStatus(&packetStatus);
 8002c3a:	f107 0308 	add.w	r3, r7, #8
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 fbe4 	bl	800540c <SUBGRF_GetPacketStatus>

    // Print the RSSI and SNR values
    // Display RSSI, SNR, and frequency error values
       sprintf(uartBuff, "Received Data: %s  \r\nRSSI=%d dBm \r\nSignal RSSI=%d dBm \r\nSNR=%d dB \r\nFreq Error=%lu Hz\r\n",
               rxBuffer,
       		   packetStatus.Params.LoRa.RssiPkt,
 8002c44:	f997 3014 	ldrsb.w	r3, [r7, #20]
       sprintf(uartBuff, "Received Data: %s  \r\nRSSI=%d dBm \r\nSignal RSSI=%d dBm \r\nSNR=%d dB \r\nFreq Error=%lu Hz\r\n",
 8002c48:	461c      	mov	r4, r3
               packetStatus.Params.LoRa.SignalRssiPkt,
 8002c4a:	f997 3016 	ldrsb.w	r3, [r7, #22]
       sprintf(uartBuff, "Received Data: %s  \r\nRSSI=%d dBm \r\nSignal RSSI=%d dBm \r\nSNR=%d dB \r\nFreq Error=%lu Hz\r\n",
 8002c4e:	461a      	mov	r2, r3
               packetStatus.Params.LoRa.SnrPkt,
 8002c50:	f997 3015 	ldrsb.w	r3, [r7, #21]
       sprintf(uartBuff, "Received Data: %s  \r\nRSSI=%d dBm \r\nSignal RSSI=%d dBm \r\nSNR=%d dB \r\nFreq Error=%lu Hz\r\n",
 8002c54:	4619      	mov	r1, r3
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f107 0020 	add.w	r0, r7, #32
 8002c5c:	9302      	str	r3, [sp, #8]
 8002c5e:	9101      	str	r1, [sp, #4]
 8002c60:	9200      	str	r2, [sp, #0]
 8002c62:	4623      	mov	r3, r4
 8002c64:	4a36      	ldr	r2, [pc, #216]	@ (8002d40 <handleRxDone+0x170>)
 8002c66:	4939      	ldr	r1, [pc, #228]	@ (8002d4c <handleRxDone+0x17c>)
 8002c68:	f009 fb46 	bl	800c2f8 <siprintf>
               packetStatus.Params.LoRa.FreqError);
       HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8002c6c:	f107 0320 	add.w	r3, r7, #32
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fad5 	bl	8000220 <strlen>
 8002c76:	4603      	mov	r3, r0
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	f107 0120 	add.w	r1, r7, #32
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c82:	4831      	ldr	r0, [pc, #196]	@ (8002d48 <handleRxDone+0x178>)
 8002c84:	f008 f81c 	bl	800acc0 <HAL_UART_Transmit>


    // Debugging read directly from buffer registers
    for (int i = 0; i < rxSize; i++)
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002c8e:	e00d      	b.n	8002cac <handleRxDone+0xdc>
    {
        uint8_t byteRead = SUBGRF_ReadRegister(0x00 + i); // Assuming buffer starts at 0x00
 8002c90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 fc36 	bl	8005508 <SUBGRF_ReadRegister>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    for (int i = 0; i < rxSize; i++)
 8002ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002cac:	7ffb      	ldrb	r3, [r7, #31]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	dbeb      	blt.n	8002c90 <handleRxDone+0xc0>
        //snprintf(uartBuff, sizeof(uartBuff), "Byte %d: %02X\r\n", i, byteRead);
        //HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
    }

    // Print the received data in hexadecimal format for better diagnostics
    HAL_UART_Transmit(&huart2, (uint8_t *)"Data: ", 6, HAL_MAX_DELAY);
 8002cb8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cbc:	2206      	movs	r2, #6
 8002cbe:	4924      	ldr	r1, [pc, #144]	@ (8002d50 <handleRxDone+0x180>)
 8002cc0:	4821      	ldr	r0, [pc, #132]	@ (8002d48 <handleRxDone+0x178>)
 8002cc2:	f007 fffd 	bl	800acc0 <HAL_UART_Transmit>
    for (int i = 0; i < rxSize; i++)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002ccc:	e01d      	b.n	8002d0a <handleRxDone+0x13a>
    {
        snprintf(uartBuff, sizeof(uartBuff), "%02X ", rxBuffer[i]);
 8002cce:	4a1c      	ldr	r2, [pc, #112]	@ (8002d40 <handleRxDone+0x170>)
 8002cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002cd4:	4413      	add	r3, r2
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	f107 0020 	add.w	r0, r7, #32
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d54 <handleRxDone+0x184>)
 8002cde:	2164      	movs	r1, #100	@ 0x64
 8002ce0:	f009 fad6 	bl	800c290 <sniprintf>
        HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8002ce4:	f107 0320 	add.w	r3, r7, #32
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fa99 	bl	8000220 <strlen>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	f107 0120 	add.w	r1, r7, #32
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	4813      	ldr	r0, [pc, #76]	@ (8002d48 <handleRxDone+0x178>)
 8002cfc:	f007 ffe0 	bl	800acc0 <HAL_UART_Transmit>
    for (int i = 0; i < rxSize; i++)
 8002d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d04:	3301      	adds	r3, #1
 8002d06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d0a:	7ffb      	ldrb	r3, [r7, #31]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002d12:	4293      	cmp	r3, r2
 8002d14:	dbdb      	blt.n	8002cce <handleRxDone+0xfe>
    }
    HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	490e      	ldr	r1, [pc, #56]	@ (8002d58 <handleRxDone+0x188>)
 8002d1e:	480a      	ldr	r0, [pc, #40]	@ (8002d48 <handleRxDone+0x178>)
 8002d20:	f007 ffce 	bl	800acc0 <HAL_UART_Transmit>

    // Clear interrupt status and re-enable interrupts
    SUBGRF_ClearIrqStatus(IRQ_RX_DONE);
 8002d24:	2002      	movs	r0, #2
 8002d26:	f002 fbc3 	bl	80054b0 <SUBGRF_ClearIrqStatus>

    if(reset){
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <handleRxDone+0x166>
    	// Re-set RX mode explicitly after each handling
    	SUBGRF_SetRx(3000 << 6); // Ensure radio is back in RX mode
 8002d30:	480a      	ldr	r0, [pc, #40]	@ (8002d5c <handleRxDone+0x18c>)
 8002d32:	f001 ff29 	bl	8004b88 <SUBGRF_SetRx>
    }

}
 8002d36:	bf00      	nop
 8002d38:	3794      	adds	r7, #148	@ 0x94
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd90      	pop	{r4, r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	200004dc 	.word	0x200004dc
 8002d44:	0800e5b8 	.word	0x0800e5b8
 8002d48:	20000a7c 	.word	0x20000a7c
 8002d4c:	0800e5d0 	.word	0x0800e5d0
 8002d50:	0800e628 	.word	0x0800e628
 8002d54:	0800e630 	.word	0x0800e630
 8002d58:	0800e638 	.word	0x0800e638
 8002d5c:	0002ee00 	.word	0x0002ee00

08002d60 <printFlowerArt>:
/**
  * @brief  Prints a flower art with a message to the UART.
  * @retval None
  */
void printFlowerArt(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
    const char *flowerArt =
 8002d66:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <printFlowerArt+0x28>)
 8002d68:	607b      	str	r3, [r7, #4]
    "      _|_|_                \r\n"
    "    /_/   \\_\\            \r\n\n"
    "Angus's Peony Monitor\r\n\n";

    // Transmit the art and message to UART
    HAL_UART_Transmit(&huart2, (uint8_t *)flowerArt, strlen(flowerArt), HAL_MAX_DELAY);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fa58 	bl	8000220 <strlen>
 8002d70:	4603      	mov	r3, r0
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	f04f 33ff 	mov.w	r3, #4294967295
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	4804      	ldr	r0, [pc, #16]	@ (8002d8c <printFlowerArt+0x2c>)
 8002d7c:	f007 ffa0 	bl	800acc0 <HAL_UART_Transmit>
}
 8002d80:	bf00      	nop
 8002d82:	3708      	adds	r7, #8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	0800e63c 	.word	0x0800e63c
 8002d8c:	20000a7c 	.word	0x20000a7c

08002d90 <getUniqueID>:
/**
 * @brief Fetches the STM32 board's unique ID and stores it in a string.
 * @param uniqueID A pointer to a character array where the unique ID will be stored.
 *                 Ensure the array is large enough to hold the formatted string (e.g., 25 bytes).
 */
void getUniqueID(char *uniqueID) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	6078      	str	r0, [r7, #4]
    // Fetch the unique ID from the registers
    uint32_t id0 = HAL_GetUIDw0();  // First part of the unique ID
 8002d98:	f002 fe2c 	bl	80059f4 <HAL_GetUIDw0>
 8002d9c:	6178      	str	r0, [r7, #20]
    uint32_t id1 = HAL_GetUIDw1();  // Second part of the unique ID
 8002d9e:	f002 fe33 	bl	8005a08 <HAL_GetUIDw1>
 8002da2:	6138      	str	r0, [r7, #16]
    uint32_t id2 = HAL_GetUIDw2();  // Third part of the unique ID
 8002da4:	f002 fe3a 	bl	8005a1c <HAL_GetUIDw2>
 8002da8:	60f8      	str	r0, [r7, #12]

    // Format the unique ID into a readable string
    snprintf(uniqueID, 25, "%08X%08X%08X", id0, id1, id2);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	9301      	str	r3, [sp, #4]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <getUniqueID+0x38>)
 8002db6:	2119      	movs	r1, #25
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f009 fa69 	bl	800c290 <sniprintf>
}
 8002dbe:	bf00      	nop
 8002dc0:	3718      	adds	r7, #24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	0800e794 	.word	0x0800e794

08002dcc <formatSensorData>:
 * @param ST Soil Temperature (format: xx.xx).
 * @param AT Air Temperature (format: xx.xx).
 * @param AP Air Pressure (format: xxxx).
 * @param AH Air Humidity (format: xx.xx).
 */
void formatSensorData(char *txData) {
 8002dcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dd0:	b0ce      	sub	sp, #312	@ 0x138
 8002dd2:	af0a      	add	r7, sp, #40	@ 0x28
 8002dd4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002dd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002ddc:	6018      	str	r0, [r3, #0]
    // Use snprintf to ensure the values are formatted as required.
    // %07.2f formats SM to xxx.xx, %05.2f formats ST, AT, AH to xx.xx, and %04.0f formats AP to xxxx
    sprintf(txData, "%f", SM);
 8002dde:	4b2e      	ldr	r3, [pc, #184]	@ (8002e98 <formatSensorData+0xcc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fd fb88 	bl	80004f8 <__aeabi_f2d>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002df0:	f5a1 7082 	sub.w	r0, r1, #260	@ 0x104
 8002df4:	4929      	ldr	r1, [pc, #164]	@ (8002e9c <formatSensorData+0xd0>)
 8002df6:	6800      	ldr	r0, [r0, #0]
 8002df8:	f009 fa7e 	bl	800c2f8 <siprintf>

    // Optional: Print the formatted data for debugging
    char uartBuff[256];
    snprintf((char *)txData, 256, "$%u:%06.2f:%05.2f:%05.2f:%04.0f:%05.2f",NID, SM, ST, Temperature, Pressure, Humidity);
 8002dfc:	4b26      	ldr	r3, [pc, #152]	@ (8002e98 <formatSensorData+0xcc>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7fd fb79 	bl	80004f8 <__aeabi_f2d>
 8002e06:	4604      	mov	r4, r0
 8002e08:	460d      	mov	r5, r1
 8002e0a:	4b25      	ldr	r3, [pc, #148]	@ (8002ea0 <formatSensorData+0xd4>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7fd fb72 	bl	80004f8 <__aeabi_f2d>
 8002e14:	4680      	mov	r8, r0
 8002e16:	4689      	mov	r9, r1
 8002e18:	4b22      	ldr	r3, [pc, #136]	@ (8002ea4 <formatSensorData+0xd8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7fd fb6b 	bl	80004f8 <__aeabi_f2d>
 8002e22:	4682      	mov	sl, r0
 8002e24:	468b      	mov	fp, r1
 8002e26:	4b20      	ldr	r3, [pc, #128]	@ (8002ea8 <formatSensorData+0xdc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fb64 	bl	80004f8 <__aeabi_f2d>
 8002e30:	e9c7 0100 	strd	r0, r1, [r7]
 8002e34:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <formatSensorData+0xe0>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fd fb5d 	bl	80004f8 <__aeabi_f2d>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8002e46:	f5a1 7082 	sub.w	r0, r1, #260	@ 0x104
 8002e4a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002e56:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002e5a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002e5e:	e9cd 4500 	strd	r4, r5, [sp]
 8002e62:	2302      	movs	r3, #2
 8002e64:	4a12      	ldr	r2, [pc, #72]	@ (8002eb0 <formatSensorData+0xe4>)
 8002e66:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002e6a:	6800      	ldr	r0, [r0, #0]
 8002e6c:	f009 fa10 	bl	800c290 <sniprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8002e70:	f107 0310 	add.w	r3, r7, #16
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7fd f9d3 	bl	8000220 <strlen>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	f107 0110 	add.w	r1, r7, #16
 8002e82:	f04f 33ff 	mov.w	r3, #4294967295
 8002e86:	480b      	ldr	r0, [pc, #44]	@ (8002eb4 <formatSensorData+0xe8>)
 8002e88:	f007 ff1a 	bl	800acc0 <HAL_UART_Transmit>
}
 8002e8c:	bf00      	nop
 8002e8e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8002e92:	46bd      	mov	sp, r7
 8002e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e98:	20000394 	.word	0x20000394
 8002e9c:	0800e7a4 	.word	0x0800e7a4
 8002ea0:	200003a0 	.word	0x200003a0
 8002ea4:	20000388 	.word	0x20000388
 8002ea8:	2000038c 	.word	0x2000038c
 8002eac:	20000390 	.word	0x20000390
 8002eb0:	0800e7a8 	.word	0x0800e7a8
 8002eb4:	20000a7c 	.word	0x20000a7c

08002eb8 <delay>:


void delay (uint16_t us)// us delay
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 8002ec2:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <delay+0x2c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 8002eca:	bf00      	nop
 8002ecc:	4b05      	ldr	r3, [pc, #20]	@ (8002ee4 <delay+0x2c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d3f9      	bcc.n	8002ecc <delay+0x14>
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bc80      	pop	{r7}
 8002ee2:	4770      	bx	lr
 8002ee4:	20000a30 	.word	0x20000a30

08002ee8 <soilTEMP>:

float soilTEMP(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
	uint8_t Temp_byte1, Temp_byte2;
	int16_t TEMP;

	  Presence = DS18B20_Start ();
 8002eee:	f000 f837 	bl	8002f60 <DS18B20_Start>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b19      	ldr	r3, [pc, #100]	@ (8002f5c <soilTEMP+0x74>)
 8002ef8:	701a      	strb	r2, [r3, #0]
	  DS18B20_Write (0xCC);  // skip ROM
 8002efa:	20cc      	movs	r0, #204	@ 0xcc
 8002efc:	f000 f860 	bl	8002fc0 <DS18B20_Write>
	  DS18B20_Write (0x44);  // convert t
 8002f00:	2044      	movs	r0, #68	@ 0x44
 8002f02:	f000 f85d 	bl	8002fc0 <DS18B20_Write>

	  Presence = DS18B20_Start ();
 8002f06:	f000 f82b 	bl	8002f60 <DS18B20_Start>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	4b13      	ldr	r3, [pc, #76]	@ (8002f5c <soilTEMP+0x74>)
 8002f10:	701a      	strb	r2, [r3, #0]
	  DS18B20_Write (0xCC);  // skip ROM
 8002f12:	20cc      	movs	r0, #204	@ 0xcc
 8002f14:	f000 f854 	bl	8002fc0 <DS18B20_Write>
	  DS18B20_Write (0xBE);  // Read Scratch-pad
 8002f18:	20be      	movs	r0, #190	@ 0xbe
 8002f1a:	f000 f851 	bl	8002fc0 <DS18B20_Write>

      Temp_byte1 = DS18B20_Read();
 8002f1e:	f000 f895 	bl	800304c <DS18B20_Read>
 8002f22:	4603      	mov	r3, r0
 8002f24:	71fb      	strb	r3, [r7, #7]
	  Temp_byte2 = DS18B20_Read();
 8002f26:	f000 f891 	bl	800304c <DS18B20_Read>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	71bb      	strb	r3, [r7, #6]
	  TEMP = ((Temp_byte2<<8))|Temp_byte1;
 8002f2e:	79bb      	ldrb	r3, [r7, #6]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	b21a      	sxth	r2, r3
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	b21b      	sxth	r3, r3
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	80bb      	strh	r3, [r7, #4]
	  return (float)TEMP/16.0;  // resolution is 0.0625
 8002f3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd ff13 	bl	8000d6c <__aeabi_i2f>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe f815 	bl	8000f7c <__aeabi_fdiv>
 8002f52:	4603      	mov	r3, r0

}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	200003a4 	.word	0x200003a4

08002f60 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8002f66:	2300      	movs	r3, #0
 8002f68:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8002f6a:	2140      	movs	r1, #64	@ 0x40
 8002f6c:	4813      	ldr	r0, [pc, #76]	@ (8002fbc <DS18B20_Start+0x5c>)
 8002f6e:	f000 f8ab 	bl	80030c8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 8002f72:	2200      	movs	r2, #0
 8002f74:	2140      	movs	r1, #64	@ 0x40
 8002f76:	4811      	ldr	r0, [pc, #68]	@ (8002fbc <DS18B20_Start+0x5c>)
 8002f78:	f004 f8e7 	bl	800714a <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8002f7c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8002f80:	f7ff ff9a 	bl	8002eb8 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8002f84:	2140      	movs	r1, #64	@ 0x40
 8002f86:	480d      	ldr	r0, [pc, #52]	@ (8002fbc <DS18B20_Start+0x5c>)
 8002f88:	f000 f8bc 	bl	8003104 <Set_Pin_Input>

	delay (80);    // delay according to datasheet
 8002f8c:	2050      	movs	r0, #80	@ 0x50
 8002f8e:	f7ff ff93 	bl	8002eb8 <delay>
		if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8002f92:	2140      	movs	r1, #64	@ 0x40
 8002f94:	4809      	ldr	r0, [pc, #36]	@ (8002fbc <DS18B20_Start+0x5c>)
 8002f96:	f004 f8c1 	bl	800711c <HAL_GPIO_ReadPin>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d102      	bne.n	8002fa6 <DS18B20_Start+0x46>
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	71fb      	strb	r3, [r7, #7]
 8002fa4:	e001      	b.n	8002faa <DS18B20_Start+0x4a>
		else Response = -1;
 8002fa6:	23ff      	movs	r3, #255	@ 0xff
 8002fa8:	71fb      	strb	r3, [r7, #7]

		delay (400); // 480 us delay totally.
 8002faa:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8002fae:	f7ff ff83 	bl	8002eb8 <delay>

		return Response;
 8002fb2:	79fb      	ldrb	r3, [r7, #7]

}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3708      	adds	r7, #8
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	48000400 	.word	0x48000400

08002fc0 <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8002fca:	2140      	movs	r1, #64	@ 0x40
 8002fcc:	481e      	ldr	r0, [pc, #120]	@ (8003048 <DS18B20_Write+0x88>)
 8002fce:	f000 f87b 	bl	80030c8 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	e02e      	b.n	8003036 <DS18B20_Write+0x76>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8002fd8:	79fa      	ldrb	r2, [r7, #7]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	fa42 f303 	asr.w	r3, r2, r3
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d013      	beq.n	8003010 <DS18B20_Write+0x50>
		{
			// write 1
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8002fe8:	2140      	movs	r1, #64	@ 0x40
 8002fea:	4817      	ldr	r0, [pc, #92]	@ (8003048 <DS18B20_Write+0x88>)
 8002fec:	f000 f86c 	bl	80030c8 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2140      	movs	r1, #64	@ 0x40
 8002ff4:	4814      	ldr	r0, [pc, #80]	@ (8003048 <DS18B20_Write+0x88>)
 8002ff6:	f004 f8a8 	bl	800714a <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8002ffa:	2001      	movs	r0, #1
 8002ffc:	f7ff ff5c 	bl	8002eb8 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8003000:	2140      	movs	r1, #64	@ 0x40
 8003002:	4811      	ldr	r0, [pc, #68]	@ (8003048 <DS18B20_Write+0x88>)
 8003004:	f000 f87e 	bl	8003104 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8003008:	2032      	movs	r0, #50	@ 0x32
 800300a:	f7ff ff55 	bl	8002eb8 <delay>
 800300e:	e00f      	b.n	8003030 <DS18B20_Write+0x70>
		}

		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8003010:	2140      	movs	r1, #64	@ 0x40
 8003012:	480d      	ldr	r0, [pc, #52]	@ (8003048 <DS18B20_Write+0x88>)
 8003014:	f000 f858 	bl	80030c8 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8003018:	2200      	movs	r2, #0
 800301a:	2140      	movs	r1, #64	@ 0x40
 800301c:	480a      	ldr	r0, [pc, #40]	@ (8003048 <DS18B20_Write+0x88>)
 800301e:	f004 f894 	bl	800714a <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 8003022:	2032      	movs	r0, #50	@ 0x32
 8003024:	f7ff ff48 	bl	8002eb8 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8003028:	2140      	movs	r1, #64	@ 0x40
 800302a:	4807      	ldr	r0, [pc, #28]	@ (8003048 <DS18B20_Write+0x88>)
 800302c:	f000 f86a 	bl	8003104 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3301      	adds	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2b07      	cmp	r3, #7
 800303a:	ddcd      	ble.n	8002fd8 <DS18B20_Write+0x18>
		}
	}
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	48000400 	.word	0x48000400

0800304c <DS18B20_Read>:


uint8_t DS18B20_Read(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
    uint8_t value = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	71fb      	strb	r3, [r7, #7]
    Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8003056:	2140      	movs	r1, #64	@ 0x40
 8003058:	481a      	ldr	r0, [pc, #104]	@ (80030c4 <DS18B20_Read+0x78>)
 800305a:	f000 f853 	bl	8003104 <Set_Pin_Input>

    for (int i = 0; i < 8; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	e026      	b.n	80030b2 <DS18B20_Read+0x66>
    {
        Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8003064:	2140      	movs	r1, #64	@ 0x40
 8003066:	4817      	ldr	r0, [pc, #92]	@ (80030c4 <DS18B20_Read+0x78>)
 8003068:	f000 f82e 	bl	80030c8 <Set_Pin_Output>
        HAL_GPIO_WritePin(DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 800306c:	2200      	movs	r2, #0
 800306e:	2140      	movs	r1, #64	@ 0x40
 8003070:	4814      	ldr	r0, [pc, #80]	@ (80030c4 <DS18B20_Read+0x78>)
 8003072:	f004 f86a 	bl	800714a <HAL_GPIO_WritePin>
        delay(2);  // wait for 2 us
 8003076:	2002      	movs	r0, #2
 8003078:	f7ff ff1e 	bl	8002eb8 <delay>
        Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800307c:	2140      	movs	r1, #64	@ 0x40
 800307e:	4811      	ldr	r0, [pc, #68]	@ (80030c4 <DS18B20_Read+0x78>)
 8003080:	f000 f840 	bl	8003104 <Set_Pin_Input>
        if (HAL_GPIO_ReadPin(DS18B20_PORT, DS18B20_PIN))
 8003084:	2140      	movs	r1, #64	@ 0x40
 8003086:	480f      	ldr	r0, [pc, #60]	@ (80030c4 <DS18B20_Read+0x78>)
 8003088:	f004 f848 	bl	800711c <HAL_GPIO_ReadPin>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d009      	beq.n	80030a6 <DS18B20_Read+0x5a>
        {
            value |= 1 << i;  // read = 1
 8003092:	2201      	movs	r2, #1
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	b25a      	sxtb	r2, r3
 800309c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	71fb      	strb	r3, [r7, #7]
        }
        delay(60);  // wait for 60 us
 80030a6:	203c      	movs	r0, #60	@ 0x3c
 80030a8:	f7ff ff06 	bl	8002eb8 <delay>
    for (int i = 0; i < 8; i++)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	3301      	adds	r3, #1
 80030b0:	603b      	str	r3, [r7, #0]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	2b07      	cmp	r3, #7
 80030b6:	ddd5      	ble.n	8003064 <DS18B20_Read+0x18>
    }
    return value;
 80030b8:	79fb      	ldrb	r3, [r7, #7]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	48000400 	.word	0x48000400

080030c8 <Set_Pin_Output>:


void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d4:	f107 030c 	add.w	r3, r7, #12
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	60da      	str	r2, [r3, #12]
 80030e2:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80030e4:	887b      	ldrh	r3, [r7, #2]
 80030e6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030e8:	2301      	movs	r3, #1
 80030ea:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80030f0:	f107 030c 	add.w	r3, r7, #12
 80030f4:	4619      	mov	r1, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f003 fde2 	bl	8006cc0 <HAL_GPIO_Init>
}
 80030fc:	bf00      	nop
 80030fe:	3720      	adds	r7, #32
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	460b      	mov	r3, r1
 800310e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	60da      	str	r2, [r3, #12]
 800311e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8003120:	887b      	ldrh	r3, [r7, #2]
 8003122:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003128:	2301      	movs	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800312c:	f107 030c 	add.w	r3, r7, #12
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f003 fdc4 	bl	8006cc0 <HAL_GPIO_Init>
}
 8003138:	bf00      	nop
 800313a:	3720      	adds	r7, #32
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <soilMOISTUREinit>:



void soilMOISTUREinit(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
	mS = (-100.0)/(dryS - wetS);
 8003144:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <soilMOISTUREinit+0x48>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a10      	ldr	r2, [pc, #64]	@ (800318c <soilMOISTUREinit+0x4c>)
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	4611      	mov	r1, r2
 800314e:	4618      	mov	r0, r3
 8003150:	f7fd fd56 	bl	8000c00 <__aeabi_fsub>
 8003154:	4603      	mov	r3, r0
 8003156:	4619      	mov	r1, r3
 8003158:	480d      	ldr	r0, [pc, #52]	@ (8003190 <soilMOISTUREinit+0x50>)
 800315a:	f7fd ff0f 	bl	8000f7c <__aeabi_fdiv>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <soilMOISTUREinit+0x54>)
 8003164:	601a      	str	r2, [r3, #0]
	cS = - mS*dryS;
 8003166:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <soilMOISTUREinit+0x54>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800316e:	4a06      	ldr	r2, [pc, #24]	@ (8003188 <soilMOISTUREinit+0x48>)
 8003170:	6812      	ldr	r2, [r2, #0]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd fe4d 	bl	8000e14 <__aeabi_fmul>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <soilMOISTUREinit+0x58>)
 8003180:	601a      	str	r2, [r3, #0]
}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	2000000c 	.word	0x2000000c
 800318c:	20000008 	.word	0x20000008
 8003190:	c2c80000 	.word	0xc2c80000
 8003194:	20000398 	.word	0x20000398
 8003198:	2000039c 	.word	0x2000039c

0800319c <ClearBuffer>:

void ClearBuffer(char *buffer, uint16_t size) {
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < size; i++) {
 80031a8:	2300      	movs	r3, #0
 80031aa:	81fb      	strh	r3, [r7, #14]
 80031ac:	e007      	b.n	80031be <ClearBuffer+0x22>
        buffer[i] = 0;  // Set each element to 0
 80031ae:	89fb      	ldrh	r3, [r7, #14]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	4413      	add	r3, r2
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++) {
 80031b8:	89fb      	ldrh	r3, [r7, #14]
 80031ba:	3301      	adds	r3, #1
 80031bc:	81fb      	strh	r3, [r7, #14]
 80031be:	89fa      	ldrh	r2, [r7, #14]
 80031c0:	887b      	ldrh	r3, [r7, #2]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d3f3      	bcc.n	80031ae <ClearBuffer+0x12>
    }
}
 80031c6:	bf00      	nop
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bc80      	pop	{r7}
 80031d0:	4770      	bx	lr
	...

080031d4 <soilMOISTURE>:


float soilMOISTURE(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
	float temp = 0.9;
 80031da:	4b12      	ldr	r3, [pc, #72]	@ (8003224 <soilMOISTURE+0x50>)
 80031dc:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, SM_Power_Pin, GPIO_PIN_SET);
 80031de:	2201      	movs	r2, #1
 80031e0:	2104      	movs	r1, #4
 80031e2:	4811      	ldr	r0, [pc, #68]	@ (8003228 <soilMOISTURE+0x54>)
 80031e4:	f003 ffb1 	bl	800714a <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80031e8:	2064      	movs	r0, #100	@ 0x64
 80031ea:	f002 fbdf 	bl	80059ac <HAL_Delay>
	// Start ADC Conversion
	HAL_ADC_Start(&hadc);
 80031ee:	480f      	ldr	r0, [pc, #60]	@ (800322c <soilMOISTURE+0x58>)
 80031f0:	f002 ffc0 	bl	8006174 <HAL_ADC_Start>
	// Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc, 1);
 80031f4:	2101      	movs	r1, #1
 80031f6:	480d      	ldr	r0, [pc, #52]	@ (800322c <soilMOISTURE+0x58>)
 80031f8:	f003 f802 	bl	8006200 <HAL_ADC_PollForConversion>
	// Read The ADC Conversion Result
	temp = (float)HAL_ADC_GetValue(&hadc);
 80031fc:	480b      	ldr	r0, [pc, #44]	@ (800322c <soilMOISTURE+0x58>)
 80031fe:	f003 f896 	bl	800632e <HAL_ADC_GetValue>
 8003202:	4603      	mov	r3, r0
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd fdad 	bl	8000d64 <__aeabi_ui2f>
 800320a:	4603      	mov	r3, r0
 800320c:	607b      	str	r3, [r7, #4]
	if(CALIBRATION == 0)
	{
		temp = mS*temp + cS;
	}
	HAL_GPIO_WritePin(GPIOB, SM_Power_Pin, GPIO_PIN_RESET);
 800320e:	2200      	movs	r2, #0
 8003210:	2104      	movs	r1, #4
 8003212:	4805      	ldr	r0, [pc, #20]	@ (8003228 <soilMOISTURE+0x54>)
 8003214:	f003 ff99 	bl	800714a <HAL_GPIO_WritePin>
	return temp;
 8003218:	687b      	ldr	r3, [r7, #4]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	3f666666 	.word	0x3f666666
 8003228:	48000400 	.word	0x48000400
 800322c:	20000248 	.word	0x20000248

08003230 <printOLED>:

void printOLED(float SM, float ST,  float AT, float AP, float AH)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
	// TODO: for debugging only

	//HAL_Delay(100);

	SSD1306_GotoXY (5,5); // goto 10, 10
 800323e:	2105      	movs	r1, #5
 8003240:	2005      	movs	r0, #5
 8003242:	f000 fe11 	bl	8003e68 <SSD1306_GotoXY>
	SSD1306_Puts ("SM: ", &Font_7x10, 1); // print Hello
 8003246:	2201      	movs	r2, #1
 8003248:	494f      	ldr	r1, [pc, #316]	@ (8003388 <printOLED+0x158>)
 800324a:	4850      	ldr	r0, [pc, #320]	@ (800338c <printOLED+0x15c>)
 800324c:	f000 fea0 	bl	8003f90 <SSD1306_Puts>
	sprintf (bufnum, "%.2f",SM);//move number into buffer
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7fd f951 	bl	80004f8 <__aeabi_f2d>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	494d      	ldr	r1, [pc, #308]	@ (8003390 <printOLED+0x160>)
 800325c:	484d      	ldr	r0, [pc, #308]	@ (8003394 <printOLED+0x164>)
 800325e:	f009 f84b 	bl	800c2f8 <siprintf>
	SSD1306_Puts (bufnum, &Font_7x10, 1);
 8003262:	2201      	movs	r2, #1
 8003264:	4948      	ldr	r1, [pc, #288]	@ (8003388 <printOLED+0x158>)
 8003266:	484b      	ldr	r0, [pc, #300]	@ (8003394 <printOLED+0x164>)
 8003268:	f000 fe92 	bl	8003f90 <SSD1306_Puts>
	SSD1306_GotoXY (5,5); // goto 10, 10
 800326c:	2105      	movs	r1, #5
 800326e:	2005      	movs	r0, #5
 8003270:	f000 fdfa 	bl	8003e68 <SSD1306_GotoXY>
	SSD1306_Puts ("SM: ", &Font_7x10, 1); // print Hello
 8003274:	2201      	movs	r2, #1
 8003276:	4944      	ldr	r1, [pc, #272]	@ (8003388 <printOLED+0x158>)
 8003278:	4844      	ldr	r0, [pc, #272]	@ (800338c <printOLED+0x15c>)
 800327a:	f000 fe89 	bl	8003f90 <SSD1306_Puts>
	sprintf (bufnum, "%.2f",SM);//move number into buffer
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7fd f93a 	bl	80004f8 <__aeabi_f2d>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	4941      	ldr	r1, [pc, #260]	@ (8003390 <printOLED+0x160>)
 800328a:	4842      	ldr	r0, [pc, #264]	@ (8003394 <printOLED+0x164>)
 800328c:	f009 f834 	bl	800c2f8 <siprintf>
	SSD1306_Puts (bufnum, &Font_7x10, 1);
 8003290:	2201      	movs	r2, #1
 8003292:	493d      	ldr	r1, [pc, #244]	@ (8003388 <printOLED+0x158>)
 8003294:	483f      	ldr	r0, [pc, #252]	@ (8003394 <printOLED+0x164>)
 8003296:	f000 fe7b 	bl	8003f90 <SSD1306_Puts>

	SSD1306_GotoXY (5, 17);
 800329a:	2111      	movs	r1, #17
 800329c:	2005      	movs	r0, #5
 800329e:	f000 fde3 	bl	8003e68 <SSD1306_GotoXY>
	SSD1306_Puts ("ST: ", &Font_7x10, 1); // print Hello
 80032a2:	2201      	movs	r2, #1
 80032a4:	4938      	ldr	r1, [pc, #224]	@ (8003388 <printOLED+0x158>)
 80032a6:	483c      	ldr	r0, [pc, #240]	@ (8003398 <printOLED+0x168>)
 80032a8:	f000 fe72 	bl	8003f90 <SSD1306_Puts>
	ClearBuffer(bufnum, BUFFER_SIZE);
 80032ac:	2132      	movs	r1, #50	@ 0x32
 80032ae:	4839      	ldr	r0, [pc, #228]	@ (8003394 <printOLED+0x164>)
 80032b0:	f7ff ff74 	bl	800319c <ClearBuffer>
	sprintf (bufnum, "%.2f",ST);//move number into buffer
 80032b4:	68b8      	ldr	r0, [r7, #8]
 80032b6:	f7fd f91f 	bl	80004f8 <__aeabi_f2d>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4934      	ldr	r1, [pc, #208]	@ (8003390 <printOLED+0x160>)
 80032c0:	4834      	ldr	r0, [pc, #208]	@ (8003394 <printOLED+0x164>)
 80032c2:	f009 f819 	bl	800c2f8 <siprintf>
	SSD1306_Puts (bufnum, &Font_7x10, 1);
 80032c6:	2201      	movs	r2, #1
 80032c8:	492f      	ldr	r1, [pc, #188]	@ (8003388 <printOLED+0x158>)
 80032ca:	4832      	ldr	r0, [pc, #200]	@ (8003394 <printOLED+0x164>)
 80032cc:	f000 fe60 	bl	8003f90 <SSD1306_Puts>

	SSD1306_GotoXY (5, 29);
 80032d0:	211d      	movs	r1, #29
 80032d2:	2005      	movs	r0, #5
 80032d4:	f000 fdc8 	bl	8003e68 <SSD1306_GotoXY>
	SSD1306_Puts ("AT: ", &Font_7x10, 1); // print Hello
 80032d8:	2201      	movs	r2, #1
 80032da:	492b      	ldr	r1, [pc, #172]	@ (8003388 <printOLED+0x158>)
 80032dc:	482f      	ldr	r0, [pc, #188]	@ (800339c <printOLED+0x16c>)
 80032de:	f000 fe57 	bl	8003f90 <SSD1306_Puts>
	ClearBuffer(bufnum, BUFFER_SIZE);
 80032e2:	2132      	movs	r1, #50	@ 0x32
 80032e4:	482b      	ldr	r0, [pc, #172]	@ (8003394 <printOLED+0x164>)
 80032e6:	f7ff ff59 	bl	800319c <ClearBuffer>
	sprintf (bufnum, "%.2f",AT);//move number into buffer
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7fd f904 	bl	80004f8 <__aeabi_f2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4926      	ldr	r1, [pc, #152]	@ (8003390 <printOLED+0x160>)
 80032f6:	4827      	ldr	r0, [pc, #156]	@ (8003394 <printOLED+0x164>)
 80032f8:	f008 fffe 	bl	800c2f8 <siprintf>
	SSD1306_Puts (bufnum, &Font_7x10, 1);
 80032fc:	2201      	movs	r2, #1
 80032fe:	4922      	ldr	r1, [pc, #136]	@ (8003388 <printOLED+0x158>)
 8003300:	4824      	ldr	r0, [pc, #144]	@ (8003394 <printOLED+0x164>)
 8003302:	f000 fe45 	bl	8003f90 <SSD1306_Puts>

	SSD1306_GotoXY (5, 41);
 8003306:	2129      	movs	r1, #41	@ 0x29
 8003308:	2005      	movs	r0, #5
 800330a:	f000 fdad 	bl	8003e68 <SSD1306_GotoXY>
	SSD1306_Puts ("AP: ", &Font_7x10, 1); // print Hello
 800330e:	2201      	movs	r2, #1
 8003310:	491d      	ldr	r1, [pc, #116]	@ (8003388 <printOLED+0x158>)
 8003312:	4823      	ldr	r0, [pc, #140]	@ (80033a0 <printOLED+0x170>)
 8003314:	f000 fe3c 	bl	8003f90 <SSD1306_Puts>
	ClearBuffer(bufnum, BUFFER_SIZE);
 8003318:	2132      	movs	r1, #50	@ 0x32
 800331a:	481e      	ldr	r0, [pc, #120]	@ (8003394 <printOLED+0x164>)
 800331c:	f7ff ff3e 	bl	800319c <ClearBuffer>
	sprintf (bufnum, "%.2f",AP);//move number into buffer
 8003320:	6838      	ldr	r0, [r7, #0]
 8003322:	f7fd f8e9 	bl	80004f8 <__aeabi_f2d>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4919      	ldr	r1, [pc, #100]	@ (8003390 <printOLED+0x160>)
 800332c:	4819      	ldr	r0, [pc, #100]	@ (8003394 <printOLED+0x164>)
 800332e:	f008 ffe3 	bl	800c2f8 <siprintf>
	SSD1306_Puts (bufnum, &Font_7x10, 1);
 8003332:	2201      	movs	r2, #1
 8003334:	4914      	ldr	r1, [pc, #80]	@ (8003388 <printOLED+0x158>)
 8003336:	4817      	ldr	r0, [pc, #92]	@ (8003394 <printOLED+0x164>)
 8003338:	f000 fe2a 	bl	8003f90 <SSD1306_Puts>

	SSD1306_GotoXY (5, 53);
 800333c:	2135      	movs	r1, #53	@ 0x35
 800333e:	2005      	movs	r0, #5
 8003340:	f000 fd92 	bl	8003e68 <SSD1306_GotoXY>
	SSD1306_Puts ("AH: ", &Font_7x10, 1); // print Hello
 8003344:	2201      	movs	r2, #1
 8003346:	4910      	ldr	r1, [pc, #64]	@ (8003388 <printOLED+0x158>)
 8003348:	4816      	ldr	r0, [pc, #88]	@ (80033a4 <printOLED+0x174>)
 800334a:	f000 fe21 	bl	8003f90 <SSD1306_Puts>
	ClearBuffer(bufnum, BUFFER_SIZE);
 800334e:	2132      	movs	r1, #50	@ 0x32
 8003350:	4810      	ldr	r0, [pc, #64]	@ (8003394 <printOLED+0x164>)
 8003352:	f7ff ff23 	bl	800319c <ClearBuffer>
	sprintf (bufnum, "%.2f",AH);//move number into buffer
 8003356:	69b8      	ldr	r0, [r7, #24]
 8003358:	f7fd f8ce 	bl	80004f8 <__aeabi_f2d>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	490b      	ldr	r1, [pc, #44]	@ (8003390 <printOLED+0x160>)
 8003362:	480c      	ldr	r0, [pc, #48]	@ (8003394 <printOLED+0x164>)
 8003364:	f008 ffc8 	bl	800c2f8 <siprintf>
	SSD1306_Puts (bufnum, &Font_7x10, 1);
 8003368:	2201      	movs	r2, #1
 800336a:	4907      	ldr	r1, [pc, #28]	@ (8003388 <printOLED+0x158>)
 800336c:	4809      	ldr	r0, [pc, #36]	@ (8003394 <printOLED+0x164>)
 800336e:	f000 fe0f 	bl	8003f90 <SSD1306_Puts>

	ClearBuffer(bufnum, BUFFER_SIZE);
 8003372:	2132      	movs	r1, #50	@ 0x32
 8003374:	4807      	ldr	r0, [pc, #28]	@ (8003394 <printOLED+0x164>)
 8003376:	f7ff ff11 	bl	800319c <ClearBuffer>
	SSD1306_UpdateScreen(); // update screen
 800337a:	f000 fcd1 	bl	8003d20 <SSD1306_UpdateScreen>

}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000000 	.word	0x20000000
 800338c:	0800e7d0 	.word	0x0800e7d0
 8003390:	0800e7d8 	.word	0x0800e7d8
 8003394:	20000354 	.word	0x20000354
 8003398:	0800e7e0 	.word	0x0800e7e0
 800339c:	0800e7e8 	.word	0x0800e7e8
 80033a0:	0800e7f0 	.word	0x0800e7f0
 80033a4:	0800e7f8 	.word	0x0800e7f8

080033a8 <waitForLoRaTxComplete>:

// Function to wait for the LoRa transmission to complete
void waitForLoRaTxComplete()
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
    // Wait until the TX complete flag is set by the TX_DONE interrupt
    while (!txCompleteFlag)
 80033ac:	e002      	b.n	80033b4 <waitForLoRaTxComplete+0xc>
    {
        HAL_Delay(100);  // Small delay to avoid busy-waiting
 80033ae:	2064      	movs	r0, #100	@ 0x64
 80033b0:	f002 fafc 	bl	80059ac <HAL_Delay>
    while (!txCompleteFlag)
 80033b4:	4b04      	ldr	r3, [pc, #16]	@ (80033c8 <waitForLoRaTxComplete+0x20>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f7      	beq.n	80033ae <waitForLoRaTxComplete+0x6>
    }

    // Transmission complete, reset the flag
    txCompleteFlag = 0;
 80033be:	4b02      	ldr	r3, [pc, #8]	@ (80033c8 <waitForLoRaTxComplete+0x20>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	701a      	strb	r2, [r3, #0]
}
 80033c4:	bf00      	nop
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	200003a5 	.word	0x200003a5

080033cc <transmitData>:
  * @brief  Transmit data using Sub-GHz radio
  * @param  data Pointer to data to be transmitted
  * @retval None
  */
void transmitData(char *data)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b0c2      	sub	sp, #264	@ 0x108
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033da:	6018      	str	r0, [r3, #0]
	txCompleteFlag=0;
 80033dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003490 <transmitData+0xc4>)
 80033de:	2200      	movs	r2, #0
 80033e0:	701a      	strb	r2, [r3, #0]
	// Print the data being transmitted to UART
	char uartBuff[256];  // Buffer for UART message
	snprintf(uartBuff, sizeof(uartBuff), "Transmitting Data: %s\r\n", data);
 80033e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80033e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033ea:	f107 0008 	add.w	r0, r7, #8
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a28      	ldr	r2, [pc, #160]	@ (8003494 <transmitData+0xc8>)
 80033f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033f6:	f008 ff4b 	bl	800c290 <sniprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 80033fa:	f107 0308 	add.w	r3, r7, #8
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fc ff0e 	bl	8000220 <strlen>
 8003404:	4603      	mov	r3, r0
 8003406:	b29a      	uxth	r2, r3
 8003408:	f107 0108 	add.w	r1, r7, #8
 800340c:	f04f 33ff 	mov.w	r3, #4294967295
 8003410:	4821      	ldr	r0, [pc, #132]	@ (8003498 <transmitData+0xcc>)
 8003412:	f007 fc55 	bl	800acc0 <HAL_UART_Transmit>
    // Configure IRQ for TX Done and TX Timeout
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8003416:	2300      	movs	r3, #0
 8003418:	2200      	movs	r2, #0
 800341a:	f240 2101 	movw	r1, #513	@ 0x201
 800341e:	f240 2001 	movw	r0, #513	@ 0x201
 8003422:	f001 fca9 	bl	8004d78 <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    // Set the radio to TX mode
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8003426:	2101      	movs	r1, #1
 8003428:	2001      	movs	r0, #1
 800342a:	f002 f92b 	bl	8005684 <SUBGRF_SetSwitch>

    // Workaround before each packet transmission (if required by the chip)
    SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 800342e:	f640 0089 	movw	r0, #2185	@ 0x889
 8003432:	f002 f869 	bl	8005508 <SUBGRF_ReadRegister>
 8003436:	4603      	mov	r3, r0
 8003438:	f043 0304 	orr.w	r3, r3, #4
 800343c:	b2db      	uxtb	r3, r3
 800343e:	4619      	mov	r1, r3
 8003440:	f640 0089 	movw	r0, #2185	@ 0x889
 8003444:	f002 f84c 	bl	80054e0 <SUBGRF_WriteRegister>

    // Set payload length
    packetParams.Params.LoRa.PayloadLength = strlen(data);
 8003448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800344c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	f7fc fee5 	bl	8000220 <strlen>
 8003456:	4603      	mov	r3, r0
 8003458:	b2da      	uxtb	r2, r3
 800345a:	4b10      	ldr	r3, [pc, #64]	@ (800349c <transmitData+0xd0>)
 800345c:	745a      	strb	r2, [r3, #17]
    SUBGRF_SetPacketParams(&packetParams);
 800345e:	480f      	ldr	r0, [pc, #60]	@ (800349c <transmitData+0xd0>)
 8003460:	f001 fef2 	bl	8005248 <SUBGRF_SetPacketParams>

    // Send the payload
    SUBGRF_SendPayload((uint8_t *)data, packetParams.Params.LoRa.PayloadLength, 0);
 8003464:	4b0d      	ldr	r3, [pc, #52]	@ (800349c <transmitData+0xd0>)
 8003466:	7c59      	ldrb	r1, [r3, #17]
 8003468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800346c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003470:	2200      	movs	r2, #0
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	f001 faf8 	bl	8004a68 <SUBGRF_SendPayload>

    // Print debug information (optional)
    HAL_UART_Transmit(&huart2, (uint8_t *)"Transmitting Data...\r\n", 22, HAL_MAX_DELAY);
 8003478:	f04f 33ff 	mov.w	r3, #4294967295
 800347c:	2216      	movs	r2, #22
 800347e:	4908      	ldr	r1, [pc, #32]	@ (80034a0 <transmitData+0xd4>)
 8003480:	4805      	ldr	r0, [pc, #20]	@ (8003498 <transmitData+0xcc>)
 8003482:	f007 fc1d 	bl	800acc0 <HAL_UART_Transmit>
}
 8003486:	bf00      	nop
 8003488:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	200003a5 	.word	0x200003a5
 8003494:	0800e800 	.word	0x0800e800
 8003498:	20000a7c 	.word	0x20000a7c
 800349c:	200003ac 	.word	0x200003ac
 80034a0:	0800e818 	.word	0x0800e818

080034a4 <LEDstartup>:
        }
//    }
}

void LEDstartup(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
    // Flash each LED 3 times
    for (int i = 0; i < 3; i++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	607b      	str	r3, [r7, #4]
 80034ae:	e014      	b.n	80034da <LEDstartup+0x36>
    {
        // Toggle the Green LED
        //BSP_LED_Toggle(LED_GREEN);
        BSP_LED_Toggle(LED_RED);
 80034b0:	2002      	movs	r0, #2
 80034b2:	f001 f933 	bl	800471c <BSP_LED_Toggle>
        BSP_LED_Toggle(LED_BLUE);
 80034b6:	2000      	movs	r0, #0
 80034b8:	f001 f930 	bl	800471c <BSP_LED_Toggle>
        HAL_Delay(200); // Delay 200ms
 80034bc:	20c8      	movs	r0, #200	@ 0xc8
 80034be:	f002 fa75 	bl	80059ac <HAL_Delay>

        // Toggle the  LED again to turn it off
        //BSP_LED_Toggle(LED_GREEN);
        BSP_LED_Toggle(LED_RED);
 80034c2:	2002      	movs	r0, #2
 80034c4:	f001 f92a 	bl	800471c <BSP_LED_Toggle>
        BSP_LED_Toggle(LED_BLUE);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f001 f927 	bl	800471c <BSP_LED_Toggle>
        HAL_Delay(200);
 80034ce:	20c8      	movs	r0, #200	@ 0xc8
 80034d0:	f002 fa6c 	bl	80059ac <HAL_Delay>
    for (int i = 0; i < 3; i++)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3301      	adds	r3, #1
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	dde7      	ble.n	80034b0 <LEDstartup+0xc>

    }
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
	...

080034ec <radioInit>:
/**
  * @brief  Initialize the Sub-GHz radio and dependent hardware.
  * @retval None
  */
void radioInit(void)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
  // Initialize the hardware (SPI bus, TCXO control, RF switch)
  SUBGRF_Init(RadioOnDioIrq);
 80034f2:	4830      	ldr	r0, [pc, #192]	@ (80035b4 <radioInit+0xc8>)
 80034f4:	f001 fa3e 	bl	8004974 <SUBGRF_Init>

  // Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
  // "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
  SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 80034f8:	f640 1016 	movw	r0, #2326	@ 0x916
 80034fc:	f002 f804 	bl	8005508 <SUBGRF_ReadRegister>
 8003500:	4603      	mov	r3, r0
 8003502:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4619      	mov	r1, r3
 800350a:	f640 1016 	movw	r0, #2326	@ 0x916
 800350e:	f001 ffe7 	bl	80054e0 <SUBGRF_WriteRegister>
  SUBGRF_SetRegulatorMode();
 8003512:	f001 fb68 	bl	8004be6 <SUBGRF_SetRegulatorMode>

  // Use the whole 256-byte buffer for both TX and RX
  SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 8003516:	2100      	movs	r1, #0
 8003518:	2000      	movs	r0, #0
 800351a:	f001 ff33 	bl	8005384 <SUBGRF_SetBufferBaseAddress>

  SUBGRF_SetRfFrequency(RF_FREQUENCY);
 800351e:	4826      	ldr	r0, [pc, #152]	@ (80035b8 <radioInit+0xcc>)
 8003520:	f001 fc86 	bl	8004e30 <SUBGRF_SetRfFrequency>
  SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8003524:	200e      	movs	r0, #14
 8003526:	f002 f8d5 	bl	80056d4 <SUBGRF_SetRfTxPower>
  SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 800352a:	2000      	movs	r0, #0
 800352c:	f001 fb4c 	bl	8004bc8 <SUBGRF_SetStopRxTimerOnPreambleDetect>

  SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8003530:	2001      	movs	r0, #1
 8003532:	f001 fcc3 	bl	8004ebc <SUBGRF_SetPacketType>

  SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8003536:	2114      	movs	r1, #20
 8003538:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 800353c:	f001 ffd0 	bl	80054e0 <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8003540:	2124      	movs	r1, #36	@ 0x24
 8003542:	f240 7041 	movw	r0, #1857	@ 0x741
 8003546:	f001 ffcb 	bl	80054e0 <SUBGRF_WriteRegister>

  ModulationParams_t modulationParams;
  modulationParams.PacketType = PACKET_TYPE_LORA;
 800354a:	2301      	movs	r3, #1
 800354c:	713b      	strb	r3, [r7, #4]
  modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 800354e:	2304      	movs	r3, #4
 8003550:	777b      	strb	r3, [r7, #29]
  modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)LORA_CODINGRATE;
 8003552:	2304      	movs	r3, #4
 8003554:	77bb      	strb	r3, [r7, #30]
  modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8003556:	2300      	movs	r3, #0
 8003558:	77fb      	strb	r3, [r7, #31]
  modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)LORA_SPREADING_FACTOR;
 800355a:	230c      	movs	r3, #12
 800355c:	773b      	strb	r3, [r7, #28]
  SUBGRF_SetModulationParams(&modulationParams);
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	4618      	mov	r0, r3
 8003562:	f001 fd9f 	bl	80050a4 <SUBGRF_SetModulationParams>

  packetParams.PacketType = PACKET_TYPE_LORA;
 8003566:	4b15      	ldr	r3, [pc, #84]	@ (80035bc <radioInit+0xd0>)
 8003568:	2201      	movs	r2, #1
 800356a:	701a      	strb	r2, [r3, #0]
  packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 800356c:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <radioInit+0xd0>)
 800356e:	2201      	movs	r2, #1
 8003570:	749a      	strb	r2, [r3, #18]
  packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8003572:	4b12      	ldr	r3, [pc, #72]	@ (80035bc <radioInit+0xd0>)
 8003574:	2200      	movs	r2, #0
 8003576:	741a      	strb	r2, [r3, #16]
  packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 8003578:	4b10      	ldr	r3, [pc, #64]	@ (80035bc <radioInit+0xd0>)
 800357a:	2200      	movs	r2, #0
 800357c:	74da      	strb	r2, [r3, #19]
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 800357e:	4b0f      	ldr	r3, [pc, #60]	@ (80035bc <radioInit+0xd0>)
 8003580:	22ff      	movs	r2, #255	@ 0xff
 8003582:	745a      	strb	r2, [r3, #17]
  packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8003584:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <radioInit+0xd0>)
 8003586:	2208      	movs	r2, #8
 8003588:	81da      	strh	r2, [r3, #14]
  SUBGRF_SetPacketParams(&packetParams);
 800358a:	480c      	ldr	r0, [pc, #48]	@ (80035bc <radioInit+0xd0>)
 800358c:	f001 fe5c 	bl	8005248 <SUBGRF_SetPacketParams>

  //SUBGRF_SetLoRaSymbNumTimeout(LORA_SYMBOL_TIMEOUT);

  // WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
  // RegIqPolaritySetup @address 0x0736
  SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8003590:	f240 7036 	movw	r0, #1846	@ 0x736
 8003594:	f001 ffb8 	bl	8005508 <SUBGRF_ReadRegister>
 8003598:	4603      	mov	r3, r0
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	4619      	mov	r1, r3
 80035a2:	f240 7036 	movw	r0, #1846	@ 0x736
 80035a6:	f001 ff9b 	bl	80054e0 <SUBGRF_WriteRegister>
}
 80035aa:	bf00      	nop
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	080035c1 	.word	0x080035c1
 80035b8:	19cf0e40 	.word	0x19cf0e40
 80035bc:	200003ac 	.word	0x200003ac

080035c0 <RadioOnDioIrq>:
  * @brief  Radio IRQ handler
  * @param  radioIrq Interrupt type (TX done, RX done, etc.)
  * @retval None
  */
void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq)
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035d0:	d01d      	beq.n	800360e <RadioOnDioIrq+0x4e>
 80035d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035d6:	dc26      	bgt.n	8003626 <RadioOnDioIrq+0x66>
 80035d8:	2b40      	cmp	r3, #64	@ 0x40
 80035da:	d01e      	beq.n	800361a <RadioOnDioIrq+0x5a>
 80035dc:	2b40      	cmp	r3, #64	@ 0x40
 80035de:	dc22      	bgt.n	8003626 <RadioOnDioIrq+0x66>
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d002      	beq.n	80035ea <RadioOnDioIrq+0x2a>
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d00b      	beq.n	8003600 <RadioOnDioIrq+0x40>
        case IRQ_CRC_ERROR:
        	handleRxError();
            eventReceptor = eventRxError;
            break;
        default:
            break;
 80035e8:	e01d      	b.n	8003626 <RadioOnDioIrq+0x66>
            HAL_UART_Transmit(&huart2, (uint8_t *)"TX Done\r\n", 9, HAL_MAX_DELAY);
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	2209      	movs	r2, #9
 80035f0:	490f      	ldr	r1, [pc, #60]	@ (8003630 <RadioOnDioIrq+0x70>)
 80035f2:	4810      	ldr	r0, [pc, #64]	@ (8003634 <RadioOnDioIrq+0x74>)
 80035f4:	f007 fb64 	bl	800acc0 <HAL_UART_Transmit>
            txCompleteFlag = 1;  // Set flag when transmission is complete
 80035f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003638 <RadioOnDioIrq+0x78>)
 80035fa:	2201      	movs	r2, #1
 80035fc:	701a      	strb	r2, [r3, #0]
            break;
 80035fe:	e013      	b.n	8003628 <RadioOnDioIrq+0x68>
        	handleRxDone(TRUE);
 8003600:	2001      	movs	r0, #1
 8003602:	f7ff fae5 	bl	8002bd0 <handleRxDone>
            eventReceptor = eventRxDone;
 8003606:	4b0d      	ldr	r3, [pc, #52]	@ (800363c <RadioOnDioIrq+0x7c>)
 8003608:	4a0d      	ldr	r2, [pc, #52]	@ (8003640 <RadioOnDioIrq+0x80>)
 800360a:	601a      	str	r2, [r3, #0]
            break;
 800360c:	e00c      	b.n	8003628 <RadioOnDioIrq+0x68>
        	handleRxTimeout();
 800360e:	f7ff fa69 	bl	8002ae4 <handleRxTimeout>
            eventReceptor = eventRxTimeout;
 8003612:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <RadioOnDioIrq+0x7c>)
 8003614:	4a0b      	ldr	r2, [pc, #44]	@ (8003644 <RadioOnDioIrq+0x84>)
 8003616:	601a      	str	r2, [r3, #0]
            break;
 8003618:	e006      	b.n	8003628 <RadioOnDioIrq+0x68>
        	handleRxError();
 800361a:	f7ff fa9d 	bl	8002b58 <handleRxError>
            eventReceptor = eventRxError;
 800361e:	4b07      	ldr	r3, [pc, #28]	@ (800363c <RadioOnDioIrq+0x7c>)
 8003620:	4a09      	ldr	r2, [pc, #36]	@ (8003648 <RadioOnDioIrq+0x88>)
 8003622:	601a      	str	r2, [r3, #0]
            break;
 8003624:	e000      	b.n	8003628 <RadioOnDioIrq+0x68>
            break;
 8003626:	bf00      	nop
    }
}
 8003628:	bf00      	nop
 800362a:	3708      	adds	r7, #8
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	0800e86c 	.word	0x0800e86c
 8003634:	20000a7c 	.word	0x20000a7c
 8003638:	200003a5 	.word	0x200003a5
 800363c:	200003a8 	.word	0x200003a8
 8003640:	0800364d 	.word	0x0800364d
 8003644:	08003741 	.word	0x08003741
 8003648:	080037ad 	.word	0x080037ad

0800364c <eventRxDone>:
  * @brief  Process the RX Done event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxDone(pingPongFSM_t *const fsm)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Done\r\n", 15, HAL_MAX_DELAY);
 8003654:	f04f 33ff 	mov.w	r3, #4294967295
 8003658:	220f      	movs	r2, #15
 800365a:	4935      	ldr	r1, [pc, #212]	@ (8003730 <eventRxDone+0xe4>)
 800365c:	4835      	ldr	r0, [pc, #212]	@ (8003734 <eventRxDone+0xe8>)
 800365e:	f007 fb2f 	bl	800acc0 <HAL_UART_Transmit>
  switch(fsm->state)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d002      	beq.n	8003670 <eventRxDone+0x24>
 800366a:	2b02      	cmp	r3, #2
 800366c:	d035      	beq.n	80036da <eventRxDone+0x8e>
        default:
          break;
      }
      break;
    default:
      break;
 800366e:	e05b      	b.n	8003728 <eventRxDone+0xdc>
      switch (fsm->subState)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	785b      	ldrb	r3, [r3, #1]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d12e      	bne.n	80036d6 <eventRxDone+0x8a>
          transitionRxDone(fsm);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f9bd 	bl	80039f8 <transitionRxDone>
          if (strncmp(fsm->rxBuffer, "PONG", 4) == 0)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3310      	adds	r3, #16
 8003682:	2204      	movs	r2, #4
 8003684:	492c      	ldr	r1, [pc, #176]	@ (8003738 <eventRxDone+0xec>)
 8003686:	4618      	mov	r0, r3
 8003688:	f008 fea1 	bl	800c3ce <strncmp>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10c      	bne.n	80036ac <eventRxDone+0x60>
            BSP_LED_Off(LED_GREEN);
 8003692:	2001      	movs	r0, #1
 8003694:	f001 f828 	bl	80046e8 <BSP_LED_Off>
            BSP_LED_Toggle(LED_RED);
 8003698:	2002      	movs	r0, #2
 800369a:	f001 f83f 	bl	800471c <BSP_LED_Toggle>
            enterMasterTx(fsm);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f916 	bl	80038d0 <enterMasterTx>
            fsm->subState = SSTATE_TX;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	705a      	strb	r2, [r3, #1]
          break;
 80036aa:	e015      	b.n	80036d8 <eventRxDone+0x8c>
          else if (strncmp(fsm->rxBuffer, "PING", 4) == 0)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3310      	adds	r3, #16
 80036b0:	2204      	movs	r2, #4
 80036b2:	4922      	ldr	r1, [pc, #136]	@ (800373c <eventRxDone+0xf0>)
 80036b4:	4618      	mov	r0, r3
 80036b6:	f008 fe8a 	bl	800c3ce <strncmp>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <eventRxDone+0x82>
            enterSlaveRx(fsm);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 f8d7 	bl	8003874 <enterSlaveRx>
            fsm->state = STATE_SLAVE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	701a      	strb	r2, [r3, #0]
          break;
 80036cc:	e004      	b.n	80036d8 <eventRxDone+0x8c>
            enterMasterRx(fsm);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8a2 	bl	8003818 <enterMasterRx>
          break;
 80036d4:	e000      	b.n	80036d8 <eventRxDone+0x8c>
          break;
 80036d6:	bf00      	nop
      break;
 80036d8:	e026      	b.n	8003728 <eventRxDone+0xdc>
      switch (fsm->subState)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	785b      	ldrb	r3, [r3, #1]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d120      	bne.n	8003724 <eventRxDone+0xd8>
          transitionRxDone(fsm);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f988 	bl	80039f8 <transitionRxDone>
          if (strncmp(fsm->rxBuffer, "PING", 4) == 0)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3310      	adds	r3, #16
 80036ec:	2204      	movs	r2, #4
 80036ee:	4913      	ldr	r1, [pc, #76]	@ (800373c <eventRxDone+0xf0>)
 80036f0:	4618      	mov	r0, r3
 80036f2:	f008 fe6c 	bl	800c3ce <strncmp>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10c      	bne.n	8003716 <eventRxDone+0xca>
            BSP_LED_Off(LED_RED);
 80036fc:	2002      	movs	r0, #2
 80036fe:	f000 fff3 	bl	80046e8 <BSP_LED_Off>
            BSP_LED_Toggle(LED_GREEN);
 8003702:	2001      	movs	r0, #1
 8003704:	f001 f80a 	bl	800471c <BSP_LED_Toggle>
            enterSlaveTx(fsm);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f000 f92b 	bl	8003964 <enterSlaveTx>
            fsm->subState = SSTATE_TX;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	705a      	strb	r2, [r3, #1]
          break;
 8003714:	e007      	b.n	8003726 <eventRxDone+0xda>
            enterMasterRx(fsm);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f87e 	bl	8003818 <enterMasterRx>
            fsm->state = STATE_MASTER;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
          break;
 8003722:	e000      	b.n	8003726 <eventRxDone+0xda>
          break;
 8003724:	bf00      	nop
      break;
 8003726:	bf00      	nop
  }
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	0800e888 	.word	0x0800e888
 8003734:	20000a7c 	.word	0x20000a7c
 8003738:	0800e898 	.word	0x0800e898
 800373c:	0800e8a0 	.word	0x0800e8a0

08003740 <eventRxTimeout>:
  * @brief  Process the RX Timeout event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxTimeout(pingPongFSM_t *const fsm)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Timeout\r\n", 18, HAL_MAX_DELAY);
 8003748:	f04f 33ff 	mov.w	r3, #4294967295
 800374c:	2212      	movs	r2, #18
 800374e:	4915      	ldr	r1, [pc, #84]	@ (80037a4 <eventRxTimeout+0x64>)
 8003750:	4815      	ldr	r0, [pc, #84]	@ (80037a8 <eventRxTimeout+0x68>)
 8003752:	f007 fab5 	bl	800acc0 <HAL_UART_Transmit>
  switch (fsm->state)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d002      	beq.n	8003764 <eventRxTimeout+0x24>
 800375e:	2b02      	cmp	r3, #2
 8003760:	d012      	beq.n	8003788 <eventRxTimeout+0x48>
        default:
          break;
      }
      break;
    default:
      break;
 8003762:	e01b      	b.n	800379c <eventRxTimeout+0x5c>
      switch (fsm->subState)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	785b      	ldrb	r3, [r3, #1]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d10b      	bne.n	8003784 <eventRxTimeout+0x44>
          HAL_Delay(fsm->randomDelay);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4618      	mov	r0, r3
 8003772:	f002 f91b 	bl	80059ac <HAL_Delay>
          enterMasterTx(fsm);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f8aa 	bl	80038d0 <enterMasterTx>
          fsm->subState = SSTATE_TX;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	705a      	strb	r2, [r3, #1]
          break;
 8003782:	e000      	b.n	8003786 <eventRxTimeout+0x46>
          break;
 8003784:	bf00      	nop
      break;
 8003786:	e009      	b.n	800379c <eventRxTimeout+0x5c>
      switch (fsm->subState)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d103      	bne.n	8003798 <eventRxTimeout+0x58>
          enterSlaveRx(fsm);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f86f 	bl	8003874 <enterSlaveRx>
          break;
 8003796:	e000      	b.n	800379a <eventRxTimeout+0x5a>
          break;
 8003798:	bf00      	nop
      break;
 800379a:	bf00      	nop
  }
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	0800e8bc 	.word	0x0800e8bc
 80037a8:	20000a7c 	.word	0x20000a7c

080037ac <eventRxError>:
  * @brief  Process the RX Error event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxError(pingPongFSM_t *const fsm)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event Rx Error\r\n", 16, HAL_MAX_DELAY);
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	2210      	movs	r2, #16
 80037ba:	4915      	ldr	r1, [pc, #84]	@ (8003810 <eventRxError+0x64>)
 80037bc:	4815      	ldr	r0, [pc, #84]	@ (8003814 <eventRxError+0x68>)
 80037be:	f007 fa7f 	bl	800acc0 <HAL_UART_Transmit>
  switch (fsm->state)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d002      	beq.n	80037d0 <eventRxError+0x24>
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d012      	beq.n	80037f4 <eventRxError+0x48>
        default:
          break;
      }
      break;
    default:
      break;
 80037ce:	e01b      	b.n	8003808 <eventRxError+0x5c>
      switch (fsm->subState)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	785b      	ldrb	r3, [r3, #1]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d10b      	bne.n	80037f0 <eventRxError+0x44>
          HAL_Delay(fsm->randomDelay);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 f8e5 	bl	80059ac <HAL_Delay>
          enterMasterTx(fsm);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f874 	bl	80038d0 <enterMasterTx>
          fsm->subState = SSTATE_TX;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	705a      	strb	r2, [r3, #1]
          break;
 80037ee:	e000      	b.n	80037f2 <eventRxError+0x46>
          break;
 80037f0:	bf00      	nop
      break;
 80037f2:	e009      	b.n	8003808 <eventRxError+0x5c>
      switch (fsm->subState)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	785b      	ldrb	r3, [r3, #1]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d103      	bne.n	8003804 <eventRxError+0x58>
          enterSlaveRx(fsm);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f839 	bl	8003874 <enterSlaveRx>
          break;
 8003802:	e000      	b.n	8003806 <eventRxError+0x5a>
          break;
 8003804:	bf00      	nop
      break;
 8003806:	bf00      	nop
  }
}
 8003808:	bf00      	nop
 800380a:	3708      	adds	r7, #8
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	0800e8d0 	.word	0x0800e8d0
 8003814:	20000a7c 	.word	0x20000a7c

08003818 <enterMasterRx>:
  * @brief  Entry actions for the RX sub-state of the Master state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterMasterRx(pingPongFSM_t *const fsm)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Master Rx start\r\n", 17, HAL_MAX_DELAY);
 8003820:	f04f 33ff 	mov.w	r3, #4294967295
 8003824:	2211      	movs	r2, #17
 8003826:	4910      	ldr	r1, [pc, #64]	@ (8003868 <enterMasterRx+0x50>)
 8003828:	4810      	ldr	r0, [pc, #64]	@ (800386c <enterMasterRx+0x54>)
 800382a:	f007 fa49 	bl	800acc0 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 800382e:	2300      	movs	r3, #0
 8003830:	2200      	movs	r2, #0
 8003832:	f240 2162 	movw	r1, #610	@ 0x262
 8003836:	f240 2062 	movw	r0, #610	@ 0x262
 800383a:	f001 fa9d 	bl	8004d78 <SUBGRF_SetDioIrqParams>
                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800383e:	2100      	movs	r1, #0
 8003840:	2001      	movs	r0, #1
 8003842:	f001 ff1f 	bl	8005684 <SUBGRF_SetSwitch>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8003846:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <enterMasterRx+0x58>)
 8003848:	22ff      	movs	r2, #255	@ 0xff
 800384a:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 800384c:	4808      	ldr	r0, [pc, #32]	@ (8003870 <enterMasterRx+0x58>)
 800384e:	f001 fcfb 	bl	8005248 <SUBGRF_SetPacketParams>
  SUBGRF_SetRx(fsm->rxTimeout << 6);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	019b      	lsls	r3, r3, #6
 8003858:	4618      	mov	r0, r3
 800385a:	f001 f995 	bl	8004b88 <SUBGRF_SetRx>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	0800e8e4 	.word	0x0800e8e4
 800386c:	20000a7c 	.word	0x20000a7c
 8003870:	200003ac 	.word	0x200003ac

08003874 <enterSlaveRx>:
  * @brief  Entry actions for the RX sub-state of the Slave state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterSlaveRx(pingPongFSM_t *const fsm)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Slave Rx start\r\n", 16, HAL_MAX_DELAY);
 800387c:	f04f 33ff 	mov.w	r3, #4294967295
 8003880:	2210      	movs	r2, #16
 8003882:	4910      	ldr	r1, [pc, #64]	@ (80038c4 <enterSlaveRx+0x50>)
 8003884:	4810      	ldr	r0, [pc, #64]	@ (80038c8 <enterSlaveRx+0x54>)
 8003886:	f007 fa1b 	bl	800acc0 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 800388a:	2300      	movs	r3, #0
 800388c:	2200      	movs	r2, #0
 800388e:	f240 2162 	movw	r1, #610	@ 0x262
 8003892:	f240 2062 	movw	r0, #610	@ 0x262
 8003896:	f001 fa6f 	bl	8004d78 <SUBGRF_SetDioIrqParams>
                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 800389a:	2100      	movs	r1, #0
 800389c:	2001      	movs	r0, #1
 800389e:	f001 fef1 	bl	8005684 <SUBGRF_SetSwitch>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 80038a2:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <enterSlaveRx+0x58>)
 80038a4:	22ff      	movs	r2, #255	@ 0xff
 80038a6:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 80038a8:	4808      	ldr	r0, [pc, #32]	@ (80038cc <enterSlaveRx+0x58>)
 80038aa:	f001 fccd 	bl	8005248 <SUBGRF_SetPacketParams>
  SUBGRF_SetRx(fsm->rxTimeout << 6);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	019b      	lsls	r3, r3, #6
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 f967 	bl	8004b88 <SUBGRF_SetRx>
}
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	0800e8f8 	.word	0x0800e8f8
 80038c8:	20000a7c 	.word	0x20000a7c
 80038cc:	200003ac 	.word	0x200003ac

080038d0 <enterMasterTx>:
  * @brief  Entry actions for the TX sub-state of the Master state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterMasterTx(pingPongFSM_t *const fsm)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(fsm->rxMargin);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4618      	mov	r0, r3
 80038de:	f002 f865 	bl	80059ac <HAL_Delay>

  HAL_UART_Transmit(&huart2, (uint8_t *)"...PING\r\n", 9, HAL_MAX_DELAY);
 80038e2:	f04f 33ff 	mov.w	r3, #4294967295
 80038e6:	2209      	movs	r2, #9
 80038e8:	4919      	ldr	r1, [pc, #100]	@ (8003950 <enterMasterTx+0x80>)
 80038ea:	481a      	ldr	r0, [pc, #104]	@ (8003954 <enterMasterTx+0x84>)
 80038ec:	f007 f9e8 	bl	800acc0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)"Master Tx start\r\n", 17, HAL_MAX_DELAY);
 80038f0:	f04f 33ff 	mov.w	r3, #4294967295
 80038f4:	2211      	movs	r2, #17
 80038f6:	4918      	ldr	r1, [pc, #96]	@ (8003958 <enterMasterTx+0x88>)
 80038f8:	4816      	ldr	r0, [pc, #88]	@ (8003954 <enterMasterTx+0x84>)
 80038fa:	f007 f9e1 	bl	800acc0 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 80038fe:	2300      	movs	r3, #0
 8003900:	2200      	movs	r2, #0
 8003902:	f240 2101 	movw	r1, #513	@ 0x201
 8003906:	f240 2001 	movw	r0, #513	@ 0x201
 800390a:	f001 fa35 	bl	8004d78 <SUBGRF_SetDioIrqParams>
                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 800390e:	2101      	movs	r1, #1
 8003910:	2001      	movs	r0, #1
 8003912:	f001 feb7 	bl	8005684 <SUBGRF_SetSwitch>
  // Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
  SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8003916:	f640 0089 	movw	r0, #2185	@ 0x889
 800391a:	f001 fdf5 	bl	8005508 <SUBGRF_ReadRegister>
 800391e:	4603      	mov	r3, r0
 8003920:	f043 0304 	orr.w	r3, r3, #4
 8003924:	b2db      	uxtb	r3, r3
 8003926:	4619      	mov	r1, r3
 8003928:	f640 0089 	movw	r0, #2185	@ 0x889
 800392c:	f001 fdd8 	bl	80054e0 <SUBGRF_WriteRegister>
  packetParams.Params.LoRa.PayloadLength = 0x4;
 8003930:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <enterMasterTx+0x8c>)
 8003932:	2204      	movs	r2, #4
 8003934:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 8003936:	4809      	ldr	r0, [pc, #36]	@ (800395c <enterMasterTx+0x8c>)
 8003938:	f001 fc86 	bl	8005248 <SUBGRF_SetPacketParams>
  SUBGRF_SendPayload((uint8_t *)"PING", 4, 0);
 800393c:	2200      	movs	r2, #0
 800393e:	2104      	movs	r1, #4
 8003940:	4807      	ldr	r0, [pc, #28]	@ (8003960 <enterMasterTx+0x90>)
 8003942:	f001 f891 	bl	8004a68 <SUBGRF_SendPayload>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	0800e90c 	.word	0x0800e90c
 8003954:	20000a7c 	.word	0x20000a7c
 8003958:	0800e918 	.word	0x0800e918
 800395c:	200003ac 	.word	0x200003ac
 8003960:	0800e8a0 	.word	0x0800e8a0

08003964 <enterSlaveTx>:
  * @brief  Entry actions for the TX sub-state of the Slave state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterSlaveTx(pingPongFSM_t *const fsm)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_Delay(fsm->rxMargin);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	4618      	mov	r0, r3
 8003972:	f002 f81b 	bl	80059ac <HAL_Delay>

  HAL_UART_Transmit(&huart2, (uint8_t *)"...PONG\r\n", 9, HAL_MAX_DELAY);
 8003976:	f04f 33ff 	mov.w	r3, #4294967295
 800397a:	2209      	movs	r2, #9
 800397c:	4919      	ldr	r1, [pc, #100]	@ (80039e4 <enterSlaveTx+0x80>)
 800397e:	481a      	ldr	r0, [pc, #104]	@ (80039e8 <enterSlaveTx+0x84>)
 8003980:	f007 f99e 	bl	800acc0 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)"Slave Tx start\r\n", 16, HAL_MAX_DELAY);
 8003984:	f04f 33ff 	mov.w	r3, #4294967295
 8003988:	2210      	movs	r2, #16
 800398a:	4918      	ldr	r1, [pc, #96]	@ (80039ec <enterSlaveTx+0x88>)
 800398c:	4816      	ldr	r0, [pc, #88]	@ (80039e8 <enterSlaveTx+0x84>)
 800398e:	f007 f997 	bl	800acc0 <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8003992:	2300      	movs	r3, #0
 8003994:	2200      	movs	r2, #0
 8003996:	f240 2101 	movw	r1, #513	@ 0x201
 800399a:	f240 2001 	movw	r0, #513	@ 0x201
 800399e:	f001 f9eb 	bl	8004d78 <SUBGRF_SetDioIrqParams>
                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 80039a2:	2101      	movs	r1, #1
 80039a4:	2001      	movs	r0, #1
 80039a6:	f001 fe6d 	bl	8005684 <SUBGRF_SetSwitch>
  // Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
  SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 80039aa:	f640 0089 	movw	r0, #2185	@ 0x889
 80039ae:	f001 fdab 	bl	8005508 <SUBGRF_ReadRegister>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4619      	mov	r1, r3
 80039bc:	f640 0089 	movw	r0, #2185	@ 0x889
 80039c0:	f001 fd8e 	bl	80054e0 <SUBGRF_WriteRegister>
  packetParams.Params.LoRa.PayloadLength = 0x4;
 80039c4:	4b0a      	ldr	r3, [pc, #40]	@ (80039f0 <enterSlaveTx+0x8c>)
 80039c6:	2204      	movs	r2, #4
 80039c8:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 80039ca:	4809      	ldr	r0, [pc, #36]	@ (80039f0 <enterSlaveTx+0x8c>)
 80039cc:	f001 fc3c 	bl	8005248 <SUBGRF_SetPacketParams>
  SUBGRF_SendPayload((uint8_t *)"PONG", 4, 0);
 80039d0:	2200      	movs	r2, #0
 80039d2:	2104      	movs	r1, #4
 80039d4:	4807      	ldr	r0, [pc, #28]	@ (80039f4 <enterSlaveTx+0x90>)
 80039d6:	f001 f847 	bl	8004a68 <SUBGRF_SendPayload>
}
 80039da:	bf00      	nop
 80039dc:	3708      	adds	r7, #8
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	0800e92c 	.word	0x0800e92c
 80039e8:	20000a7c 	.word	0x20000a7c
 80039ec:	0800e938 	.word	0x0800e938
 80039f0:	200003ac 	.word	0x200003ac
 80039f4:	0800e898 	.word	0x0800e898

080039f8 <transitionRxDone>:
  * @brief  Transition actions executed on every RX Done event (helper function)
  * @param  fsm pointer to FSM context
  * @retval None
  */
void transitionRxDone(pingPongFSM_t *const fsm)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b094      	sub	sp, #80	@ 0x50
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  PacketStatus_t packetStatus;
  char uartBuff[50];

  // Workaround 15.3 in DS.SX1261-2.W.APP (because following RX w/ timeout sequence)
  SUBGRF_WriteRegister(0x0920, 0x00);
 8003a00:	2100      	movs	r1, #0
 8003a02:	f44f 6012 	mov.w	r0, #2336	@ 0x920
 8003a06:	f001 fd6b 	bl	80054e0 <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8003a0a:	f640 1044 	movw	r0, #2372	@ 0x944
 8003a0e:	f001 fd7b 	bl	8005508 <SUBGRF_ReadRegister>
 8003a12:	4603      	mov	r3, r0
 8003a14:	f043 0302 	orr.w	r3, r3, #2
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	f640 1044 	movw	r0, #2372	@ 0x944
 8003a20:	f001 fd5e 	bl	80054e0 <SUBGRF_WriteRegister>

  SUBGRF_GetPayload((uint8_t *)fsm->rxBuffer, &fsm->rxSize, 0xFF);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f103 0010 	add.w	r0, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8003a30:	22ff      	movs	r2, #255	@ 0xff
 8003a32:	4619      	mov	r1, r3
 8003a34:	f000 fff6 	bl	8004a24 <SUBGRF_GetPayload>
  SUBGRF_GetPacketStatus(&packetStatus);
 8003a38:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 fce5 	bl	800540c <SUBGRF_GetPacketStatus>

  sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 8003a42:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8003a46:	461a      	mov	r2, r3
 8003a48:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 8003a4c:	f107 0008 	add.w	r0, r7, #8
 8003a50:	490a      	ldr	r1, [pc, #40]	@ (8003a7c <transitionRxDone+0x84>)
 8003a52:	f008 fc51 	bl	800c2f8 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fbe0 	bl	8000220 <strlen>
 8003a60:	4603      	mov	r3, r0
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	f107 0108 	add.w	r1, r7, #8
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	4804      	ldr	r0, [pc, #16]	@ (8003a80 <transitionRxDone+0x88>)
 8003a6e:	f007 f927 	bl	800acc0 <HAL_UART_Transmit>
}
 8003a72:	bf00      	nop
 8003a74:	3750      	adds	r7, #80	@ 0x50
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	0800e94c 	.word	0x0800e94c
 8003a80:	20000a7c 	.word	0x20000a7c

08003a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a88:	b672      	cpsid	i
}
 8003a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a8c:	bf00      	nop
 8003a8e:	e7fd      	b.n	8003a8c <Error_Handler+0x8>

08003a90 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003a94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <LL_APB1_GRP1_EnableClock>:
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003ab8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003abc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003abe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003acc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003ae4:	4b14      	ldr	r3, [pc, #80]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003ae6:	4a15      	ldr	r2, [pc, #84]	@ (8003b3c <MX_RTC_Init+0x5c>)
 8003ae8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003aea:	4b13      	ldr	r3, [pc, #76]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003af0:	4b11      	ldr	r3, [pc, #68]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003af2:	227f      	movs	r2, #127	@ 0x7f
 8003af4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003af6:	4b10      	ldr	r3, [pc, #64]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003af8:	22ff      	movs	r2, #255	@ 0xff
 8003afa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003afc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003b02:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003b08:	4b0b      	ldr	r3, [pc, #44]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003b10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b14:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003b16:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003b22:	4805      	ldr	r0, [pc, #20]	@ (8003b38 <MX_RTC_Init+0x58>)
 8003b24:	f005 feb0 	bl	8009888 <HAL_RTC_Init>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003b2e:	f7ff ffa9 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003b32:	bf00      	nop
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	200005e0 	.word	0x200005e0
 8003b3c:	40002800 	.word	0x40002800

08003b40 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b090      	sub	sp, #64	@ 0x40
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b48:	f107 0308 	add.w	r3, r7, #8
 8003b4c:	2238      	movs	r2, #56	@ 0x38
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f008 fc34 	bl	800c3be <memset>
  if(rtcHandle->Instance==RTC)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8003b94 <HAL_RTC_MspInit+0x54>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d115      	bne.n	8003b8c <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003b60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003b64:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003b66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b6c:	f107 0308 	add.w	r3, r7, #8
 8003b70:	4618      	mov	r0, r3
 8003b72:	f005 fd6f 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003b7c:	f7ff ff82 	bl	8003a84 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003b80:	f7ff ff86 	bl	8003a90 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003b84:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003b88:	f7ff ff92 	bl	8003ab0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	3740      	adds	r7, #64	@ 0x40
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40002800 	.word	0x40002800

08003b98 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003b9e:	f000 fa25 	bl	8003fec <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003ba2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	2178      	movs	r1, #120	@ 0x78
 8003baa:	485b      	ldr	r0, [pc, #364]	@ (8003d18 <SSD1306_Init+0x180>)
 8003bac:	f003 fede 	bl	800796c <HAL_I2C_IsDeviceReady>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	e0a9      	b.n	8003d0e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8003bba:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8003bbe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003bc0:	e002      	b.n	8003bc8 <SSD1306_Init+0x30>
		p--;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f9      	bne.n	8003bc2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003bce:	22ae      	movs	r2, #174	@ 0xae
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2078      	movs	r0, #120	@ 0x78
 8003bd4:	f000 fa84 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8003bd8:	2220      	movs	r2, #32
 8003bda:	2100      	movs	r1, #0
 8003bdc:	2078      	movs	r0, #120	@ 0x78
 8003bde:	f000 fa7f 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003be2:	2210      	movs	r2, #16
 8003be4:	2100      	movs	r1, #0
 8003be6:	2078      	movs	r0, #120	@ 0x78
 8003be8:	f000 fa7a 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003bec:	22b0      	movs	r2, #176	@ 0xb0
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2078      	movs	r0, #120	@ 0x78
 8003bf2:	f000 fa75 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003bf6:	22c8      	movs	r2, #200	@ 0xc8
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	2078      	movs	r0, #120	@ 0x78
 8003bfc:	f000 fa70 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003c00:	2200      	movs	r2, #0
 8003c02:	2100      	movs	r1, #0
 8003c04:	2078      	movs	r0, #120	@ 0x78
 8003c06:	f000 fa6b 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003c0a:	2210      	movs	r2, #16
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2078      	movs	r0, #120	@ 0x78
 8003c10:	f000 fa66 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003c14:	2240      	movs	r2, #64	@ 0x40
 8003c16:	2100      	movs	r1, #0
 8003c18:	2078      	movs	r0, #120	@ 0x78
 8003c1a:	f000 fa61 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003c1e:	2281      	movs	r2, #129	@ 0x81
 8003c20:	2100      	movs	r1, #0
 8003c22:	2078      	movs	r0, #120	@ 0x78
 8003c24:	f000 fa5c 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003c28:	22ff      	movs	r2, #255	@ 0xff
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	2078      	movs	r0, #120	@ 0x78
 8003c2e:	f000 fa57 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003c32:	22a1      	movs	r2, #161	@ 0xa1
 8003c34:	2100      	movs	r1, #0
 8003c36:	2078      	movs	r0, #120	@ 0x78
 8003c38:	f000 fa52 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003c3c:	22a6      	movs	r2, #166	@ 0xa6
 8003c3e:	2100      	movs	r1, #0
 8003c40:	2078      	movs	r0, #120	@ 0x78
 8003c42:	f000 fa4d 	bl	80040e0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8003c46:	22a8      	movs	r2, #168	@ 0xa8
 8003c48:	2100      	movs	r1, #0
 8003c4a:	2078      	movs	r0, #120	@ 0x78
 8003c4c:	f000 fa48 	bl	80040e0 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8003c50:	223f      	movs	r2, #63	@ 0x3f
 8003c52:	2100      	movs	r1, #0
 8003c54:	2078      	movs	r0, #120	@ 0x78
 8003c56:	f000 fa43 	bl	80040e0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003c5a:	22a4      	movs	r2, #164	@ 0xa4
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	2078      	movs	r0, #120	@ 0x78
 8003c60:	f000 fa3e 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003c64:	22d3      	movs	r2, #211	@ 0xd3
 8003c66:	2100      	movs	r1, #0
 8003c68:	2078      	movs	r0, #120	@ 0x78
 8003c6a:	f000 fa39 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	2078      	movs	r0, #120	@ 0x78
 8003c74:	f000 fa34 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003c78:	22d5      	movs	r2, #213	@ 0xd5
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	2078      	movs	r0, #120	@ 0x78
 8003c7e:	f000 fa2f 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003c82:	22f0      	movs	r2, #240	@ 0xf0
 8003c84:	2100      	movs	r1, #0
 8003c86:	2078      	movs	r0, #120	@ 0x78
 8003c88:	f000 fa2a 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003c8c:	22d9      	movs	r2, #217	@ 0xd9
 8003c8e:	2100      	movs	r1, #0
 8003c90:	2078      	movs	r0, #120	@ 0x78
 8003c92:	f000 fa25 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003c96:	2222      	movs	r2, #34	@ 0x22
 8003c98:	2100      	movs	r1, #0
 8003c9a:	2078      	movs	r0, #120	@ 0x78
 8003c9c:	f000 fa20 	bl	80040e0 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003ca0:	22da      	movs	r2, #218	@ 0xda
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	2078      	movs	r0, #120	@ 0x78
 8003ca6:	f000 fa1b 	bl	80040e0 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8003caa:	2212      	movs	r2, #18
 8003cac:	2100      	movs	r1, #0
 8003cae:	2078      	movs	r0, #120	@ 0x78
 8003cb0:	f000 fa16 	bl	80040e0 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003cb4:	22db      	movs	r2, #219	@ 0xdb
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	2078      	movs	r0, #120	@ 0x78
 8003cba:	f000 fa11 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	2078      	movs	r0, #120	@ 0x78
 8003cc4:	f000 fa0c 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003cc8:	228d      	movs	r2, #141	@ 0x8d
 8003cca:	2100      	movs	r1, #0
 8003ccc:	2078      	movs	r0, #120	@ 0x78
 8003cce:	f000 fa07 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003cd2:	2214      	movs	r2, #20
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2078      	movs	r0, #120	@ 0x78
 8003cd8:	f000 fa02 	bl	80040e0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003cdc:	22af      	movs	r2, #175	@ 0xaf
 8003cde:	2100      	movs	r1, #0
 8003ce0:	2078      	movs	r0, #120	@ 0x78
 8003ce2:	f000 f9fd 	bl	80040e0 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8003ce6:	222e      	movs	r2, #46	@ 0x2e
 8003ce8:	2100      	movs	r1, #0
 8003cea:	2078      	movs	r0, #120	@ 0x78
 8003cec:	f000 f9f8 	bl	80040e0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003cf0:	2000      	movs	r0, #0
 8003cf2:	f000 f843 	bl	8003d7c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8003cf6:	f000 f813 	bl	8003d20 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8003cfa:	4b08      	ldr	r3, [pc, #32]	@ (8003d1c <SSD1306_Init+0x184>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003d00:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <SSD1306_Init+0x184>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003d06:	4b05      	ldr	r3, [pc, #20]	@ (8003d1c <SSD1306_Init+0x184>)
 8003d08:	2201      	movs	r2, #1
 8003d0a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8003d0c:	2301      	movs	r3, #1
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000300 	.word	0x20000300
 8003d1c:	20000a18 	.word	0x20000a18

08003d20 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003d26:	2300      	movs	r3, #0
 8003d28:	71fb      	strb	r3, [r7, #7]
 8003d2a:	e01d      	b.n	8003d68 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	3b50      	subs	r3, #80	@ 0x50
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	461a      	mov	r2, r3
 8003d34:	2100      	movs	r1, #0
 8003d36:	2078      	movs	r0, #120	@ 0x78
 8003d38:	f000 f9d2 	bl	80040e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2100      	movs	r1, #0
 8003d40:	2078      	movs	r0, #120	@ 0x78
 8003d42:	f000 f9cd 	bl	80040e0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003d46:	2210      	movs	r2, #16
 8003d48:	2100      	movs	r1, #0
 8003d4a:	2078      	movs	r0, #120	@ 0x78
 8003d4c:	f000 f9c8 	bl	80040e0 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003d50:	79fb      	ldrb	r3, [r7, #7]
 8003d52:	01db      	lsls	r3, r3, #7
 8003d54:	4a08      	ldr	r2, [pc, #32]	@ (8003d78 <SSD1306_UpdateScreen+0x58>)
 8003d56:	441a      	add	r2, r3
 8003d58:	2380      	movs	r3, #128	@ 0x80
 8003d5a:	2140      	movs	r1, #64	@ 0x40
 8003d5c:	2078      	movs	r0, #120	@ 0x78
 8003d5e:	f000 f959 	bl	8004014 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	3301      	adds	r3, #1
 8003d66:	71fb      	strb	r3, [r7, #7]
 8003d68:	79fb      	ldrb	r3, [r7, #7]
 8003d6a:	2b07      	cmp	r3, #7
 8003d6c:	d9de      	bls.n	8003d2c <SSD1306_UpdateScreen+0xc>
	}
}
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000618 	.word	0x20000618

08003d7c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	4603      	mov	r3, r0
 8003d84:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <SSD1306_Fill+0x14>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	e000      	b.n	8003d92 <SSD1306_Fill+0x16>
 8003d90:	23ff      	movs	r3, #255	@ 0xff
 8003d92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d96:	4619      	mov	r1, r3
 8003d98:	4803      	ldr	r0, [pc, #12]	@ (8003da8 <SSD1306_Fill+0x2c>)
 8003d9a:	f008 fb10 	bl	800c3be <memset>
}
 8003d9e:	bf00      	nop
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000618 	.word	0x20000618

08003dac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	80fb      	strh	r3, [r7, #6]
 8003db6:	460b      	mov	r3, r1
 8003db8:	80bb      	strh	r3, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	70fb      	strb	r3, [r7, #3]
	if (
 8003dbe:	88fb      	ldrh	r3, [r7, #6]
 8003dc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dc2:	d848      	bhi.n	8003e56 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003dc4:	88bb      	ldrh	r3, [r7, #4]
 8003dc6:	2b3f      	cmp	r3, #63	@ 0x3f
 8003dc8:	d845      	bhi.n	8003e56 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003dca:	4b25      	ldr	r3, [pc, #148]	@ (8003e60 <SSD1306_DrawPixel+0xb4>)
 8003dcc:	791b      	ldrb	r3, [r3, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d006      	beq.n	8003de0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003dd2:	78fb      	ldrb	r3, [r7, #3]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d11a      	bne.n	8003e1c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	88bb      	ldrh	r3, [r7, #4]
 8003dea:	08db      	lsrs	r3, r3, #3
 8003dec:	b298      	uxth	r0, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	01db      	lsls	r3, r3, #7
 8003df2:	4413      	add	r3, r2
 8003df4:	4a1b      	ldr	r2, [pc, #108]	@ (8003e64 <SSD1306_DrawPixel+0xb8>)
 8003df6:	5cd3      	ldrb	r3, [r2, r3]
 8003df8:	b25a      	sxtb	r2, r3
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	2101      	movs	r1, #1
 8003e02:	fa01 f303 	lsl.w	r3, r1, r3
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	b259      	sxtb	r1, r3
 8003e0c:	88fa      	ldrh	r2, [r7, #6]
 8003e0e:	4603      	mov	r3, r0
 8003e10:	01db      	lsls	r3, r3, #7
 8003e12:	4413      	add	r3, r2
 8003e14:	b2c9      	uxtb	r1, r1
 8003e16:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <SSD1306_DrawPixel+0xb8>)
 8003e18:	54d1      	strb	r1, [r2, r3]
 8003e1a:	e01d      	b.n	8003e58 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003e1c:	88fa      	ldrh	r2, [r7, #6]
 8003e1e:	88bb      	ldrh	r3, [r7, #4]
 8003e20:	08db      	lsrs	r3, r3, #3
 8003e22:	b298      	uxth	r0, r3
 8003e24:	4603      	mov	r3, r0
 8003e26:	01db      	lsls	r3, r3, #7
 8003e28:	4413      	add	r3, r2
 8003e2a:	4a0e      	ldr	r2, [pc, #56]	@ (8003e64 <SSD1306_DrawPixel+0xb8>)
 8003e2c:	5cd3      	ldrb	r3, [r2, r3]
 8003e2e:	b25a      	sxtb	r2, r3
 8003e30:	88bb      	ldrh	r3, [r7, #4]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	2101      	movs	r1, #1
 8003e38:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3c:	b25b      	sxtb	r3, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	b25b      	sxtb	r3, r3
 8003e42:	4013      	ands	r3, r2
 8003e44:	b259      	sxtb	r1, r3
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	4603      	mov	r3, r0
 8003e4a:	01db      	lsls	r3, r3, #7
 8003e4c:	4413      	add	r3, r2
 8003e4e:	b2c9      	uxtb	r1, r1
 8003e50:	4a04      	ldr	r2, [pc, #16]	@ (8003e64 <SSD1306_DrawPixel+0xb8>)
 8003e52:	54d1      	strb	r1, [r2, r3]
 8003e54:	e000      	b.n	8003e58 <SSD1306_DrawPixel+0xac>
		return;
 8003e56:	bf00      	nop
	}
}
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr
 8003e60:	20000a18 	.word	0x20000a18
 8003e64:	20000618 	.word	0x20000618

08003e68 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	460a      	mov	r2, r1
 8003e72:	80fb      	strh	r3, [r7, #6]
 8003e74:	4613      	mov	r3, r2
 8003e76:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003e78:	4a05      	ldr	r2, [pc, #20]	@ (8003e90 <SSD1306_GotoXY+0x28>)
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003e7e:	4a04      	ldr	r2, [pc, #16]	@ (8003e90 <SSD1306_GotoXY+0x28>)
 8003e80:	88bb      	ldrh	r3, [r7, #4]
 8003e82:	8053      	strh	r3, [r2, #2]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bc80      	pop	{r7}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000a18 	.word	0x20000a18

08003e94 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	6039      	str	r1, [r7, #0]
 8003e9e:	71fb      	strb	r3, [r7, #7]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003ea4:	4b39      	ldr	r3, [pc, #228]	@ (8003f8c <SSD1306_Putc+0xf8>)
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	4413      	add	r3, r2
	if (
 8003eb0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003eb2:	dc07      	bgt.n	8003ec4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003eb4:	4b35      	ldr	r3, [pc, #212]	@ (8003f8c <SSD1306_Putc+0xf8>)
 8003eb6:	885b      	ldrh	r3, [r3, #2]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	785b      	ldrb	r3, [r3, #1]
 8003ebe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003ec0:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ec2:	dd01      	ble.n	8003ec8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	e05d      	b.n	8003f84 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e04b      	b.n	8003f66 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	3b20      	subs	r3, #32
 8003ed6:	6839      	ldr	r1, [r7, #0]
 8003ed8:	7849      	ldrb	r1, [r1, #1]
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	4619      	mov	r1, r3
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	440b      	add	r3, r1
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003eec:	2300      	movs	r3, #0
 8003eee:	613b      	str	r3, [r7, #16]
 8003ef0:	e030      	b.n	8003f54 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d010      	beq.n	8003f24 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003f02:	4b22      	ldr	r3, [pc, #136]	@ (8003f8c <SSD1306_Putc+0xf8>)
 8003f04:	881a      	ldrh	r2, [r3, #0]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	4413      	add	r3, r2
 8003f0c:	b298      	uxth	r0, r3
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f8c <SSD1306_Putc+0xf8>)
 8003f10:	885a      	ldrh	r2, [r3, #2]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	79ba      	ldrb	r2, [r7, #6]
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f7ff ff45 	bl	8003dac <SSD1306_DrawPixel>
 8003f22:	e014      	b.n	8003f4e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003f24:	4b19      	ldr	r3, [pc, #100]	@ (8003f8c <SSD1306_Putc+0xf8>)
 8003f26:	881a      	ldrh	r2, [r3, #0]
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	b298      	uxth	r0, r3
 8003f30:	4b16      	ldr	r3, [pc, #88]	@ (8003f8c <SSD1306_Putc+0xf8>)
 8003f32:	885a      	ldrh	r2, [r3, #2]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	4413      	add	r3, r2
 8003f3a:	b299      	uxth	r1, r3
 8003f3c:	79bb      	ldrb	r3, [r7, #6]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	bf0c      	ite	eq
 8003f42:	2301      	moveq	r3, #1
 8003f44:	2300      	movne	r3, #0
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f7ff ff2f 	bl	8003dac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	3301      	adds	r3, #1
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d3c8      	bcc.n	8003ef2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	3301      	adds	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d3ad      	bcc.n	8003ece <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003f72:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <SSD1306_Putc+0xf8>)
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	7812      	ldrb	r2, [r2, #0]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	4b03      	ldr	r3, [pc, #12]	@ (8003f8c <SSD1306_Putc+0xf8>)
 8003f80:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8003f82:	79fb      	ldrb	r3, [r7, #7]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000a18 	.word	0x20000a18

08003f90 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003f9e:	e012      	b.n	8003fc6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	79fa      	ldrb	r2, [r7, #7]
 8003fa6:	68b9      	ldr	r1, [r7, #8]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff73 	bl	8003e94 <SSD1306_Putc>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d002      	beq.n	8003fc0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	e008      	b.n	8003fd2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e8      	bne.n	8003fa0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003fde:	2000      	movs	r0, #0
 8003fe0:	f7ff fecc 	bl	8003d7c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003fe4:	f7ff fe9c 	bl	8003d20 <SSD1306_UpdateScreen>
}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}

08003fec <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	@ (8004010 <ssd1306_I2C_Init+0x24>)
 8003ff4:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003ff6:	e002      	b.n	8003ffe <ssd1306_I2C_Init+0x12>
		p--;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1f9      	bne.n	8003ff8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004004:	bf00      	nop
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr
 8004010:	0003d090 	.word	0x0003d090

08004014 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b0c7      	sub	sp, #284	@ 0x11c
 8004018:	af02      	add	r7, sp, #8
 800401a:	4604      	mov	r4, r0
 800401c:	4608      	mov	r0, r1
 800401e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8004022:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8004026:	600a      	str	r2, [r1, #0]
 8004028:	4619      	mov	r1, r3
 800402a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800402e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8004032:	4622      	mov	r2, r4
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800403a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800403e:	4602      	mov	r2, r0
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004046:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800404a:	460a      	mov	r2, r1
 800404c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800404e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8004052:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004056:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800405a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800405e:	7812      	ldrb	r2, [r2, #0]
 8004060:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8004062:	2300      	movs	r3, #0
 8004064:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004068:	e015      	b.n	8004096 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800406a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800406e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004072:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	441a      	add	r2, r3
 800407a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800407e:	3301      	adds	r3, #1
 8004080:	7811      	ldrb	r1, [r2, #0]
 8004082:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8004086:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800408a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800408c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8004090:	3301      	adds	r3, #1
 8004092:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8004096:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800409a:	b29b      	uxth	r3, r3
 800409c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80040a0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80040a4:	8812      	ldrh	r2, [r2, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d8df      	bhi.n	800406a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 80040aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040ae:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	b299      	uxth	r1, r3
 80040b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80040ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	3301      	adds	r3, #1
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f107 020c 	add.w	r2, r7, #12
 80040c8:	200a      	movs	r0, #10
 80040ca:	9000      	str	r0, [sp, #0]
 80040cc:	4803      	ldr	r0, [pc, #12]	@ (80040dc <ssd1306_I2C_WriteMulti+0xc8>)
 80040ce:	f003 f92b 	bl	8007328 <HAL_I2C_Master_Transmit>
}
 80040d2:	bf00      	nop
 80040d4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd90      	pop	{r4, r7, pc}
 80040dc:	20000300 	.word	0x20000300

080040e0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	4603      	mov	r3, r0
 80040e8:	71fb      	strb	r3, [r7, #7]
 80040ea:	460b      	mov	r3, r1
 80040ec:	71bb      	strb	r3, [r7, #6]
 80040ee:	4613      	mov	r3, r2
 80040f0:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80040f2:	79bb      	ldrb	r3, [r7, #6]
 80040f4:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80040f6:	797b      	ldrb	r3, [r7, #5]
 80040f8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 80040fa:	79fb      	ldrb	r3, [r7, #7]
 80040fc:	b299      	uxth	r1, r3
 80040fe:	f107 020c 	add.w	r2, r7, #12
 8004102:	230a      	movs	r3, #10
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	2302      	movs	r3, #2
 8004108:	4803      	ldr	r0, [pc, #12]	@ (8004118 <ssd1306_I2C_Write+0x38>)
 800410a:	f003 f90d 	bl	8007328 <HAL_I2C_Master_Transmit>
}
 800410e:	bf00      	nop
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000300 	.word	0x20000300

0800411c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	bc80      	pop	{r7}
 8004126:	4770      	bx	lr

08004128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <NMI_Handler+0x4>

08004130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <HardFault_Handler+0x4>

08004138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <MemManage_Handler+0x4>

08004140 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004144:	bf00      	nop
 8004146:	e7fd      	b.n	8004144 <BusFault_Handler+0x4>

08004148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800414c:	bf00      	nop
 800414e:	e7fd      	b.n	800414c <UsageFault_Handler+0x4>

08004150 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004178:	f001 fbfc 	bl	8005974 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}

08004180 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8004184:	4802      	ldr	r0, [pc, #8]	@ (8004190 <SUBGHZ_Radio_IRQHandler+0x10>)
 8004186:	f006 f88f 	bl	800a2a8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000a20 	.word	0x20000a20

08004194 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800419c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80041a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80041ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4013      	ands	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80041b8:	68fb      	ldr	r3, [r7, #12]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80041c8:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <MX_SUBGHZ_Init+0x20>)
 80041ca:	2208      	movs	r2, #8
 80041cc:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80041ce:	4805      	ldr	r0, [pc, #20]	@ (80041e4 <MX_SUBGHZ_Init+0x20>)
 80041d0:	f005 fde8 	bl	8009da4 <HAL_SUBGHZ_Init>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80041da:	f7ff fc53 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000a20 	.word	0x20000a20

080041e8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80041f0:	2001      	movs	r0, #1
 80041f2:	f7ff ffcf 	bl	8004194 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80041f6:	2200      	movs	r2, #0
 80041f8:	2100      	movs	r1, #0
 80041fa:	2032      	movs	r0, #50	@ 0x32
 80041fc:	f002 fd2b 	bl	8006c56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8004200:	2032      	movs	r0, #50	@ 0x32
 8004202:	f002 fd42 	bl	8006c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800420e:	b480      	push	{r7}
 8004210:	af00      	add	r7, sp, #0
  return 1;
 8004212:	2301      	movs	r3, #1
}
 8004214:	4618      	mov	r0, r3
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr

0800421c <_kill>:

int _kill(int pid, int sig)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004226:	f008 f92f 	bl	800c488 <__errno>
 800422a:	4603      	mov	r3, r0
 800422c:	2216      	movs	r2, #22
 800422e:	601a      	str	r2, [r3, #0]
  return -1;
 8004230:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004234:	4618      	mov	r0, r3
 8004236:	3708      	adds	r7, #8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <_exit>:

void _exit (int status)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004244:	f04f 31ff 	mov.w	r1, #4294967295
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ffe7 	bl	800421c <_kill>
  while (1) {}    /* Make sure we hang here */
 800424e:	bf00      	nop
 8004250:	e7fd      	b.n	800424e <_exit+0x12>

08004252 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425e:	2300      	movs	r3, #0
 8004260:	617b      	str	r3, [r7, #20]
 8004262:	e00a      	b.n	800427a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004264:	f3af 8000 	nop.w
 8004268:	4601      	mov	r1, r0
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	60ba      	str	r2, [r7, #8]
 8004270:	b2ca      	uxtb	r2, r1
 8004272:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	3301      	adds	r3, #1
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	429a      	cmp	r2, r3
 8004280:	dbf0      	blt.n	8004264 <_read+0x12>
  }

  return len;
 8004282:	687b      	ldr	r3, [r7, #4]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004298:	2300      	movs	r3, #0
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e009      	b.n	80042b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	60ba      	str	r2, [r7, #8]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3301      	adds	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	dbf1      	blt.n	800429e <_write+0x12>
  }
  return len;
 80042ba:	687b      	ldr	r3, [r7, #4]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <_close>:

int _close(int file)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bc80      	pop	{r7}
 80042d8:	4770      	bx	lr

080042da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042da:	b480      	push	{r7}
 80042dc:	b083      	sub	sp, #12
 80042de:	af00      	add	r7, sp, #0
 80042e0:	6078      	str	r0, [r7, #4]
 80042e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042ea:	605a      	str	r2, [r3, #4]
  return 0;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr

080042f8 <_isatty>:

int _isatty(int file)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004300:	2301      	movs	r3, #1
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	bc80      	pop	{r7}
 800430a:	4770      	bx	lr

0800430c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3714      	adds	r7, #20
 800431e:	46bd      	mov	sp, r7
 8004320:	bc80      	pop	{r7}
 8004322:	4770      	bx	lr

08004324 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800432c:	4a14      	ldr	r2, [pc, #80]	@ (8004380 <_sbrk+0x5c>)
 800432e:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <_sbrk+0x60>)
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004338:	4b13      	ldr	r3, [pc, #76]	@ (8004388 <_sbrk+0x64>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004340:	4b11      	ldr	r3, [pc, #68]	@ (8004388 <_sbrk+0x64>)
 8004342:	4a12      	ldr	r2, [pc, #72]	@ (800438c <_sbrk+0x68>)
 8004344:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004346:	4b10      	ldr	r3, [pc, #64]	@ (8004388 <_sbrk+0x64>)
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	429a      	cmp	r2, r3
 8004352:	d207      	bcs.n	8004364 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004354:	f008 f898 	bl	800c488 <__errno>
 8004358:	4603      	mov	r3, r0
 800435a:	220c      	movs	r2, #12
 800435c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800435e:	f04f 33ff 	mov.w	r3, #4294967295
 8004362:	e009      	b.n	8004378 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004364:	4b08      	ldr	r3, [pc, #32]	@ (8004388 <_sbrk+0x64>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800436a:	4b07      	ldr	r3, [pc, #28]	@ (8004388 <_sbrk+0x64>)
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	4a05      	ldr	r2, [pc, #20]	@ (8004388 <_sbrk+0x64>)
 8004374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004376:	68fb      	ldr	r3, [r7, #12]
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	20010000 	.word	0x20010000
 8004384:	00000400 	.word	0x00000400
 8004388:	20000a2c 	.word	0x20000a2c
 800438c:	20000c70 	.word	0x20000c70

08004390 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr

0800439c <LL_APB1_GRP1_EnableClock>:
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80043a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80043b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4013      	ands	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043c0:	68fb      	ldr	r3, [r7, #12]
}
 80043c2:	bf00      	nop
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr

080043cc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043d2:	f107 0310 	add.w	r3, r7, #16
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e0:	1d3b      	adds	r3, r7, #4
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]
 80043e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80043ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004464 <MX_TIM2_Init+0x98>)
 80043ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80043f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80043f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004464 <MX_TIM2_Init+0x98>)
 80043f4:	222f      	movs	r2, #47	@ 0x2f
 80043f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004464 <MX_TIM2_Init+0x98>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80043fe:	4b19      	ldr	r3, [pc, #100]	@ (8004464 <MX_TIM2_Init+0x98>)
 8004400:	f04f 32ff 	mov.w	r2, #4294967295
 8004404:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004406:	4b17      	ldr	r3, [pc, #92]	@ (8004464 <MX_TIM2_Init+0x98>)
 8004408:	2200      	movs	r2, #0
 800440a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440c:	4b15      	ldr	r3, [pc, #84]	@ (8004464 <MX_TIM2_Init+0x98>)
 800440e:	2200      	movs	r2, #0
 8004410:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004412:	4814      	ldr	r0, [pc, #80]	@ (8004464 <MX_TIM2_Init+0x98>)
 8004414:	f006 f8e6 	bl	800a5e4 <HAL_TIM_Base_Init>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800441e:	f7ff fb31 	bl	8003a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004422:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004426:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004428:	f107 0310 	add.w	r3, r7, #16
 800442c:	4619      	mov	r1, r3
 800442e:	480d      	ldr	r0, [pc, #52]	@ (8004464 <MX_TIM2_Init+0x98>)
 8004430:	f006 f974 	bl	800a71c <HAL_TIM_ConfigClockSource>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d001      	beq.n	800443e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800443a:	f7ff fb23 	bl	8003a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800443e:	2300      	movs	r3, #0
 8004440:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004446:	1d3b      	adds	r3, r7, #4
 8004448:	4619      	mov	r1, r3
 800444a:	4806      	ldr	r0, [pc, #24]	@ (8004464 <MX_TIM2_Init+0x98>)
 800444c:	f006 fb2a 	bl	800aaa4 <HAL_TIMEx_MasterConfigSynchronization>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004456:	f7ff fb15 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800445a:	bf00      	nop
 800445c:	3720      	adds	r7, #32
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	20000a30 	.word	0x20000a30

08004468 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004478:	d102      	bne.n	8004480 <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800447a:	2001      	movs	r0, #1
 800447c:	f7ff ff8e 	bl	800439c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004480:	bf00      	nop
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <LL_AHB2_GRP1_EnableClock>:
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004494:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004496:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4313      	orrs	r3, r2
 800449e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80044a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4013      	ands	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80044ac:	68fb      	ldr	r3, [r7, #12]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <LL_APB1_GRP1_EnableClock>:
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80044c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80044c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80044d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4013      	ands	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80044dc:	68fb      	ldr	r3, [r7, #12]
}
 80044de:	bf00      	nop
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <LL_APB1_GRP1_DisableClock>:
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80044f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	43db      	mvns	r3, r3
 80044fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80044fe:	4013      	ands	r3, r2
 8004500:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004510:	4b22      	ldr	r3, [pc, #136]	@ (800459c <MX_USART2_UART_Init+0x90>)
 8004512:	4a23      	ldr	r2, [pc, #140]	@ (80045a0 <MX_USART2_UART_Init+0x94>)
 8004514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004516:	4b21      	ldr	r3, [pc, #132]	@ (800459c <MX_USART2_UART_Init+0x90>)
 8004518:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800451c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800451e:	4b1f      	ldr	r3, [pc, #124]	@ (800459c <MX_USART2_UART_Init+0x90>)
 8004520:	2200      	movs	r2, #0
 8004522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004524:	4b1d      	ldr	r3, [pc, #116]	@ (800459c <MX_USART2_UART_Init+0x90>)
 8004526:	2200      	movs	r2, #0
 8004528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800452a:	4b1c      	ldr	r3, [pc, #112]	@ (800459c <MX_USART2_UART_Init+0x90>)
 800452c:	2200      	movs	r2, #0
 800452e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004530:	4b1a      	ldr	r3, [pc, #104]	@ (800459c <MX_USART2_UART_Init+0x90>)
 8004532:	220c      	movs	r2, #12
 8004534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004536:	4b19      	ldr	r3, [pc, #100]	@ (800459c <MX_USART2_UART_Init+0x90>)
 8004538:	2200      	movs	r2, #0
 800453a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800453c:	4b17      	ldr	r3, [pc, #92]	@ (800459c <MX_USART2_UART_Init+0x90>)
 800453e:	2200      	movs	r2, #0
 8004540:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004542:	4b16      	ldr	r3, [pc, #88]	@ (800459c <MX_USART2_UART_Init+0x90>)
 8004544:	2200      	movs	r2, #0
 8004546:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004548:	4b14      	ldr	r3, [pc, #80]	@ (800459c <MX_USART2_UART_Init+0x90>)
 800454a:	2200      	movs	r2, #0
 800454c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800454e:	4b13      	ldr	r3, [pc, #76]	@ (800459c <MX_USART2_UART_Init+0x90>)
 8004550:	2200      	movs	r2, #0
 8004552:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004554:	4811      	ldr	r0, [pc, #68]	@ (800459c <MX_USART2_UART_Init+0x90>)
 8004556:	f006 fb24 	bl	800aba2 <HAL_UART_Init>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004560:	f7ff fa90 	bl	8003a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004564:	2100      	movs	r1, #0
 8004566:	480d      	ldr	r0, [pc, #52]	@ (800459c <MX_USART2_UART_Init+0x90>)
 8004568:	f007 f893 	bl	800b692 <HAL_UARTEx_SetTxFifoThreshold>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8004572:	f7ff fa87 	bl	8003a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004576:	2100      	movs	r1, #0
 8004578:	4808      	ldr	r0, [pc, #32]	@ (800459c <MX_USART2_UART_Init+0x90>)
 800457a:	f007 f8c8 	bl	800b70e <HAL_UARTEx_SetRxFifoThreshold>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8004584:	f7ff fa7e 	bl	8003a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004588:	4804      	ldr	r0, [pc, #16]	@ (800459c <MX_USART2_UART_Init+0x90>)
 800458a:	f007 f84a 	bl	800b622 <HAL_UARTEx_DisableFifoMode>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8004594:	f7ff fa76 	bl	8003a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000a7c 	.word	0x20000a7c
 80045a0:	40004400 	.word	0x40004400

080045a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b096      	sub	sp, #88	@ 0x58
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80045b0:	2200      	movs	r2, #0
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	609a      	str	r2, [r3, #8]
 80045b8:	60da      	str	r2, [r3, #12]
 80045ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80045bc:	f107 030c 	add.w	r3, r7, #12
 80045c0:	2238      	movs	r2, #56	@ 0x38
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f007 fefa 	bl	800c3be <memset>
  if(uartHandle->Instance==USART2)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a17      	ldr	r2, [pc, #92]	@ (800462c <HAL_UART_MspInit+0x88>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d126      	bne.n	8004622 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80045d4:	2302      	movs	r3, #2
 80045d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80045d8:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 80045dc:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045de:	f107 030c 	add.w	r3, r7, #12
 80045e2:	4618      	mov	r0, r3
 80045e4:	f005 f836 	bl	8009654 <HAL_RCCEx_PeriphCLKConfig>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80045ee:	f7ff fa49 	bl	8003a84 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80045f2:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80045f6:	f7ff ff5f 	bl	80044b8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045fa:	2001      	movs	r0, #1
 80045fc:	f7ff ff44 	bl	8004488 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8004600:	230c      	movs	r3, #12
 8004602:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004604:	2302      	movs	r3, #2
 8004606:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
 800460a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460c:	2300      	movs	r3, #0
 800460e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004610:	2307      	movs	r3, #7
 8004612:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004614:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8004618:	4619      	mov	r1, r3
 800461a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800461e:	f002 fb4f 	bl	8006cc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004622:	bf00      	nop
 8004624:	3758      	adds	r7, #88	@ 0x58
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40004400 	.word	0x40004400

08004630 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a07      	ldr	r2, [pc, #28]	@ (800465c <HAL_UART_MspDeInit+0x2c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d108      	bne.n	8004654 <HAL_UART_MspDeInit+0x24>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8004642:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004646:	f7ff ff4f 	bl	80044e8 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, T_VCP_RX_Pin|T_VCP_RXA2_Pin);
 800464a:	210c      	movs	r1, #12
 800464c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004650:	f002 fc96 	bl	8006f80 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40004400 	.word	0x40004400

08004660 <Reset_Handler>:
  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

  ldr   r0, =_estack
 8004660:	480d      	ldr	r0, [pc, #52]	@ (8004698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004662:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004664:	f7ff fe94 	bl	8004390 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004668:	480c      	ldr	r0, [pc, #48]	@ (800469c <LoopForever+0x6>)
  ldr r1, =_edata
 800466a:	490d      	ldr	r1, [pc, #52]	@ (80046a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800466c:	4a0d      	ldr	r2, [pc, #52]	@ (80046a4 <LoopForever+0xe>)
  movs r3, #0
 800466e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004670:	e002      	b.n	8004678 <LoopCopyDataInit>

08004672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004676:	3304      	adds	r3, #4

08004678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800467a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800467c:	d3f9      	bcc.n	8004672 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800467e:	4a0a      	ldr	r2, [pc, #40]	@ (80046a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004680:	4c0a      	ldr	r4, [pc, #40]	@ (80046ac <LoopForever+0x16>)
  movs r3, #0
 8004682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004684:	e001      	b.n	800468a <LoopFillZerobss>

08004686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004688:	3204      	adds	r2, #4

0800468a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800468a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800468c:	d3fb      	bcc.n	8004686 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800468e:	f007 ff01 	bl	800c494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004692:	f7fe f855 	bl	8002740 <main>

08004696 <LoopForever>:

LoopForever:
    b LoopForever
 8004696:	e7fe      	b.n	8004696 <LoopForever>
  ldr   r0, =_estack
 8004698:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800469c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046a0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80046a4:	0800f560 	.word	0x0800f560
  ldr r2, =_sbss
 80046a8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80046ac:	20000c70 	.word	0x20000c70

080046b0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046b0:	e7fe      	b.n	80046b0 <ADC_IRQHandler>
	...

080046b4 <BSP_LED_On>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	4a07      	ldr	r2, [pc, #28]	@ (80046e0 <BSP_LED_On+0x2c>)
 80046c2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	4a06      	ldr	r2, [pc, #24]	@ (80046e4 <BSP_LED_On+0x30>)
 80046ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046ce:	2201      	movs	r2, #1
 80046d0:	4619      	mov	r1, r3
 80046d2:	f002 fd3a 	bl	800714a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000018 	.word	0x20000018
 80046e4:	0800f1ac 	.word	0x0800f1ac

080046e8 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	4a07      	ldr	r2, [pc, #28]	@ (8004714 <BSP_LED_Off+0x2c>)
 80046f6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80046fa:	79fb      	ldrb	r3, [r7, #7]
 80046fc:	4a06      	ldr	r2, [pc, #24]	@ (8004718 <BSP_LED_Off+0x30>)
 80046fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004702:	2200      	movs	r2, #0
 8004704:	4619      	mov	r1, r3
 8004706:	f002 fd20 	bl	800714a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	20000018 	.word	0x20000018
 8004718:	0800f1ac 	.word	0x0800f1ac

0800471c <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	4603      	mov	r3, r0
 8004724:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	4a07      	ldr	r2, [pc, #28]	@ (8004748 <BSP_LED_Toggle+0x2c>)
 800472a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800472e:	79fb      	ldrb	r3, [r7, #7]
 8004730:	4906      	ldr	r1, [pc, #24]	@ (800474c <BSP_LED_Toggle+0x30>)
 8004732:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f002 fd1d 	bl	8007178 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	20000018 	.word	0x20000018
 800474c:	0800f1ac 	.word	0x0800f1ac

08004750 <LL_AHB2_GRP1_EnableClock>:
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800475c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800475e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4313      	orrs	r3, r2
 8004766:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800476c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4013      	ands	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004774:	68fb      	ldr	r3, [r7, #12]
}
 8004776:	bf00      	nop
 8004778:	3714      	adds	r7, #20
 800477a:	46bd      	mov	sp, r7
 800477c:	bc80      	pop	{r7}
 800477e:	4770      	bx	lr

08004780 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8004786:	1d3b      	adds	r3, r7, #4
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	609a      	str	r2, [r3, #8]
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8004794:	2004      	movs	r0, #4
 8004796:	f7ff ffdb 	bl	8004750 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800479a:	2310      	movs	r3, #16
 800479c:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800479e:	2301      	movs	r3, #1
 80047a0:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047a6:	2303      	movs	r3, #3
 80047a8:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80047aa:	1d3b      	adds	r3, r7, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4812      	ldr	r0, [pc, #72]	@ (80047f8 <BSP_RADIO_Init+0x78>)
 80047b0:	f002 fa86 	bl	8006cc0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80047b4:	2320      	movs	r3, #32
 80047b6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80047b8:	1d3b      	adds	r3, r7, #4
 80047ba:	4619      	mov	r1, r3
 80047bc:	480e      	ldr	r0, [pc, #56]	@ (80047f8 <BSP_RADIO_Init+0x78>)
 80047be:	f002 fa7f 	bl	8006cc0 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80047c2:	2308      	movs	r3, #8
 80047c4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80047c6:	1d3b      	adds	r3, r7, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	480b      	ldr	r0, [pc, #44]	@ (80047f8 <BSP_RADIO_Init+0x78>)
 80047cc:	f002 fa78 	bl	8006cc0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80047d0:	2200      	movs	r2, #0
 80047d2:	2120      	movs	r1, #32
 80047d4:	4808      	ldr	r0, [pc, #32]	@ (80047f8 <BSP_RADIO_Init+0x78>)
 80047d6:	f002 fcb8 	bl	800714a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80047da:	2200      	movs	r2, #0
 80047dc:	2110      	movs	r1, #16
 80047de:	4806      	ldr	r0, [pc, #24]	@ (80047f8 <BSP_RADIO_Init+0x78>)
 80047e0:	f002 fcb3 	bl	800714a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80047e4:	2200      	movs	r2, #0
 80047e6:	2108      	movs	r1, #8
 80047e8:	4803      	ldr	r0, [pc, #12]	@ (80047f8 <BSP_RADIO_Init+0x78>)
 80047ea:	f002 fcae 	bl	800714a <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80047ee:	2300      	movs	r3, #0
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	48000800 	.word	0x48000800

080047fc <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	4603      	mov	r3, r0
 8004804:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	2b03      	cmp	r3, #3
 800480a:	d84b      	bhi.n	80048a4 <BSP_RADIO_ConfigRFSwitch+0xa8>
 800480c:	a201      	add	r2, pc, #4	@ (adr r2, 8004814 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800480e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004812:	bf00      	nop
 8004814:	08004825 	.word	0x08004825
 8004818:	08004845 	.word	0x08004845
 800481c:	08004865 	.word	0x08004865
 8004820:	08004885 	.word	0x08004885
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8004824:	2200      	movs	r2, #0
 8004826:	2108      	movs	r1, #8
 8004828:	4821      	ldr	r0, [pc, #132]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800482a:	f002 fc8e 	bl	800714a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800482e:	2200      	movs	r2, #0
 8004830:	2110      	movs	r1, #16
 8004832:	481f      	ldr	r0, [pc, #124]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8004834:	f002 fc89 	bl	800714a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8004838:	2200      	movs	r2, #0
 800483a:	2120      	movs	r1, #32
 800483c:	481c      	ldr	r0, [pc, #112]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800483e:	f002 fc84 	bl	800714a <HAL_GPIO_WritePin>
      break;      
 8004842:	e030      	b.n	80048a6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8004844:	2201      	movs	r2, #1
 8004846:	2108      	movs	r1, #8
 8004848:	4819      	ldr	r0, [pc, #100]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800484a:	f002 fc7e 	bl	800714a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800484e:	2201      	movs	r2, #1
 8004850:	2110      	movs	r1, #16
 8004852:	4817      	ldr	r0, [pc, #92]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8004854:	f002 fc79 	bl	800714a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8004858:	2200      	movs	r2, #0
 800485a:	2120      	movs	r1, #32
 800485c:	4814      	ldr	r0, [pc, #80]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800485e:	f002 fc74 	bl	800714a <HAL_GPIO_WritePin>
      break;
 8004862:	e020      	b.n	80048a6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8004864:	2201      	movs	r2, #1
 8004866:	2108      	movs	r1, #8
 8004868:	4811      	ldr	r0, [pc, #68]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800486a:	f002 fc6e 	bl	800714a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800486e:	2201      	movs	r2, #1
 8004870:	2110      	movs	r1, #16
 8004872:	480f      	ldr	r0, [pc, #60]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8004874:	f002 fc69 	bl	800714a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004878:	2201      	movs	r2, #1
 800487a:	2120      	movs	r1, #32
 800487c:	480c      	ldr	r0, [pc, #48]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800487e:	f002 fc64 	bl	800714a <HAL_GPIO_WritePin>
      break;
 8004882:	e010      	b.n	80048a6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8004884:	2201      	movs	r2, #1
 8004886:	2108      	movs	r1, #8
 8004888:	4809      	ldr	r0, [pc, #36]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800488a:	f002 fc5e 	bl	800714a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800488e:	2200      	movs	r2, #0
 8004890:	2110      	movs	r1, #16
 8004892:	4807      	ldr	r0, [pc, #28]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8004894:	f002 fc59 	bl	800714a <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8004898:	2201      	movs	r2, #1
 800489a:	2120      	movs	r1, #32
 800489c:	4804      	ldr	r0, [pc, #16]	@ (80048b0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800489e:	f002 fc54 	bl	800714a <HAL_GPIO_WritePin>
      break;
 80048a2:	e000      	b.n	80048a6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80048a4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3708      	adds	r7, #8
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	48000800 	.word	0x48000800

080048b4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr

080048c2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80048c2:	b480      	push	{r7}
 80048c4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80048c6:	2301      	movs	r3, #1
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr

080048d0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80048d0:	b480      	push	{r7}
 80048d2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80048d4:	2301      	movs	r3, #1
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	4603      	mov	r3, r0
 80048e6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80048e8:	79fb      	ldrb	r3, [r7, #7]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80048ee:	230f      	movs	r3, #15
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	e001      	b.n	80048f8 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80048f4:	2316      	movs	r3, #22
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80048f8:	68fb      	ldr	r3, [r7, #12]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	bc80      	pop	{r7}
 8004902:	4770      	bx	lr

08004904 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8004908:	f7ff ff3a 	bl	8004780 <BSP_RADIO_Init>
 800490c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800490e:	4618      	mov	r0, r3
 8004910:	bd80      	pop	{r7, pc}

08004912 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	4603      	mov	r3, r0
 800491a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800491c:	79fb      	ldrb	r3, [r7, #7]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff ff6c 	bl	80047fc <BSP_RADIO_ConfigRFSwitch>
 8004924:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8004932:	f7ff ffbf 	bl	80048b4 <BSP_RADIO_GetTxConfig>
 8004936:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}

0800493c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8004940:	f7ff ffbf 	bl	80048c2 <BSP_RADIO_IsTCXO>
 8004944:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8004946:	4618      	mov	r0, r3
 8004948:	bd80      	pop	{r7, pc}

0800494a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800494e:	f7ff ffbf 	bl	80048d0 <BSP_RADIO_IsDCDC>
 8004952:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8004954:	4618      	mov	r0, r3
 8004956:	bd80      	pop	{r7, pc}

08004958 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8004962:	79fb      	ldrb	r3, [r7, #7]
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff ffba 	bl	80048de <BSP_RADIO_GetRFOMaxPowerConfig>
 800496a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800496c:	4618      	mov	r0, r3
 800496e:	3708      	adds	r7, #8
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8004982:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <SUBGRF_Init+0x84>)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8004988:	f7ff fc1c 	bl	80041c4 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800498c:	2002      	movs	r0, #2
 800498e:	f000 ff75 	bl	800587c <Radio_SMPS_Set>

    ImageCalibrated = false;
 8004992:	4b1a      	ldr	r3, [pc, #104]	@ (80049fc <SUBGRF_Init+0x88>)
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8004998:	2000      	movs	r0, #0
 800499a:	f000 f8b9 	bl	8004b10 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800499e:	f7ff ffcd 	bl	800493c <RBI_IsTCXO>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10e      	bne.n	80049c6 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 80049a8:	2140      	movs	r1, #64	@ 0x40
 80049aa:	2001      	movs	r0, #1
 80049ac:	f000 fa1e 	bl	8004dec <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80049b0:	2100      	movs	r1, #0
 80049b2:	f640 1011 	movw	r0, #2321	@ 0x911
 80049b6:	f000 fd93 	bl	80054e0 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 80049ba:	237f      	movs	r3, #127	@ 0x7f
 80049bc:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 80049be:	7b38      	ldrb	r0, [r7, #12]
 80049c0:	f000 f928 	bl	8004c14 <SUBGRF_Calibrate>
 80049c4:	e009      	b.n	80049da <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80049c6:	2120      	movs	r1, #32
 80049c8:	f640 1011 	movw	r0, #2321	@ 0x911
 80049cc:	f000 fd88 	bl	80054e0 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80049d0:	2120      	movs	r1, #32
 80049d2:	f640 1012 	movw	r0, #2322	@ 0x912
 80049d6:	f000 fd83 	bl	80054e0 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80049da:	210e      	movs	r1, #14
 80049dc:	f640 101f 	movw	r0, #2335	@ 0x91f
 80049e0:	f000 fd7e 	bl	80054e0 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80049e4:	f7ff ff8e 	bl	8004904 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80049e8:	4b05      	ldr	r3, [pc, #20]	@ (8004a00 <SUBGRF_Init+0x8c>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	701a      	strb	r2, [r3, #0]
}
 80049ee:	bf00      	nop
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000b1c 	.word	0x20000b1c
 80049fc:	20000b18 	.word	0x20000b18
 8004a00:	20000b10 	.word	0x20000b10

08004a04 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	461a      	mov	r2, r3
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	2000      	movs	r0, #0
 8004a18:	f000 fdac 	bl	8005574 <SUBGRF_WriteBuffer>
}
 8004a1c:	bf00      	nop
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8004a36:	f107 0317 	add.w	r3, r7, #23
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	68b8      	ldr	r0, [r7, #8]
 8004a3e:	f000 fcb9 	bl	80053b4 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	79fa      	ldrb	r2, [r7, #7]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d201      	bcs.n	8004a50 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e007      	b.n	8004a60 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8004a50:	7df8      	ldrb	r0, [r7, #23]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	461a      	mov	r2, r3
 8004a58:	68f9      	ldr	r1, [r7, #12]
 8004a5a:	f000 fdad 	bl	80055b8 <SUBGRF_ReadBuffer>

    return 0;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	460b      	mov	r3, r1
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8004a76:	7afb      	ldrb	r3, [r7, #11]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff ffc2 	bl	8004a04 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f861 	bl	8004b48 <SUBGRF_SetTx>
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b084      	sub	sp, #16
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	4603      	mov	r3, r0
 8004a96:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8004a98:	88fb      	ldrh	r3, [r7, #6]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8004aa8:	f000 fa24 	bl	8004ef4 <SUBGRF_GetPacketType>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d108      	bne.n	8004ac4 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8004ab2:	f107 030c 	add.w	r3, r7, #12
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8004abe:	f000 fd37 	bl	8005530 <SUBGRF_WriteRegisters>
            break;
 8004ac2:	e000      	b.n	8004ac6 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8004ac4:	bf00      	nop
    }
}
 8004ac6:	bf00      	nop
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8004ad8:	88fb      	ldrh	r3, [r7, #6]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8004ae8:	f000 fa04 	bl	8004ef4 <SUBGRF_GetPacketType>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d108      	bne.n	8004b04 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8004af2:	f107 030c 	add.w	r3, r7, #12
 8004af6:	2202      	movs	r2, #2
 8004af8:	4619      	mov	r1, r3
 8004afa:	f240 60be 	movw	r0, #1726	@ 0x6be
 8004afe:	f000 fd17 	bl	8005530 <SUBGRF_WriteRegisters>
            break;
 8004b02:	e000      	b.n	8004b06 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8004b04:	bf00      	nop
    }
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8004b1a:	1dfb      	adds	r3, r7, #7
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	4619      	mov	r1, r3
 8004b20:	2080      	movs	r0, #128	@ 0x80
 8004b22:	f000 fd6b 	bl	80055fc <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <SUBGRF_SetStandby+0x34>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8004b32:	e002      	b.n	8004b3a <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8004b34:	4b03      	ldr	r3, [pc, #12]	@ (8004b44 <SUBGRF_SetStandby+0x34>)
 8004b36:	2202      	movs	r2, #2
 8004b38:	701a      	strb	r2, [r3, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	3708      	adds	r7, #8
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000b10 	.word	0x20000b10

08004b48 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8004b50:	4b0c      	ldr	r3, [pc, #48]	@ (8004b84 <SUBGRF_SetTx+0x3c>)
 8004b52:	2204      	movs	r2, #4
 8004b54:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0c1b      	lsrs	r3, r3, #16
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	0a1b      	lsrs	r3, r3, #8
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8004b6c:	f107 030c 	add.w	r3, r7, #12
 8004b70:	2203      	movs	r2, #3
 8004b72:	4619      	mov	r1, r3
 8004b74:	2083      	movs	r0, #131	@ 0x83
 8004b76:	f000 fd41 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000b10 	.word	0x20000b10

08004b88 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8004b90:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc4 <SUBGRF_SetRx+0x3c>)
 8004b92:	2205      	movs	r2, #5
 8004b94:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	0a1b      	lsrs	r3, r3, #8
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8004bac:	f107 030c 	add.w	r3, r7, #12
 8004bb0:	2203      	movs	r2, #3
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	2082      	movs	r0, #130	@ 0x82
 8004bb6:	f000 fd21 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004bba:	bf00      	nop
 8004bbc:	3710      	adds	r7, #16
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20000b10 	.word	0x20000b10

08004bc8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8004bd2:	1dfb      	adds	r3, r7, #7
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	209f      	movs	r0, #159	@ 0x9f
 8004bda:	f000 fd0f 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b082      	sub	sp, #8
 8004bea:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8004bec:	f7ff fead 	bl	800494a <RBI_IsDCDC>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d102      	bne.n	8004bfc <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	71fb      	strb	r3, [r7, #7]
 8004bfa:	e001      	b.n	8004c00 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8004c00:	1dfb      	adds	r3, r7, #7
 8004c02:	2201      	movs	r2, #1
 8004c04:	4619      	mov	r1, r3
 8004c06:	2096      	movs	r0, #150	@ 0x96
 8004c08:	f000 fcf8 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004c0c:	bf00      	nop
 8004c0e:	3708      	adds	r7, #8
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8004c1c:	793b      	ldrb	r3, [r7, #4]
 8004c1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	019b      	lsls	r3, r3, #6
 8004c26:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8004c28:	793b      	ldrb	r3, [r7, #4]
 8004c2a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8004c32:	b25b      	sxtb	r3, r3
 8004c34:	4313      	orrs	r3, r2
 8004c36:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8004c38:	793b      	ldrb	r3, [r7, #4]
 8004c3a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8004c42:	b25b      	sxtb	r3, r3
 8004c44:	4313      	orrs	r3, r2
 8004c46:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8004c48:	793b      	ldrb	r3, [r7, #4]
 8004c4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8004c52:	b25b      	sxtb	r3, r3
 8004c54:	4313      	orrs	r3, r2
 8004c56:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8004c58:	793b      	ldrb	r3, [r7, #4]
 8004c5a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8004c62:	b25b      	sxtb	r3, r3
 8004c64:	4313      	orrs	r3, r2
 8004c66:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8004c68:	793b      	ldrb	r3, [r7, #4]
 8004c6a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8004c72:	b25b      	sxtb	r3, r3
 8004c74:	4313      	orrs	r3, r2
 8004c76:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8004c78:	793b      	ldrb	r3, [r7, #4]
 8004c7a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8004c82:	4313      	orrs	r3, r2
 8004c84:	b25b      	sxtb	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8004c88:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8004c8a:	f107 030f 	add.w	r3, r7, #15
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4619      	mov	r1, r3
 8004c92:	2089      	movs	r0, #137	@ 0x89
 8004c94:	f000 fcb2 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a1d      	ldr	r2, [pc, #116]	@ (8004d20 <SUBGRF_CalibrateImage+0x80>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d904      	bls.n	8004cba <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8004cb0:	23e1      	movs	r3, #225	@ 0xe1
 8004cb2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8004cb4:	23e9      	movs	r3, #233	@ 0xe9
 8004cb6:	737b      	strb	r3, [r7, #13]
 8004cb8:	e027      	b.n	8004d0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a19      	ldr	r2, [pc, #100]	@ (8004d24 <SUBGRF_CalibrateImage+0x84>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d904      	bls.n	8004ccc <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8004cc2:	23d7      	movs	r3, #215	@ 0xd7
 8004cc4:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8004cc6:	23db      	movs	r3, #219	@ 0xdb
 8004cc8:	737b      	strb	r3, [r7, #13]
 8004cca:	e01e      	b.n	8004d0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a16      	ldr	r2, [pc, #88]	@ (8004d28 <SUBGRF_CalibrateImage+0x88>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d904      	bls.n	8004cde <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8004cd4:	23c1      	movs	r3, #193	@ 0xc1
 8004cd6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8004cd8:	23c5      	movs	r3, #197	@ 0xc5
 8004cda:	737b      	strb	r3, [r7, #13]
 8004cdc:	e015      	b.n	8004d0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a12      	ldr	r2, [pc, #72]	@ (8004d2c <SUBGRF_CalibrateImage+0x8c>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d904      	bls.n	8004cf0 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8004ce6:	2375      	movs	r3, #117	@ 0x75
 8004ce8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8004cea:	2381      	movs	r3, #129	@ 0x81
 8004cec:	737b      	strb	r3, [r7, #13]
 8004cee:	e00c      	b.n	8004d0a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8004d30 <SUBGRF_CalibrateImage+0x90>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d904      	bls.n	8004d02 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8004cf8:	236b      	movs	r3, #107	@ 0x6b
 8004cfa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8004cfc:	236f      	movs	r3, #111	@ 0x6f
 8004cfe:	737b      	strb	r3, [r7, #13]
 8004d00:	e003      	b.n	8004d0a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8004d02:	2329      	movs	r3, #41	@ 0x29
 8004d04:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8004d06:	232b      	movs	r3, #43	@ 0x2b
 8004d08:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8004d0a:	f107 030c 	add.w	r3, r7, #12
 8004d0e:	2202      	movs	r2, #2
 8004d10:	4619      	mov	r1, r3
 8004d12:	2098      	movs	r0, #152	@ 0x98
 8004d14:	f000 fc72 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004d18:	bf00      	nop
 8004d1a:	3710      	adds	r7, #16
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	35a4e900 	.word	0x35a4e900
 8004d24:	32a9f880 	.word	0x32a9f880
 8004d28:	2de54480 	.word	0x2de54480
 8004d2c:	1b6b0b00 	.word	0x1b6b0b00
 8004d30:	1954fc40 	.word	0x1954fc40

08004d34 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	4608      	mov	r0, r1
 8004d3e:	4611      	mov	r1, r2
 8004d40:	461a      	mov	r2, r3
 8004d42:	4623      	mov	r3, r4
 8004d44:	71fb      	strb	r3, [r7, #7]
 8004d46:	4603      	mov	r3, r0
 8004d48:	71bb      	strb	r3, [r7, #6]
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	717b      	strb	r3, [r7, #5]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8004d56:	79bb      	ldrb	r3, [r7, #6]
 8004d58:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8004d5a:	797b      	ldrb	r3, [r7, #5]
 8004d5c:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8004d5e:	793b      	ldrb	r3, [r7, #4]
 8004d60:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8004d62:	f107 030c 	add.w	r3, r7, #12
 8004d66:	2204      	movs	r2, #4
 8004d68:	4619      	mov	r1, r3
 8004d6a:	2095      	movs	r0, #149	@ 0x95
 8004d6c:	f000 fc46 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd90      	pop	{r4, r7, pc}

08004d78 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8004d78:	b590      	push	{r4, r7, lr}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4608      	mov	r0, r1
 8004d82:	4611      	mov	r1, r2
 8004d84:	461a      	mov	r2, r3
 8004d86:	4623      	mov	r3, r4
 8004d88:	80fb      	strh	r3, [r7, #6]
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	80bb      	strh	r3, [r7, #4]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	807b      	strh	r3, [r7, #2]
 8004d92:	4613      	mov	r3, r2
 8004d94:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	0a1b      	lsrs	r3, r3, #8
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8004da0:	88fb      	ldrh	r3, [r7, #6]
 8004da2:	b2db      	uxtb	r3, r3
 8004da4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8004da6:	88bb      	ldrh	r3, [r7, #4]
 8004da8:	0a1b      	lsrs	r3, r3, #8
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8004db0:	88bb      	ldrh	r3, [r7, #4]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8004db6:	887b      	ldrh	r3, [r7, #2]
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8004dc0:	887b      	ldrh	r3, [r7, #2]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8004dc6:	883b      	ldrh	r3, [r7, #0]
 8004dc8:	0a1b      	lsrs	r3, r3, #8
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8004dd0:	883b      	ldrh	r3, [r7, #0]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8004dd6:	f107 0308 	add.w	r3, r7, #8
 8004dda:	2208      	movs	r2, #8
 8004ddc:	4619      	mov	r1, r3
 8004dde:	2008      	movs	r0, #8
 8004de0:	f000 fc0c 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd90      	pop	{r4, r7, pc}

08004dec <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	4603      	mov	r3, r0
 8004df4:	6039      	str	r1, [r7, #0]
 8004df6:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	0c1b      	lsrs	r3, r3, #16
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	0a1b      	lsrs	r3, r3, #8
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8004e18:	f107 030c 	add.w	r3, r7, #12
 8004e1c:	2204      	movs	r2, #4
 8004e1e:	4619      	mov	r1, r3
 8004e20:	2097      	movs	r0, #151	@ 0x97
 8004e22:	f000 fbeb 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004e26:	bf00      	nop
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
	...

08004e30 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8004e30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb4 <SUBGRF_SetRfFrequency+0x84>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	f083 0301 	eor.w	r3, r3, #1
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff ff27 	bl	8004ca0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8004e52:	4b18      	ldr	r3, [pc, #96]	@ (8004eb4 <SUBGRF_SetRfFrequency+0x84>)
 8004e54:	2201      	movs	r2, #1
 8004e56:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	461c      	mov	r4, r3
 8004e5e:	4615      	mov	r5, r2
 8004e60:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8004e64:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8004e68:	4a13      	ldr	r2, [pc, #76]	@ (8004eb8 <SUBGRF_SetRfFrequency+0x88>)
 8004e6a:	f04f 0300 	mov.w	r3, #0
 8004e6e:	4640      	mov	r0, r8
 8004e70:	4649      	mov	r1, r9
 8004e72:	f7fc f96f 	bl	8001154 <__aeabi_uldivmod>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	0e1b      	lsrs	r3, r3, #24
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	0c1b      	lsrs	r3, r3, #16
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	0a1b      	lsrs	r3, r3, #8
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	2204      	movs	r2, #4
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	2086      	movs	r0, #134	@ 0x86
 8004ea6:	f000 fba9 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004eb4:	20000b18 	.word	0x20000b18
 8004eb8:	01e84800 	.word	0x01e84800

08004ebc <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8004ec6:	79fa      	ldrb	r2, [r7, #7]
 8004ec8:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <SUBGRF_SetPacketType+0x34>)
 8004eca:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d104      	bne.n	8004edc <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8004ed8:	f000 fb02 	bl	80054e0 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8004edc:	1dfb      	adds	r3, r7, #7
 8004ede:	2201      	movs	r2, #1
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	208a      	movs	r0, #138	@ 0x8a
 8004ee4:	f000 fb8a 	bl	80055fc <SUBGRF_WriteCommand>
}
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20000b11 	.word	0x20000b11

08004ef4 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	af00      	add	r7, sp, #0
    return PacketType;
 8004ef8:	4b02      	ldr	r3, [pc, #8]	@ (8004f04 <SUBGRF_GetPacketType+0x10>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bc80      	pop	{r7}
 8004f02:	4770      	bx	lr
 8004f04:	20000b11 	.word	0x20000b11

08004f08 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	4603      	mov	r3, r0
 8004f10:	71fb      	strb	r3, [r7, #7]
 8004f12:	460b      	mov	r3, r1
 8004f14:	71bb      	strb	r3, [r7, #6]
 8004f16:	4613      	mov	r3, r2
 8004f18:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d149      	bne.n	8004fb4 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8004f20:	2000      	movs	r0, #0
 8004f22:	f7ff fd19 	bl	8004958 <RBI_GetRFOMaxPowerConfig>
 8004f26:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8004f28:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	da01      	bge.n	8004f36 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2b0e      	cmp	r3, #14
 8004f3a:	d10e      	bne.n	8004f5a <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	2201      	movs	r2, #1
 8004f40:	2100      	movs	r1, #0
 8004f42:	2004      	movs	r0, #4
 8004f44:	f7ff fef6 	bl	8004d34 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8004f48:	79ba      	ldrb	r2, [r7, #6]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	330e      	adds	r3, #14
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	71bb      	strb	r3, [r7, #6]
 8004f58:	e01f      	b.n	8004f9a <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b0a      	cmp	r3, #10
 8004f5e:	d10e      	bne.n	8004f7e <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8004f60:	2301      	movs	r3, #1
 8004f62:	2201      	movs	r2, #1
 8004f64:	2100      	movs	r1, #0
 8004f66:	2001      	movs	r0, #1
 8004f68:	f7ff fee4 	bl	8004d34 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8004f6c:	79ba      	ldrb	r2, [r7, #6]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	330d      	adds	r3, #13
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	71bb      	strb	r3, [r7, #6]
 8004f7c:	e00d      	b.n	8004f9a <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8004f7e:	2301      	movs	r3, #1
 8004f80:	2201      	movs	r2, #1
 8004f82:	2100      	movs	r1, #0
 8004f84:	2007      	movs	r0, #7
 8004f86:	f7ff fed5 	bl	8004d34 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8004f8a:	79ba      	ldrb	r2, [r7, #6]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	330e      	adds	r3, #14
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8004f9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004f9e:	f113 0f11 	cmn.w	r3, #17
 8004fa2:	da01      	bge.n	8004fa8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8004fa4:	23ef      	movs	r3, #239	@ 0xef
 8004fa6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8004fa8:	2118      	movs	r1, #24
 8004faa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8004fae:	f000 fa97 	bl	80054e0 <SUBGRF_WriteRegister>
 8004fb2:	e067      	b.n	8005084 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8004fb4:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8004fb8:	f000 faa6 	bl	8005508 <SUBGRF_ReadRegister>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	f043 031e 	orr.w	r3, r3, #30
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8004fca:	f000 fa89 	bl	80054e0 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8004fce:	2001      	movs	r0, #1
 8004fd0:	f7ff fcc2 	bl	8004958 <RBI_GetRFOMaxPowerConfig>
 8004fd4:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8004fd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	da01      	bge.n	8004fe4 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b14      	cmp	r3, #20
 8004fe8:	d10e      	bne.n	8005008 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8004fea:	2301      	movs	r3, #1
 8004fec:	2200      	movs	r2, #0
 8004fee:	2105      	movs	r1, #5
 8004ff0:	2003      	movs	r0, #3
 8004ff2:	f7ff fe9f 	bl	8004d34 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8004ff6:	79ba      	ldrb	r2, [r7, #6]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	3316      	adds	r3, #22
 8005002:	b2db      	uxtb	r3, r3
 8005004:	71bb      	strb	r3, [r7, #6]
 8005006:	e031      	b.n	800506c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b11      	cmp	r3, #17
 800500c:	d10e      	bne.n	800502c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 800500e:	2301      	movs	r3, #1
 8005010:	2200      	movs	r2, #0
 8005012:	2103      	movs	r1, #3
 8005014:	2002      	movs	r0, #2
 8005016:	f7ff fe8d 	bl	8004d34 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800501a:	79ba      	ldrb	r2, [r7, #6]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	b2db      	uxtb	r3, r3
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	b2db      	uxtb	r3, r3
 8005024:	3316      	adds	r3, #22
 8005026:	b2db      	uxtb	r3, r3
 8005028:	71bb      	strb	r3, [r7, #6]
 800502a:	e01f      	b.n	800506c <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b0e      	cmp	r3, #14
 8005030:	d10e      	bne.n	8005050 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8005032:	2301      	movs	r3, #1
 8005034:	2200      	movs	r2, #0
 8005036:	2102      	movs	r1, #2
 8005038:	2002      	movs	r0, #2
 800503a:	f7ff fe7b 	bl	8004d34 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 800503e:	79ba      	ldrb	r2, [r7, #6]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	330e      	adds	r3, #14
 800504a:	b2db      	uxtb	r3, r3
 800504c:	71bb      	strb	r3, [r7, #6]
 800504e:	e00d      	b.n	800506c <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8005050:	2301      	movs	r3, #1
 8005052:	2200      	movs	r2, #0
 8005054:	2107      	movs	r1, #7
 8005056:	2004      	movs	r0, #4
 8005058:	f7ff fe6c 	bl	8004d34 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 800505c:	79ba      	ldrb	r2, [r7, #6]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	b2db      	uxtb	r3, r3
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	b2db      	uxtb	r3, r3
 8005066:	3316      	adds	r3, #22
 8005068:	b2db      	uxtb	r3, r3
 800506a:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 800506c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005070:	f113 0f09 	cmn.w	r3, #9
 8005074:	da01      	bge.n	800507a <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8005076:	23f7      	movs	r3, #247	@ 0xf7
 8005078:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 800507a:	2138      	movs	r1, #56	@ 0x38
 800507c:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8005080:	f000 fa2e 	bl	80054e0 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8005084:	79bb      	ldrb	r3, [r7, #6]
 8005086:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8005088:	797b      	ldrb	r3, [r7, #5]
 800508a:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 800508c:	f107 0308 	add.w	r3, r7, #8
 8005090:	2202      	movs	r2, #2
 8005092:	4619      	mov	r1, r3
 8005094:	208e      	movs	r0, #142	@ 0x8e
 8005096:	f000 fab1 	bl	80055fc <SUBGRF_WriteCommand>
}
 800509a:	bf00      	nop
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80050a4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050a8:	b086      	sub	sp, #24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80050b2:	4a61      	ldr	r2, [pc, #388]	@ (8005238 <SUBGRF_SetModulationParams+0x194>)
 80050b4:	f107 0308 	add.w	r3, r7, #8
 80050b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80050bc:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	781a      	ldrb	r2, [r3, #0]
 80050c4:	4b5d      	ldr	r3, [pc, #372]	@ (800523c <SUBGRF_SetModulationParams+0x198>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d004      	beq.n	80050d6 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fef3 	bl	8004ebc <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b03      	cmp	r3, #3
 80050dc:	f200 80a5 	bhi.w	800522a <SUBGRF_SetModulationParams+0x186>
 80050e0:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <SUBGRF_SetModulationParams+0x44>)
 80050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e6:	bf00      	nop
 80050e8:	080050f9 	.word	0x080050f9
 80050ec:	080051b9 	.word	0x080051b9
 80050f0:	0800517b 	.word	0x0800517b
 80050f4:	080051e7 	.word	0x080051e7
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80050f8:	2308      	movs	r3, #8
 80050fa:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4a4f      	ldr	r2, [pc, #316]	@ (8005240 <SUBGRF_SetModulationParams+0x19c>)
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	0c1b      	lsrs	r3, r3, #16
 800510c:	b2db      	uxtb	r3, r3
 800510e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	0a1b      	lsrs	r3, r3, #8
 8005114:	b2db      	uxtb	r3, r3
 8005116:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	b2db      	uxtb	r3, r3
 800511c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7b1b      	ldrb	r3, [r3, #12]
 8005122:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	7b5b      	ldrb	r3, [r3, #13]
 8005128:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2200      	movs	r2, #0
 8005130:	461c      	mov	r4, r3
 8005132:	4615      	mov	r5, r2
 8005134:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8005138:	ea4f 6844 	mov.w	r8, r4, lsl #25
 800513c:	4a41      	ldr	r2, [pc, #260]	@ (8005244 <SUBGRF_SetModulationParams+0x1a0>)
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	4640      	mov	r0, r8
 8005144:	4649      	mov	r1, r9
 8005146:	f7fc f805 	bl	8001154 <__aeabi_uldivmod>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4613      	mov	r3, r2
 8005150:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	0c1b      	lsrs	r3, r3, #16
 8005156:	b2db      	uxtb	r3, r3
 8005158:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	0a1b      	lsrs	r3, r3, #8
 800515e:	b2db      	uxtb	r3, r3
 8005160:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	b2db      	uxtb	r3, r3
 8005166:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8005168:	7cfb      	ldrb	r3, [r7, #19]
 800516a:	b29a      	uxth	r2, r3
 800516c:	f107 0308 	add.w	r3, r7, #8
 8005170:	4619      	mov	r1, r3
 8005172:	208b      	movs	r0, #139	@ 0x8b
 8005174:	f000 fa42 	bl	80055fc <SUBGRF_WriteCommand>
        break;
 8005178:	e058      	b.n	800522c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 800517a:	2304      	movs	r3, #4
 800517c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	4a2f      	ldr	r2, [pc, #188]	@ (8005240 <SUBGRF_SetModulationParams+0x19c>)
 8005184:	fbb2 f3f3 	udiv	r3, r2, r3
 8005188:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	0c1b      	lsrs	r3, r3, #16
 800518e:	b2db      	uxtb	r3, r3
 8005190:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	0a1b      	lsrs	r3, r3, #8
 8005196:	b2db      	uxtb	r3, r3
 8005198:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	7d1b      	ldrb	r3, [r3, #20]
 80051a4:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80051a6:	7cfb      	ldrb	r3, [r7, #19]
 80051a8:	b29a      	uxth	r2, r3
 80051aa:	f107 0308 	add.w	r3, r7, #8
 80051ae:	4619      	mov	r1, r3
 80051b0:	208b      	movs	r0, #139	@ 0x8b
 80051b2:	f000 fa23 	bl	80055fc <SUBGRF_WriteCommand>
        break;
 80051b6:	e039      	b.n	800522c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80051b8:	2304      	movs	r3, #4
 80051ba:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	7e1b      	ldrb	r3, [r3, #24]
 80051c0:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	7e5b      	ldrb	r3, [r3, #25]
 80051c6:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7e9b      	ldrb	r3, [r3, #26]
 80051cc:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	7edb      	ldrb	r3, [r3, #27]
 80051d2:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80051d4:	7cfb      	ldrb	r3, [r7, #19]
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	f107 0308 	add.w	r3, r7, #8
 80051dc:	4619      	mov	r1, r3
 80051de:	208b      	movs	r0, #139	@ 0x8b
 80051e0:	f000 fa0c 	bl	80055fc <SUBGRF_WriteCommand>

        break;
 80051e4:	e022      	b.n	800522c <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80051e6:	2305      	movs	r3, #5
 80051e8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4a14      	ldr	r2, [pc, #80]	@ (8005240 <SUBGRF_SetModulationParams+0x19c>)
 80051f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	0a1b      	lsrs	r3, r3, #8
 8005202:	b2db      	uxtb	r3, r3
 8005204:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	7b1b      	ldrb	r3, [r3, #12]
 8005210:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	7b5b      	ldrb	r3, [r3, #13]
 8005216:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8005218:	7cfb      	ldrb	r3, [r7, #19]
 800521a:	b29a      	uxth	r2, r3
 800521c:	f107 0308 	add.w	r3, r7, #8
 8005220:	4619      	mov	r1, r3
 8005222:	208b      	movs	r0, #139	@ 0x8b
 8005224:	f000 f9ea 	bl	80055fc <SUBGRF_WriteCommand>
        break;
 8005228:	e000      	b.n	800522c <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 800522a:	bf00      	nop
    }
}
 800522c:	bf00      	nop
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005236:	bf00      	nop
 8005238:	0800e970 	.word	0x0800e970
 800523c:	20000b11 	.word	0x20000b11
 8005240:	3d090000 	.word	0x3d090000
 8005244:	01e84800 	.word	0x01e84800

08005248 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8005254:	4a48      	ldr	r2, [pc, #288]	@ (8005378 <SUBGRF_SetPacketParams+0x130>)
 8005256:	f107 030c 	add.w	r3, r7, #12
 800525a:	ca07      	ldmia	r2, {r0, r1, r2}
 800525c:	c303      	stmia	r3!, {r0, r1}
 800525e:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	781a      	ldrb	r2, [r3, #0]
 8005264:	4b45      	ldr	r3, [pc, #276]	@ (800537c <SUBGRF_SetPacketParams+0x134>)
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d004      	beq.n	8005276 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff fe23 	bl	8004ebc <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b03      	cmp	r3, #3
 800527c:	d878      	bhi.n	8005370 <SUBGRF_SetPacketParams+0x128>
 800527e:	a201      	add	r2, pc, #4	@ (adr r2, 8005284 <SUBGRF_SetPacketParams+0x3c>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	08005295 	.word	0x08005295
 8005288:	08005325 	.word	0x08005325
 800528c:	08005319 	.word	0x08005319
 8005290:	08005295 	.word	0x08005295
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7a5b      	ldrb	r3, [r3, #9]
 8005298:	2bf1      	cmp	r3, #241	@ 0xf1
 800529a:	d10a      	bne.n	80052b2 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 800529c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80052a0:	f7ff fbf5 	bl	8004a8e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80052a4:	f248 0005 	movw	r0, #32773	@ 0x8005
 80052a8:	f7ff fc11 	bl	8004ace <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80052ac:	2302      	movs	r3, #2
 80052ae:	75bb      	strb	r3, [r7, #22]
 80052b0:	e011      	b.n	80052d6 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	7a5b      	ldrb	r3, [r3, #9]
 80052b6:	2bf2      	cmp	r3, #242	@ 0xf2
 80052b8:	d10a      	bne.n	80052d0 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80052ba:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80052be:	f7ff fbe6 	bl	8004a8e <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80052c2:	f241 0021 	movw	r0, #4129	@ 0x1021
 80052c6:	f7ff fc02 	bl	8004ace <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80052ca:	2306      	movs	r3, #6
 80052cc:	75bb      	strb	r3, [r7, #22]
 80052ce:	e002      	b.n	80052d6 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	7a5b      	ldrb	r3, [r3, #9]
 80052d4:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80052d6:	2309      	movs	r3, #9
 80052d8:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	885b      	ldrh	r3, [r3, #2]
 80052de:	0a1b      	lsrs	r3, r3, #8
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	885b      	ldrh	r3, [r3, #2]
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	791b      	ldrb	r3, [r3, #4]
 80052f2:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	795b      	ldrb	r3, [r3, #5]
 80052f8:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	799b      	ldrb	r3, [r3, #6]
 80052fe:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	79db      	ldrb	r3, [r3, #7]
 8005304:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	7a1b      	ldrb	r3, [r3, #8]
 800530a:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 800530c:	7dbb      	ldrb	r3, [r7, #22]
 800530e:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	7a9b      	ldrb	r3, [r3, #10]
 8005314:	753b      	strb	r3, [r7, #20]
        break;
 8005316:	e022      	b.n	800535e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8005318:	2301      	movs	r3, #1
 800531a:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	7b1b      	ldrb	r3, [r3, #12]
 8005320:	733b      	strb	r3, [r7, #12]
        break;
 8005322:	e01c      	b.n	800535e <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8005324:	2306      	movs	r3, #6
 8005326:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	89db      	ldrh	r3, [r3, #14]
 800532c:	0a1b      	lsrs	r3, r3, #8
 800532e:	b29b      	uxth	r3, r3
 8005330:	b2db      	uxtb	r3, r3
 8005332:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	89db      	ldrh	r3, [r3, #14]
 8005338:	b2db      	uxtb	r3, r3
 800533a:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	7c1a      	ldrb	r2, [r3, #16]
 8005340:	4b0f      	ldr	r3, [pc, #60]	@ (8005380 <SUBGRF_SetPacketParams+0x138>)
 8005342:	4611      	mov	r1, r2
 8005344:	7019      	strb	r1, [r3, #0]
 8005346:	4613      	mov	r3, r2
 8005348:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	7c5b      	ldrb	r3, [r3, #17]
 800534e:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	7c9b      	ldrb	r3, [r3, #18]
 8005354:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	7cdb      	ldrb	r3, [r3, #19]
 800535a:	747b      	strb	r3, [r7, #17]
        break;
 800535c:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800535e:	7dfb      	ldrb	r3, [r7, #23]
 8005360:	b29a      	uxth	r2, r3
 8005362:	f107 030c 	add.w	r3, r7, #12
 8005366:	4619      	mov	r1, r3
 8005368:	208c      	movs	r0, #140	@ 0x8c
 800536a:	f000 f947 	bl	80055fc <SUBGRF_WriteCommand>
 800536e:	e000      	b.n	8005372 <SUBGRF_SetPacketParams+0x12a>
        return;
 8005370:	bf00      	nop
}
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	0800e978 	.word	0x0800e978
 800537c:	20000b11 	.word	0x20000b11
 8005380:	20000b12 	.word	0x20000b12

08005384 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	460a      	mov	r2, r1
 800538e:	71fb      	strb	r3, [r7, #7]
 8005390:	4613      	mov	r3, r2
 8005392:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8005394:	79fb      	ldrb	r3, [r7, #7]
 8005396:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8005398:	79bb      	ldrb	r3, [r7, #6]
 800539a:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800539c:	f107 030c 	add.w	r3, r7, #12
 80053a0:	2202      	movs	r2, #2
 80053a2:	4619      	mov	r1, r3
 80053a4:	208f      	movs	r0, #143	@ 0x8f
 80053a6:	f000 f929 	bl	80055fc <SUBGRF_WriteCommand>
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80053be:	f107 030c 	add.w	r3, r7, #12
 80053c2:	2202      	movs	r2, #2
 80053c4:	4619      	mov	r1, r3
 80053c6:	2013      	movs	r0, #19
 80053c8:	f000 f93a 	bl	8005640 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80053cc:	f7ff fd92 	bl	8004ef4 <SUBGRF_GetPacketType>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10d      	bne.n	80053f2 <SUBGRF_GetRxBufferStatus+0x3e>
 80053d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005408 <SUBGRF_GetRxBufferStatus+0x54>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d108      	bne.n	80053f2 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80053e0:	f240 7002 	movw	r0, #1794	@ 0x702
 80053e4:	f000 f890 	bl	8005508 <SUBGRF_ReadRegister>
 80053e8:	4603      	mov	r3, r0
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	e002      	b.n	80053f8 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80053f2:	7b3a      	ldrb	r2, [r7, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80053f8:	7b7a      	ldrb	r2, [r7, #13]
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	701a      	strb	r2, [r3, #0]
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000b12 	.word	0x20000b12

0800540c <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8005414:	f107 030c 	add.w	r3, r7, #12
 8005418:	2203      	movs	r2, #3
 800541a:	4619      	mov	r1, r3
 800541c:	2014      	movs	r0, #20
 800541e:	f000 f90f 	bl	8005640 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8005422:	f7ff fd67 	bl	8004ef4 <SUBGRF_GetPacketType>
 8005426:	4603      	mov	r3, r0
 8005428:	461a      	mov	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <SUBGRF_GetPacketStatus+0x30>
 8005436:	2b01      	cmp	r3, #1
 8005438:	d013      	beq.n	8005462 <SUBGRF_GetPacketStatus+0x56>
 800543a:	e02a      	b.n	8005492 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800543c:	7b3a      	ldrb	r2, [r7, #12]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8005442:	7b7b      	ldrb	r3, [r7, #13]
 8005444:	425b      	negs	r3, r3
 8005446:	105b      	asrs	r3, r3, #1
 8005448:	b25a      	sxtb	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800544e:	7bbb      	ldrb	r3, [r7, #14]
 8005450:	425b      	negs	r3, r3
 8005452:	105b      	asrs	r3, r3, #1
 8005454:	b25a      	sxtb	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	609a      	str	r2, [r3, #8]
            break;
 8005460:	e020      	b.n	80054a4 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8005462:	7b3b      	ldrb	r3, [r7, #12]
 8005464:	425b      	negs	r3, r3
 8005466:	105b      	asrs	r3, r3, #1
 8005468:	b25a      	sxtb	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800546e:	7b7b      	ldrb	r3, [r7, #13]
 8005470:	b25b      	sxtb	r3, r3
 8005472:	3302      	adds	r3, #2
 8005474:	109b      	asrs	r3, r3, #2
 8005476:	b25a      	sxtb	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800547c:	7bbb      	ldrb	r3, [r7, #14]
 800547e:	425b      	negs	r3, r3
 8005480:	105b      	asrs	r3, r3, #1
 8005482:	b25a      	sxtb	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8005488:	4b08      	ldr	r3, [pc, #32]	@ (80054ac <SUBGRF_GetPacketStatus+0xa0>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	611a      	str	r2, [r3, #16]
            break;
 8005490:	e008      	b.n	80054a4 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8005492:	2214      	movs	r2, #20
 8005494:	2100      	movs	r1, #0
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f006 f9c4 	bl	800b824 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	220f      	movs	r2, #15
 80054a0:	701a      	strb	r2, [r3, #0]
            break;
 80054a2:	bf00      	nop
    }
}
 80054a4:	bf00      	nop
 80054a6:	3710      	adds	r7, #16
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000b14 	.word	0x20000b14

080054b0 <SUBGRF_ClearIrqStatus>:
    uint8_t buf[2] = { 0x00, 0x00 };
    SUBGRF_WriteCommand( RADIO_CLR_ERROR, buf, 2 );
}

void SUBGRF_ClearIrqStatus( uint16_t irq )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	b29b      	uxth	r3, r3
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
 80054c4:	88fb      	ldrh	r3, [r7, #6]
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 80054ca:	f107 030c 	add.w	r3, r7, #12
 80054ce:	2202      	movs	r2, #2
 80054d0:	4619      	mov	r1, r3
 80054d2:	2002      	movs	r0, #2
 80054d4:	f000 f892 	bl	80055fc <SUBGRF_WriteCommand>
}
 80054d8:	bf00      	nop
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <SUBGRF_WriteRegister>:

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	460a      	mov	r2, r1
 80054ea:	80fb      	strh	r3, [r7, #6]
 80054ec:	4613      	mov	r3, r2
 80054ee:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80054f0:	1d7a      	adds	r2, r7, #5
 80054f2:	88f9      	ldrh	r1, [r7, #6]
 80054f4:	2301      	movs	r3, #1
 80054f6:	4803      	ldr	r0, [pc, #12]	@ (8005504 <SUBGRF_WriteRegister+0x24>)
 80054f8:	f004 fcb8 	bl	8009e6c <HAL_SUBGHZ_WriteRegisters>
}
 80054fc:	bf00      	nop
 80054fe:	3708      	adds	r7, #8
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	20000a20 	.word	0x20000a20

08005508 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	4603      	mov	r3, r0
 8005510:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8005512:	f107 020f 	add.w	r2, r7, #15
 8005516:	88f9      	ldrh	r1, [r7, #6]
 8005518:	2301      	movs	r3, #1
 800551a:	4804      	ldr	r0, [pc, #16]	@ (800552c <SUBGRF_ReadRegister+0x24>)
 800551c:	f004 fd05 	bl	8009f2a <HAL_SUBGHZ_ReadRegisters>
    return data;
 8005520:	7bfb      	ldrb	r3, [r7, #15]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000a20 	.word	0x20000a20

08005530 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	6039      	str	r1, [r7, #0]
 800553a:	80fb      	strh	r3, [r7, #6]
 800553c:	4613      	mov	r3, r2
 800553e:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005540:	f3ef 8310 	mrs	r3, PRIMASK
 8005544:	60fb      	str	r3, [r7, #12]
  return(result);
 8005546:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800554a:	b672      	cpsid	i
}
 800554c:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800554e:	88bb      	ldrh	r3, [r7, #4]
 8005550:	88f9      	ldrh	r1, [r7, #6]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	4806      	ldr	r0, [pc, #24]	@ (8005570 <SUBGRF_WriteRegisters+0x40>)
 8005556:	f004 fc89 	bl	8009e6c <HAL_SUBGHZ_WriteRegisters>
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f383 8810 	msr	PRIMASK, r3
}
 8005564:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005566:	bf00      	nop
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	20000a20 	.word	0x20000a20

08005574 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	6039      	str	r1, [r7, #0]
 800557e:	71fb      	strb	r3, [r7, #7]
 8005580:	4613      	mov	r3, r2
 8005582:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005584:	f3ef 8310 	mrs	r3, PRIMASK
 8005588:	60fb      	str	r3, [r7, #12]
  return(result);
 800558a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800558c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800558e:	b672      	cpsid	i
}
 8005590:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8005592:	79bb      	ldrb	r3, [r7, #6]
 8005594:	b29b      	uxth	r3, r3
 8005596:	79f9      	ldrb	r1, [r7, #7]
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	4806      	ldr	r0, [pc, #24]	@ (80055b4 <SUBGRF_WriteBuffer+0x40>)
 800559c:	f004 fdd9 	bl	800a152 <HAL_SUBGHZ_WriteBuffer>
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f383 8810 	msr	PRIMASK, r3
}
 80055aa:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000a20 	.word	0x20000a20

080055b8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	4603      	mov	r3, r0
 80055c0:	6039      	str	r1, [r7, #0]
 80055c2:	71fb      	strb	r3, [r7, #7]
 80055c4:	4613      	mov	r3, r2
 80055c6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055c8:	f3ef 8310 	mrs	r3, PRIMASK
 80055cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80055ce:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80055d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80055d2:	b672      	cpsid	i
}
 80055d4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80055d6:	79bb      	ldrb	r3, [r7, #6]
 80055d8:	b29b      	uxth	r3, r3
 80055da:	79f9      	ldrb	r1, [r7, #7]
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	4806      	ldr	r0, [pc, #24]	@ (80055f8 <SUBGRF_ReadBuffer+0x40>)
 80055e0:	f004 fe0a 	bl	800a1f8 <HAL_SUBGHZ_ReadBuffer>
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f383 8810 	msr	PRIMASK, r3
}
 80055ee:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80055f0:	bf00      	nop
 80055f2:	3718      	adds	r7, #24
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000a20 	.word	0x20000a20

080055fc <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	6039      	str	r1, [r7, #0]
 8005606:	71fb      	strb	r3, [r7, #7]
 8005608:	4613      	mov	r3, r2
 800560a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800560c:	f3ef 8310 	mrs	r3, PRIMASK
 8005610:	60fb      	str	r3, [r7, #12]
  return(result);
 8005612:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005616:	b672      	cpsid	i
}
 8005618:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800561a:	88bb      	ldrh	r3, [r7, #4]
 800561c:	79f9      	ldrb	r1, [r7, #7]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	4806      	ldr	r0, [pc, #24]	@ (800563c <SUBGRF_WriteCommand+0x40>)
 8005622:	f004 fce3 	bl	8009fec <HAL_SUBGHZ_ExecSetCmd>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f383 8810 	msr	PRIMASK, r3
}
 8005630:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005632:	bf00      	nop
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000a20 	.word	0x20000a20

08005640 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	6039      	str	r1, [r7, #0]
 800564a:	71fb      	strb	r3, [r7, #7]
 800564c:	4613      	mov	r3, r2
 800564e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005650:	f3ef 8310 	mrs	r3, PRIMASK
 8005654:	60fb      	str	r3, [r7, #12]
  return(result);
 8005656:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8005658:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800565a:	b672      	cpsid	i
}
 800565c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 800565e:	88bb      	ldrh	r3, [r7, #4]
 8005660:	79f9      	ldrb	r1, [r7, #7]
 8005662:	683a      	ldr	r2, [r7, #0]
 8005664:	4806      	ldr	r0, [pc, #24]	@ (8005680 <SUBGRF_ReadCommand+0x40>)
 8005666:	f004 fd20 	bl	800a0aa <HAL_SUBGHZ_ExecGetCmd>
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f383 8810 	msr	PRIMASK, r3
}
 8005674:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8005676:	bf00      	nop
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000a20 	.word	0x20000a20

08005684 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	4603      	mov	r3, r0
 800568c:	460a      	mov	r2, r1
 800568e:	71fb      	strb	r3, [r7, #7]
 8005690:	4613      	mov	r3, r2
 8005692:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8005698:	79bb      	ldrb	r3, [r7, #6]
 800569a:	2b01      	cmp	r3, #1
 800569c:	d10d      	bne.n	80056ba <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 800569e:	79fb      	ldrb	r3, [r7, #7]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d104      	bne.n	80056ae <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80056a4:	2302      	movs	r3, #2
 80056a6:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80056a8:	2004      	movs	r0, #4
 80056aa:	f000 f8e7 	bl	800587c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80056ae:	79fb      	ldrb	r3, [r7, #7]
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d107      	bne.n	80056c4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80056b4:	2303      	movs	r3, #3
 80056b6:	73fb      	strb	r3, [r7, #15]
 80056b8:	e004      	b.n	80056c4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80056ba:	79bb      	ldrb	r3, [r7, #6]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80056c4:	7bfb      	ldrb	r3, [r7, #15]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff f923 	bl	8004912 <RBI_ConfigRFSwitch>
}
 80056cc:	bf00      	nop
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80056e2:	f7ff f924 	bl	800492e <RBI_GetTxConfig>
 80056e6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d016      	beq.n	800571c <SUBGRF_SetRfTxPower+0x48>
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	dc16      	bgt.n	8005722 <SUBGRF_SetRfTxPower+0x4e>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <SUBGRF_SetRfTxPower+0x2e>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d00a      	beq.n	8005716 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8005700:	e00f      	b.n	8005722 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8005702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005706:	2b0f      	cmp	r3, #15
 8005708:	dd02      	ble.n	8005710 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 800570a:	2302      	movs	r3, #2
 800570c:	73fb      	strb	r3, [r7, #15]
            break;
 800570e:	e009      	b.n	8005724 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
            break;
 8005714:	e006      	b.n	8005724 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8005716:	2301      	movs	r3, #1
 8005718:	73fb      	strb	r3, [r7, #15]
            break;
 800571a:	e003      	b.n	8005724 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 800571c:	2302      	movs	r3, #2
 800571e:	73fb      	strb	r3, [r7, #15]
            break;
 8005720:	e000      	b.n	8005724 <SUBGRF_SetRfTxPower+0x50>
            break;
 8005722:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8005724:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2202      	movs	r2, #2
 800572c:	4618      	mov	r0, r3
 800572e:	f7ff fbeb 	bl	8004f08 <SUBGRF_SetTxParams>

    return paSelect;
 8005732:	7bfb      	ldrb	r3, [r7, #15]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8005744:	4b03      	ldr	r3, [pc, #12]	@ (8005754 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2001      	movs	r0, #1
 800574a:	4798      	blx	r3
}
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000b1c 	.word	0x20000b1c

08005758 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8005760:	4b03      	ldr	r3, [pc, #12]	@ (8005770 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2002      	movs	r0, #2
 8005766:	4798      	blx	r3
}
 8005768:	bf00      	nop
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	20000b1c 	.word	0x20000b1c

08005774 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 800577c:	4b03      	ldr	r3, [pc, #12]	@ (800578c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2040      	movs	r0, #64	@ 0x40
 8005782:	4798      	blx	r3
}
 8005784:	bf00      	nop
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	20000b1c 	.word	0x20000b1c

08005790 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d005      	beq.n	80057b2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80057a6:	e00a      	b.n	80057be <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80057a8:	4b07      	ldr	r3, [pc, #28]	@ (80057c8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2080      	movs	r0, #128	@ 0x80
 80057ae:	4798      	blx	r3
            break;
 80057b0:	e005      	b.n	80057be <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80057b2:	4b05      	ldr	r3, [pc, #20]	@ (80057c8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80057ba:	4798      	blx	r3
            break;
 80057bc:	bf00      	nop
    }
}
 80057be:	bf00      	nop
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	20000b1c 	.word	0x20000b1c

080057cc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80057d4:	4b04      	ldr	r3, [pc, #16]	@ (80057e8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80057dc:	4798      	blx	r3
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000b1c 	.word	0x20000b1c

080057ec <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80057f4:	4b03      	ldr	r3, [pc, #12]	@ (8005804 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2020      	movs	r0, #32
 80057fa:	4798      	blx	r3
}
 80057fc:	bf00      	nop
 80057fe:	3708      	adds	r7, #8
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20000b1c 	.word	0x20000b1c

08005808 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8005810:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2004      	movs	r0, #4
 8005816:	4798      	blx	r3
}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000b1c 	.word	0x20000b1c

08005824 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 800582c:	4b03      	ldr	r3, [pc, #12]	@ (800583c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2008      	movs	r0, #8
 8005832:	4798      	blx	r3
}
 8005834:	bf00      	nop
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000b1c 	.word	0x20000b1c

08005840 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8005848:	4b03      	ldr	r3, [pc, #12]	@ (8005858 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2010      	movs	r0, #16
 800584e:	4798      	blx	r3
}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	20000b1c 	.word	0x20000b1c

0800585c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8005864:	4b04      	ldr	r3, [pc, #16]	@ (8005878 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800586c:	4798      	blx	r3
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	20000b1c 	.word	0x20000b1c

0800587c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8005886:	f7ff f860 	bl	800494a <RBI_IsDCDC>
 800588a:	4603      	mov	r3, r0
 800588c:	2b01      	cmp	r3, #1
 800588e:	d112      	bne.n	80058b6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8005890:	f640 1023 	movw	r0, #2339	@ 0x923
 8005894:	f7ff fe38 	bl	8005508 <SUBGRF_ReadRegister>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 800589c:	7bfb      	ldrb	r3, [r7, #15]
 800589e:	f023 0306 	bic.w	r3, r3, #6
 80058a2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80058a4:	7bfa      	ldrb	r2, [r7, #15]
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	f640 1023 	movw	r0, #2339	@ 0x923
 80058b2:	f7ff fe15 	bl	80054e0 <SUBGRF_WriteRegister>
  }
}
 80058b6:	bf00      	nop
 80058b8:	3710      	adds	r7, #16
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}
	...

080058c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058c6:	2300      	movs	r3, #0
 80058c8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058ca:	2003      	movs	r0, #3
 80058cc:	f001 f9b8 	bl	8006c40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80058d0:	f003 fce2 	bl	8009298 <HAL_RCC_GetHCLKFreq>
 80058d4:	4603      	mov	r3, r0
 80058d6:	4a09      	ldr	r2, [pc, #36]	@ (80058fc <HAL_Init+0x3c>)
 80058d8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058da:	200f      	movs	r0, #15
 80058dc:	f000 f810 	bl	8005900 <HAL_InitTick>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	71fb      	strb	r3, [r7, #7]
 80058ea:	e001      	b.n	80058f0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058ec:	f7fe fc16 	bl	800411c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058f0:	79fb      	ldrb	r3, [r7, #7]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	20000014 	.word	0x20000014

08005900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800590c:	4b17      	ldr	r3, [pc, #92]	@ (800596c <HAL_InitTick+0x6c>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d024      	beq.n	800595e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005914:	f003 fcc0 	bl	8009298 <HAL_RCC_GetHCLKFreq>
 8005918:	4602      	mov	r2, r0
 800591a:	4b14      	ldr	r3, [pc, #80]	@ (800596c <HAL_InitTick+0x6c>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	4619      	mov	r1, r3
 8005920:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005924:	fbb3 f3f1 	udiv	r3, r3, r1
 8005928:	fbb2 f3f3 	udiv	r3, r2, r3
 800592c:	4618      	mov	r0, r3
 800592e:	f001 f9ba 	bl	8006ca6 <HAL_SYSTICK_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10f      	bne.n	8005958 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b0f      	cmp	r3, #15
 800593c:	d809      	bhi.n	8005952 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800593e:	2200      	movs	r2, #0
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	f04f 30ff 	mov.w	r0, #4294967295
 8005946:	f001 f986 	bl	8006c56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800594a:	4a09      	ldr	r2, [pc, #36]	@ (8005970 <HAL_InitTick+0x70>)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	e007      	b.n	8005962 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	73fb      	strb	r3, [r7, #15]
 8005956:	e004      	b.n	8005962 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	73fb      	strb	r3, [r7, #15]
 800595c:	e001      	b.n	8005962 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005962:	7bfb      	ldrb	r3, [r7, #15]
}
 8005964:	4618      	mov	r0, r3
 8005966:	3710      	adds	r7, #16
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	20000028 	.word	0x20000028
 8005970:	20000024 	.word	0x20000024

08005974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005974:	b480      	push	{r7}
 8005976:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005978:	4b05      	ldr	r3, [pc, #20]	@ (8005990 <HAL_IncTick+0x1c>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	4b05      	ldr	r3, [pc, #20]	@ (8005994 <HAL_IncTick+0x20>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4413      	add	r3, r2
 8005984:	4a03      	ldr	r2, [pc, #12]	@ (8005994 <HAL_IncTick+0x20>)
 8005986:	6013      	str	r3, [r2, #0]
}
 8005988:	bf00      	nop
 800598a:	46bd      	mov	sp, r7
 800598c:	bc80      	pop	{r7}
 800598e:	4770      	bx	lr
 8005990:	20000028 	.word	0x20000028
 8005994:	20000b20 	.word	0x20000b20

08005998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005998:	b480      	push	{r7}
 800599a:	af00      	add	r7, sp, #0
  return uwTick;
 800599c:	4b02      	ldr	r3, [pc, #8]	@ (80059a8 <HAL_GetTick+0x10>)
 800599e:	681b      	ldr	r3, [r3, #0]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bc80      	pop	{r7}
 80059a6:	4770      	bx	lr
 80059a8:	20000b20 	.word	0x20000b20

080059ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059b4:	f7ff fff0 	bl	8005998 <HAL_GetTick>
 80059b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c4:	d005      	beq.n	80059d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80059c6:	4b0a      	ldr	r3, [pc, #40]	@ (80059f0 <HAL_Delay+0x44>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059d2:	bf00      	nop
 80059d4:	f7ff ffe0 	bl	8005998 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d8f7      	bhi.n	80059d4 <HAL_Delay+0x28>
  {
  }
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000028 	.word	0x20000028

080059f4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80059f8:	4b02      	ldr	r3, [pc, #8]	@ (8005a04 <HAL_GetUIDw0+0x10>)
 80059fa:	681b      	ldr	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bc80      	pop	{r7}
 8005a02:	4770      	bx	lr
 8005a04:	1fff7590 	.word	0x1fff7590

08005a08 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8005a0c:	4b02      	ldr	r3, [pc, #8]	@ (8005a18 <HAL_GetUIDw1+0x10>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bc80      	pop	{r7}
 8005a16:	4770      	bx	lr
 8005a18:	1fff7594 	.word	0x1fff7594

08005a1c <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8005a20:	4b02      	ldr	r3, [pc, #8]	@ (8005a2c <HAL_GetUIDw2+0x10>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bc80      	pop	{r7}
 8005a2a:	4770      	bx	lr
 8005a2c:	1fff7598 	.word	0x1fff7598

08005a30 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
}
 8005a4a:	bf00      	nop
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bc80      	pop	{r7}
 8005a52:	4770      	bx	lr

08005a54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr

08005a6e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	695a      	ldr	r2, [r3, #20]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2107      	movs	r1, #7
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	401a      	ands	r2, r3
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	6879      	ldr	r1, [r7, #4]
 8005a96:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005aa0:	bf00      	nop
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bc80      	pop	{r7}
 8005aa8:	4770      	bx	lr

08005aaa <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
 8005ab2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695a      	ldr	r2, [r3, #20]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	f003 0304 	and.w	r3, r3, #4
 8005abe:	2107      	movs	r1, #7
 8005ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ac4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8005acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bc80      	pop	{r7}
 8005ad8:	4770      	bx	lr

08005ada <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005aee:	2301      	movs	r3, #1
 8005af0:	e000      	b.n	8005af4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	60f8      	str	r0, [r7, #12]
 8005b06:	60b9      	str	r1, [r7, #8]
 8005b08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f003 031f 	and.w	r3, r3, #31
 8005b14:	210f      	movs	r1, #15
 8005b16:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1a:	43db      	mvns	r3, r3
 8005b1c:	401a      	ands	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	0e9b      	lsrs	r3, r3, #26
 8005b22:	f003 010f 	and.w	r1, r3, #15
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b30:	431a      	orrs	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005b36:	bf00      	nop
 8005b38:	3714      	adds	r7, #20
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bc80      	pop	{r7}
 8005b3e:	4770      	bx	lr

08005b40 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bc80      	pop	{r7}
 8005b62:	4770      	bx	lr

08005b64 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8005b78:	43db      	mvns	r3, r3
 8005b7a:	401a      	ands	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	695a      	ldr	r2, [r3, #20]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	021b      	lsls	r3, r3, #8
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	401a      	ands	r2, r3
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	0219      	lsls	r1, r3, #8
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	400b      	ands	r3, r1
 8005baa:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8005bae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr

08005bc2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005bd2:	f023 0317 	bic.w	r3, r3, #23
 8005bd6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bc80      	pop	{r7}
 8005be6:	4770      	bx	lr

08005be8 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005bf8:	f023 0317 	bic.w	r3, r3, #23
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6093      	str	r3, [r2, #8]
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bc80      	pop	{r7}
 8005c08:	4770      	bx	lr

08005c0a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c1e:	d101      	bne.n	8005c24 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005c20:	2301      	movs	r3, #1
 8005c22:	e000      	b.n	8005c26 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	370c      	adds	r7, #12
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bc80      	pop	{r7}
 8005c2e:	4770      	bx	lr

08005c30 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c40:	f023 0317 	bic.w	r3, r3, #23
 8005c44:	f043 0201 	orr.w	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr

08005c56 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c66:	f023 0317 	bic.w	r3, r3, #23
 8005c6a:	f043 0202 	orr.w	r2, r3, #2
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005c72:	bf00      	nop
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bc80      	pop	{r7}
 8005c7a:	4770      	bx	lr

08005c7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	689b      	ldr	r3, [r3, #8]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <LL_ADC_IsEnabled+0x18>
 8005c90:	2301      	movs	r3, #1
 8005c92:	e000      	b.n	8005c96 <LL_ADC_IsEnabled+0x1a>
 8005c94:	2300      	movs	r3, #0
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d101      	bne.n	8005cb8 <LL_ADC_IsDisableOngoing+0x18>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <LL_ADC_IsDisableOngoing+0x1a>
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc80      	pop	{r7}
 8005cc2:	4770      	bx	lr

08005cc4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005cd4:	f023 0317 	bic.w	r3, r3, #23
 8005cd8:	f043 0204 	orr.w	r2, r3, #4
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bc80      	pop	{r7}
 8005ce8:	4770      	bx	lr

08005cea <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005cfa:	f023 0317 	bic.w	r3, r3, #23
 8005cfe:	f043 0210 	orr.w	r2, r3, #16
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bc80      	pop	{r7}
 8005d0e:	4770      	bx	lr

08005d10 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 0304 	and.w	r3, r3, #4
 8005d20:	2b04      	cmp	r3, #4
 8005d22:	d101      	bne.n	8005d28 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d24:	2301      	movs	r3, #1
 8005d26:	e000      	b.n	8005d2a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	370c      	adds	r7, #12
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bc80      	pop	{r7}
 8005d32:	4770      	bx	lr

08005d34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e17e      	b.n	8006054 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d109      	bne.n	8005d78 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7fc fa47 	bl	80021f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff ff44 	bl	8005c0a <LL_ADC_IsInternalRegulatorEnabled>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d115      	bne.n	8005db4 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7ff ff18 	bl	8005bc2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d92:	4b9e      	ldr	r3, [pc, #632]	@ (800600c <HAL_ADC_Init+0x2d8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	099b      	lsrs	r3, r3, #6
 8005d98:	4a9d      	ldr	r2, [pc, #628]	@ (8006010 <HAL_ADC_Init+0x2dc>)
 8005d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9e:	099b      	lsrs	r3, r3, #6
 8005da0:	3301      	adds	r3, #1
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005da6:	e002      	b.n	8005dae <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f9      	bne.n	8005da8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff ff26 	bl	8005c0a <LL_ADC_IsInternalRegulatorEnabled>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10d      	bne.n	8005de0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc8:	f043 0210 	orr.w	r2, r3, #16
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd4:	f043 0201 	orr.w	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7ff ff93 	bl	8005d10 <LL_ADC_REG_IsConversionOngoing>
 8005dea:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df0:	f003 0310 	and.w	r3, r3, #16
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 8124 	bne.w	8006042 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f040 8120 	bne.w	8006042 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e06:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005e0a:	f043 0202 	orr.w	r2, r3, #2
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff ff30 	bl	8005c7c <LL_ADC_IsEnabled>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 80a7 	bne.w	8005f72 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	7e1b      	ldrb	r3, [r3, #24]
 8005e2c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005e2e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	7e5b      	ldrb	r3, [r3, #25]
 8005e34:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005e36:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	7e9b      	ldrb	r3, [r3, #26]
 8005e3c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005e3e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005e44:	2a00      	cmp	r2, #0
 8005e46:	d002      	beq.n	8005e4e <HAL_ADC_Init+0x11a>
 8005e48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005e4c:	e000      	b.n	8005e50 <HAL_ADC_Init+0x11c>
 8005e4e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005e50:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005e56:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	da04      	bge.n	8005e6a <HAL_ADC_Init+0x136>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e68:	e001      	b.n	8005e6e <HAL_ADC_Init+0x13a>
 8005e6a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8005e6e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005e76:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005e78:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d114      	bne.n	8005eb4 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	7e9b      	ldrb	r3, [r3, #26]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d104      	bne.n	8005e9c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e98:	61bb      	str	r3, [r7, #24]
 8005e9a:	e00b      	b.n	8005eb4 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eac:	f043 0201 	orr.w	r2, r3, #1
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d009      	beq.n	8005ed0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec0:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8005eda:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	69b9      	ldr	r1, [r7, #24]
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d111      	bne.n	8005f2a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005f12:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8005f18:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8005f1e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f043 0301 	orr.w	r3, r3, #1
 8005f28:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	4b38      	ldr	r3, [pc, #224]	@ (8006014 <HAL_ADC_Init+0x2e0>)
 8005f32:	4013      	ands	r3, r2
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	6812      	ldr	r2, [r2, #0]
 8005f38:	6979      	ldr	r1, [r7, #20]
 8005f3a:	430b      	orrs	r3, r1
 8005f3c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8005f46:	d014      	beq.n	8005f72 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f50:	d00f      	beq.n	8005f72 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005f56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f5a:	d00a      	beq.n	8005f72 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8005f5c:	4b2e      	ldr	r3, [pc, #184]	@ (8006018 <HAL_ADC_Init+0x2e4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8005f6c:	492a      	ldr	r1, [pc, #168]	@ (8006018 <HAL_ADC_Init+0x2e4>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	f7ff fd76 	bl	8005a6e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4923      	ldr	r1, [pc, #140]	@ (800601c <HAL_ADC_Init+0x2e8>)
 8005f8e:	f7ff fd6e 	bl	8005a6e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d108      	bne.n	8005fac <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f062 020f 	orn	r2, r2, #15
 8005fa8:	629a      	str	r2, [r3, #40]	@ 0x28
 8005faa:	e017      	b.n	8005fdc <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fb4:	d112      	bne.n	8005fdc <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	f003 031c 	and.w	r3, r3, #28
 8005fc8:	f06f 020f 	mvn.w	r2, #15
 8005fcc:	fa02 f103 	lsl.w	r1, r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7ff fd61 	bl	8005aaa <LL_ADC_GetSamplingTimeCommonChannels>
 8005fe8:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d116      	bne.n	8006020 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ffc:	f023 0303 	bic.w	r3, r3, #3
 8006000:	f043 0201 	orr.w	r2, r3, #1
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006008:	e023      	b.n	8006052 <HAL_ADC_Init+0x31e>
 800600a:	bf00      	nop
 800600c:	20000014 	.word	0x20000014
 8006010:	053e2d63 	.word	0x053e2d63
 8006014:	1ffffc02 	.word	0x1ffffc02
 8006018:	40012708 	.word	0x40012708
 800601c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006024:	f023 0312 	bic.w	r3, r3, #18
 8006028:	f043 0210 	orr.w	r2, r3, #16
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006034:	f043 0201 	orr.w	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8006040:	e007      	b.n	8006052 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006046:	f043 0210 	orr.w	r2, r3, #16
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8006052:	7ffb      	ldrb	r3, [r7, #31]
}
 8006054:	4618      	mov	r0, r3
 8006056:	3720      	adds	r7, #32
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e07a      	b.n	8006164 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006072:	f043 0202 	orr.w	r2, r3, #2
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa9c 	bl	80065b8 <ADC_ConversionStop>
 8006080:	4603      	mov	r3, r0
 8006082:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10f      	bne.n	80060aa <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fb60 	bl	8006750 <ADC_Disable>
 8006090:	4603      	mov	r3, r0
 8006092:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fd9f 	bl	8005be8 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	6812      	ldr	r2, [r2, #0]
 80060b4:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 80060b8:	f023 0303 	bic.w	r3, r3, #3
 80060bc:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f240 329f 	movw	r2, #927	@ 0x39f
 80060c6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68d9      	ldr	r1, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4b26      	ldr	r3, [pc, #152]	@ (800616c <HAL_ADC_DeInit+0x110>)
 80060d4:	400b      	ands	r3, r1
 80060d6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691a      	ldr	r2, [r3, #16]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80060e6:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	695a      	ldr	r2, [r3, #20]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0207 	bic.w	r2, r2, #7
 80060f6:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6a1a      	ldr	r2, [r3, #32]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8006106:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8006116:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 8006126:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2200      	movs	r2, #0
 8006134:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8006136:	4b0e      	ldr	r3, [pc, #56]	@ (8006170 <HAL_ADC_DeInit+0x114>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a0d      	ldr	r2, [pc, #52]	@ (8006170 <HAL_ADC_DeInit+0x114>)
 800613c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8006140:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fc f884 	bl	8002250 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2200      	movs	r2, #0
 8006152:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8006162:	7bfb      	ldrb	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	833e0200 	.word	0x833e0200
 8006170:	40012708 	.word	0x40012708

08006174 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fdc5 	bl	8005d10 <LL_ADC_REG_IsConversionOngoing>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d132      	bne.n	80061f2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_ADC_Start+0x26>
 8006196:	2302      	movs	r3, #2
 8006198:	e02e      	b.n	80061f8 <HAL_ADC_Start+0x84>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fa4e 	bl	8006644 <ADC_Enable>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d11a      	bne.n	80061e8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80061ba:	f023 0301 	bic.w	r3, r3, #1
 80061be:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	221c      	movs	r2, #28
 80061d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff fd6f 	bl	8005cc4 <LL_ADC_REG_StartConversion>
 80061e6:	e006      	b.n	80061f6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 80061f0:	e001      	b.n	80061f6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80061f2:	2302      	movs	r3, #2
 80061f4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	2b08      	cmp	r3, #8
 8006210:	d102      	bne.n	8006218 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8006212:	2308      	movs	r3, #8
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e010      	b.n	800623a <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d007      	beq.n	8006236 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800622a:	f043 0220 	orr.w	r2, r3, #32
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e077      	b.n	8006326 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8006236:	2304      	movs	r3, #4
 8006238:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800623a:	f7ff fbad 	bl	8005998 <HAL_GetTick>
 800623e:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006240:	e021      	b.n	8006286 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d01d      	beq.n	8006286 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800624a:	f7ff fba5 	bl	8005998 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d302      	bcc.n	8006260 <HAL_ADC_PollForConversion+0x60>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d112      	bne.n	8006286 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4013      	ands	r3, r2
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10b      	bne.n	8006286 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006272:	f043 0204 	orr.w	r2, r3, #4
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e04f      	b.n	8006326 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4013      	ands	r3, r2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0d6      	beq.n	8006242 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006298:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7ff fc18 	bl	8005ada <LL_ADC_REG_IsTriggerSourceSWStart>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d031      	beq.n	8006314 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	7e9b      	ldrb	r3, [r3, #26]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d12d      	bne.n	8006314 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b08      	cmp	r3, #8
 80062c4:	d126      	bne.n	8006314 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fd20 	bl	8005d10 <LL_ADC_REG_IsConversionOngoing>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d112      	bne.n	80062fc <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 020c 	bic.w	r2, r2, #12
 80062e4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062ee:	f023 0301 	bic.w	r3, r3, #1
 80062f2:	f043 0201 	orr.w	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80062fa:	e00b      	b.n	8006314 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006300:	f043 0220 	orr.w	r2, r3, #32
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800630c:	f043 0201 	orr.w	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	7e1b      	ldrb	r3, [r3, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d103      	bne.n	8006324 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	220c      	movs	r2, #12
 8006322:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800633c:	4618      	mov	r0, r3
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	bc80      	pop	{r7}
 8006344:	4770      	bx	lr
	...

08006348 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006352:	2300      	movs	r3, #0
 8006354:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006356:	2300      	movs	r3, #0
 8006358:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_ADC_ConfigChannel+0x28>
 800636c:	2302      	movs	r3, #2
 800636e:	e110      	b.n	8006592 <HAL_ADC_ConfigChannel+0x24a>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f7ff fcc7 	bl	8005d10 <LL_ADC_REG_IsConversionOngoing>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	f040 80f7 	bne.w	8006578 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	2b02      	cmp	r3, #2
 8006390:	f000 80b1 	beq.w	80064f6 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800639c:	d004      	beq.n	80063a8 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80063a2:	4a7e      	ldr	r2, [pc, #504]	@ (800659c <HAL_ADC_ConfigChannel+0x254>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d108      	bne.n	80063ba <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f7ff fbc4 	bl	8005b40 <LL_ADC_REG_SetSequencerChAdd>
 80063b8:	e041      	b.n	800643e <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	210f      	movs	r1, #15
 80063c8:	fa01 f303 	lsl.w	r3, r1, r3
 80063cc:	43db      	mvns	r3, r3
 80063ce:	401a      	ands	r2, r3
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d105      	bne.n	80063e8 <HAL_ADC_ConfigChannel+0xa0>
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	0e9b      	lsrs	r3, r3, #26
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	e011      	b.n	800640c <HAL_ADC_ConfigChannel+0xc4>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	fa93 f3a3 	rbit	r3, r3
 80063f4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8006400:	2320      	movs	r3, #32
 8006402:	e003      	b.n	800640c <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	fab3 f383 	clz	r3, r3
 800640a:	b2db      	uxtb	r3, r3
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6849      	ldr	r1, [r1, #4]
 8006410:	f001 011f 	and.w	r1, r1, #31
 8006414:	408b      	lsls	r3, r1
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	089b      	lsrs	r3, r3, #2
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	429a      	cmp	r2, r3
 800642a:	d808      	bhi.n	800643e <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	6859      	ldr	r1, [r3, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	f7ff fb60 	bl	8005afe <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6818      	ldr	r0, [r3, #0]
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	6819      	ldr	r1, [r3, #0]
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	461a      	mov	r2, r3
 800644c:	f7ff fb9d 	bl	8005b8a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	f280 8097 	bge.w	8006588 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800645a:	4851      	ldr	r0, [pc, #324]	@ (80065a0 <HAL_ADC_ConfigChannel+0x258>)
 800645c:	f7ff fafa 	bl	8005a54 <LL_ADC_GetCommonPathInternalCh>
 8006460:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a4f      	ldr	r2, [pc, #316]	@ (80065a4 <HAL_ADC_ConfigChannel+0x25c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d120      	bne.n	80064ae <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8006472:	2b00      	cmp	r3, #0
 8006474:	d11b      	bne.n	80064ae <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800647c:	4619      	mov	r1, r3
 800647e:	4848      	ldr	r0, [pc, #288]	@ (80065a0 <HAL_ADC_ConfigChannel+0x258>)
 8006480:	f7ff fad6 	bl	8005a30 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006484:	4b48      	ldr	r3, [pc, #288]	@ (80065a8 <HAL_ADC_ConfigChannel+0x260>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	099b      	lsrs	r3, r3, #6
 800648a:	4a48      	ldr	r2, [pc, #288]	@ (80065ac <HAL_ADC_ConfigChannel+0x264>)
 800648c:	fba2 2303 	umull	r2, r3, r2, r3
 8006490:	099b      	lsrs	r3, r3, #6
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	4613      	mov	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800649e:	e002      	b.n	80064a6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	3b01      	subs	r3, #1
 80064a4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1f9      	bne.n	80064a0 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80064ac:	e06c      	b.n	8006588 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a3f      	ldr	r2, [pc, #252]	@ (80065b0 <HAL_ADC_ConfigChannel+0x268>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d10c      	bne.n	80064d2 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d107      	bne.n	80064d2 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80064c8:	4619      	mov	r1, r3
 80064ca:	4835      	ldr	r0, [pc, #212]	@ (80065a0 <HAL_ADC_ConfigChannel+0x258>)
 80064cc:	f7ff fab0 	bl	8005a30 <LL_ADC_SetCommonPathInternalCh>
 80064d0:	e05a      	b.n	8006588 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a37      	ldr	r2, [pc, #220]	@ (80065b4 <HAL_ADC_ConfigChannel+0x26c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d155      	bne.n	8006588 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d150      	bne.n	8006588 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80064ec:	4619      	mov	r1, r3
 80064ee:	482c      	ldr	r0, [pc, #176]	@ (80065a0 <HAL_ADC_ConfigChannel+0x258>)
 80064f0:	f7ff fa9e 	bl	8005a30 <LL_ADC_SetCommonPathInternalCh>
 80064f4:	e048      	b.n	8006588 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064fe:	d004      	beq.n	800650a <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006504:	4a25      	ldr	r2, [pc, #148]	@ (800659c <HAL_ADC_ConfigChannel+0x254>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d107      	bne.n	800651a <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4619      	mov	r1, r3
 8006514:	4610      	mov	r0, r2
 8006516:	f7ff fb25 	bl	8005b64 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	da32      	bge.n	8006588 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006522:	481f      	ldr	r0, [pc, #124]	@ (80065a0 <HAL_ADC_ConfigChannel+0x258>)
 8006524:	f7ff fa96 	bl	8005a54 <LL_ADC_GetCommonPathInternalCh>
 8006528:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1d      	ldr	r2, [pc, #116]	@ (80065a4 <HAL_ADC_ConfigChannel+0x25c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d107      	bne.n	8006544 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800653a:	4619      	mov	r1, r3
 800653c:	4818      	ldr	r0, [pc, #96]	@ (80065a0 <HAL_ADC_ConfigChannel+0x258>)
 800653e:	f7ff fa77 	bl	8005a30 <LL_ADC_SetCommonPathInternalCh>
 8006542:	e021      	b.n	8006588 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a19      	ldr	r2, [pc, #100]	@ (80065b0 <HAL_ADC_ConfigChannel+0x268>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d107      	bne.n	800655e <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006554:	4619      	mov	r1, r3
 8006556:	4812      	ldr	r0, [pc, #72]	@ (80065a0 <HAL_ADC_ConfigChannel+0x258>)
 8006558:	f7ff fa6a 	bl	8005a30 <LL_ADC_SetCommonPathInternalCh>
 800655c:	e014      	b.n	8006588 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a14      	ldr	r2, [pc, #80]	@ (80065b4 <HAL_ADC_ConfigChannel+0x26c>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d10f      	bne.n	8006588 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800656e:	4619      	mov	r1, r3
 8006570:	480b      	ldr	r0, [pc, #44]	@ (80065a0 <HAL_ADC_ConfigChannel+0x258>)
 8006572:	f7ff fa5d 	bl	8005a30 <LL_ADC_SetCommonPathInternalCh>
 8006576:	e007      	b.n	8006588 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800657c:	f043 0220 	orr.w	r2, r3, #32
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8006590:	7ffb      	ldrb	r3, [r7, #31]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	80000004 	.word	0x80000004
 80065a0:	40012708 	.word	0x40012708
 80065a4:	b0001000 	.word	0xb0001000
 80065a8:	20000014 	.word	0x20000014
 80065ac:	053e2d63 	.word	0x053e2d63
 80065b0:	b8004000 	.word	0xb8004000
 80065b4:	b4002000 	.word	0xb4002000

080065b8 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7ff fba3 	bl	8005d10 <LL_ADC_REG_IsConversionOngoing>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d033      	beq.n	8006638 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff fb63 	bl	8005ca0 <LL_ADC_IsDisableOngoing>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d104      	bne.n	80065ea <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7ff fb80 	bl	8005cea <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80065ea:	f7ff f9d5 	bl	8005998 <HAL_GetTick>
 80065ee:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80065f0:	e01b      	b.n	800662a <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80065f2:	f7ff f9d1 	bl	8005998 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d914      	bls.n	800662a <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00d      	beq.n	800662a <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006612:	f043 0210 	orr.w	r2, r3, #16
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800661e:	f043 0201 	orr.w	r2, r3, #1
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e007      	b.n	800663a <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1dc      	bne.n	80065f2 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
	...

08006644 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800664c:	2300      	movs	r3, #0
 800664e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4618      	mov	r0, r3
 8006656:	f7ff fb11 	bl	8005c7c <LL_ADC_IsEnabled>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d169      	bne.n	8006734 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	4b36      	ldr	r3, [pc, #216]	@ (8006740 <ADC_Enable+0xfc>)
 8006668:	4013      	ands	r3, r2
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00d      	beq.n	800668a <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006672:	f043 0210 	orr.w	r2, r3, #16
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800667e:	f043 0201 	orr.w	r2, r3, #1
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e055      	b.n	8006736 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff face 	bl	8005c30 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8006694:	482b      	ldr	r0, [pc, #172]	@ (8006744 <ADC_Enable+0x100>)
 8006696:	f7ff f9dd 	bl	8005a54 <LL_ADC_GetCommonPathInternalCh>
 800669a:	4603      	mov	r3, r0
 800669c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00f      	beq.n	80066c4 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066a4:	4b28      	ldr	r3, [pc, #160]	@ (8006748 <ADC_Enable+0x104>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	099b      	lsrs	r3, r3, #6
 80066aa:	4a28      	ldr	r2, [pc, #160]	@ (800674c <ADC_Enable+0x108>)
 80066ac:	fba2 2303 	umull	r2, r3, r2, r3
 80066b0:	099b      	lsrs	r3, r3, #6
 80066b2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80066b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80066b6:	e002      	b.n	80066be <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1f9      	bne.n	80066b8 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	7e5b      	ldrb	r3, [r3, #25]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d033      	beq.n	8006734 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80066cc:	f7ff f964 	bl	8005998 <HAL_GetTick>
 80066d0:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066d2:	e028      	b.n	8006726 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7ff facf 	bl	8005c7c <LL_ADC_IsEnabled>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d104      	bne.n	80066ee <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff faa1 	bl	8005c30 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80066ee:	f7ff f953 	bl	8005998 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d914      	bls.n	8006726 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b01      	cmp	r3, #1
 8006708:	d00d      	beq.n	8006726 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800670e:	f043 0210 	orr.w	r2, r3, #16
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800671a:	f043 0201 	orr.w	r2, r3, #1
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e007      	b.n	8006736 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	2b01      	cmp	r3, #1
 8006732:	d1cf      	bne.n	80066d4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	80000017 	.word	0x80000017
 8006744:	40012708 	.word	0x40012708
 8006748:	20000014 	.word	0x20000014
 800674c:	053e2d63 	.word	0x053e2d63

08006750 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b084      	sub	sp, #16
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff fa9f 	bl	8005ca0 <LL_ADC_IsDisableOngoing>
 8006762:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff fa87 	bl	8005c7c <LL_ADC_IsEnabled>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d047      	beq.n	8006804 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d144      	bne.n	8006804 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f003 0305 	and.w	r3, r3, #5
 8006784:	2b01      	cmp	r3, #1
 8006786:	d10c      	bne.n	80067a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fa62 	bl	8005c56 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2203      	movs	r2, #3
 8006798:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800679a:	f7ff f8fd 	bl	8005998 <HAL_GetTick>
 800679e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067a0:	e029      	b.n	80067f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067a6:	f043 0210 	orr.w	r2, r3, #16
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067b2:	f043 0201 	orr.w	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e023      	b.n	8006806 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80067be:	f7ff f8eb 	bl	8005998 <HAL_GetTick>
 80067c2:	4602      	mov	r2, r0
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d914      	bls.n	80067f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f003 0301 	and.w	r3, r3, #1
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00d      	beq.n	80067f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067de:	f043 0210 	orr.w	r2, r3, #16
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ea:	f043 0201 	orr.w	r2, r3, #1
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e007      	b.n	8006806 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1dc      	bne.n	80067be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <LL_ADC_SetCalibrationFactor>:
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800681e:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	431a      	orrs	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	bc80      	pop	{r7}
 8006834:	4770      	bx	lr

08006836 <LL_ADC_GetCalibrationFactor>:
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006844:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	bc80      	pop	{r7}
 8006850:	4770      	bx	lr

08006852 <LL_ADC_Enable>:
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006862:	f023 0317 	bic.w	r3, r3, #23
 8006866:	f043 0201 	orr.w	r2, r3, #1
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	609a      	str	r2, [r3, #8]
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	bc80      	pop	{r7}
 8006876:	4770      	bx	lr

08006878 <LL_ADC_Disable>:
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006888:	f023 0317 	bic.w	r3, r3, #23
 800688c:	f043 0202 	orr.w	r2, r3, #2
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	609a      	str	r2, [r3, #8]
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr

0800689e <LL_ADC_IsEnabled>:
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <LL_ADC_IsEnabled+0x18>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e000      	b.n	80068b8 <LL_ADC_IsEnabled+0x1a>
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc80      	pop	{r7}
 80068c0:	4770      	bx	lr

080068c2 <LL_ADC_StartCalibration>:
{
 80068c2:	b480      	push	{r7}
 80068c4:	b083      	sub	sp, #12
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068d2:	f023 0317 	bic.w	r3, r3, #23
 80068d6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	609a      	str	r2, [r3, #8]
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bc80      	pop	{r7}
 80068e6:	4770      	bx	lr

080068e8 <LL_ADC_IsCalibrationOnGoing>:
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068fc:	d101      	bne.n	8006902 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	bc80      	pop	{r7}
 800690c:	4770      	bx	lr

0800690e <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b088      	sub	sp, #32
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8006916:	2300      	movs	r3, #0
 8006918:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006924:	2b01      	cmp	r3, #1
 8006926:	d101      	bne.n	800692c <HAL_ADCEx_Calibration_Start+0x1e>
 8006928:	2302      	movs	r3, #2
 800692a:	e0b9      	b.n	8006aa0 <HAL_ADCEx_Calibration_Start+0x192>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ff0b 	bl	8006750 <ADC_Disable>
 800693a:	4603      	mov	r3, r0
 800693c:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff ffab 	bl	800689e <LL_ADC_IsEnabled>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	f040 809d 	bne.w	8006a8a <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006954:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006958:	f043 0202 	orr.w	r2, r3, #2
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	f248 0303 	movw	r3, #32771	@ 0x8003
 800696a:	4013      	ands	r3, r2
 800696c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800697c:	f023 0303 	bic.w	r3, r3, #3
 8006980:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8006982:	2300      	movs	r3, #0
 8006984:	61fb      	str	r3, [r7, #28]
 8006986:	e02e      	b.n	80069e6 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4618      	mov	r0, r3
 800698e:	f7ff ff98 	bl	80068c2 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006992:	e014      	b.n	80069be <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	3301      	adds	r3, #1
 8006998:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 80069a0:	d30d      	bcc.n	80069be <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a6:	f023 0312 	bic.w	r3, r3, #18
 80069aa:	f043 0210 	orr.w	r2, r3, #16
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e070      	b.n	8006aa0 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff ff90 	bl	80068e8 <LL_ADC_IsCalibrationOnGoing>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e2      	bne.n	8006994 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7ff ff2f 	bl	8006836 <LL_ADC_GetCalibrationFactor>
 80069d8:	4602      	mov	r2, r0
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	4413      	add	r3, r2
 80069de:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	3301      	adds	r3, #1
 80069e4:	61fb      	str	r3, [r7, #28]
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2b07      	cmp	r3, #7
 80069ea:	d9cd      	bls.n	8006988 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80069ec:	69ba      	ldr	r2, [r7, #24]
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff ff29 	bl	8006852 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	69b9      	ldr	r1, [r7, #24]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f7ff ff01 	bl	800680e <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff ff31 	bl	8006878 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8006a16:	f7fe ffbf 	bl	8005998 <HAL_GetTick>
 8006a1a:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a1c:	e01c      	b.n	8006a58 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8006a1e:	f7fe ffbb 	bl	8005998 <HAL_GetTick>
 8006a22:	4602      	mov	r2, r0
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d915      	bls.n	8006a58 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7ff ff34 	bl	800689e <LL_ADC_IsEnabled>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00d      	beq.n	8006a58 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a40:	f043 0210 	orr.w	r2, r3, #16
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a4c:	f043 0201 	orr.w	r2, r3, #1
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e023      	b.n	8006aa0 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7ff ff1e 	bl	800689e <LL_ADC_IsEnabled>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1da      	bne.n	8006a1e <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68d9      	ldr	r1, [r3, #12]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	430a      	orrs	r2, r1
 8006a76:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a7c:	f023 0303 	bic.w	r3, r3, #3
 8006a80:	f043 0201 	orr.w	r2, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a88:	e005      	b.n	8006a96 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a8e:	f043 0210 	orr.w	r2, r3, #16
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8006a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}

08006aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f003 0307 	and.w	r3, r3, #7
 8006ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8006aec <__NVIC_SetPriorityGrouping+0x44>)
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ad0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ada:	4a04      	ldr	r2, [pc, #16]	@ (8006aec <__NVIC_SetPriorityGrouping+0x44>)
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	60d3      	str	r3, [r2, #12]
}
 8006ae0:	bf00      	nop
 8006ae2:	3714      	adds	r7, #20
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr
 8006aea:	bf00      	nop
 8006aec:	e000ed00 	.word	0xe000ed00

08006af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006af4:	4b04      	ldr	r3, [pc, #16]	@ (8006b08 <__NVIC_GetPriorityGrouping+0x18>)
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	0a1b      	lsrs	r3, r3, #8
 8006afa:	f003 0307 	and.w	r3, r3, #7
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	e000ed00 	.word	0xe000ed00

08006b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	4603      	mov	r3, r0
 8006b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	db0b      	blt.n	8006b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	f003 021f 	and.w	r2, r3, #31
 8006b24:	4906      	ldr	r1, [pc, #24]	@ (8006b40 <__NVIC_EnableIRQ+0x34>)
 8006b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bc80      	pop	{r7}
 8006b3e:	4770      	bx	lr
 8006b40:	e000e100 	.word	0xe000e100

08006b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	6039      	str	r1, [r7, #0]
 8006b4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	db0a      	blt.n	8006b6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	490c      	ldr	r1, [pc, #48]	@ (8006b90 <__NVIC_SetPriority+0x4c>)
 8006b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b62:	0112      	lsls	r2, r2, #4
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	440b      	add	r3, r1
 8006b68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b6c:	e00a      	b.n	8006b84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	4908      	ldr	r1, [pc, #32]	@ (8006b94 <__NVIC_SetPriority+0x50>)
 8006b74:	79fb      	ldrb	r3, [r7, #7]
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	3b04      	subs	r3, #4
 8006b7c:	0112      	lsls	r2, r2, #4
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	440b      	add	r3, r1
 8006b82:	761a      	strb	r2, [r3, #24]
}
 8006b84:	bf00      	nop
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bc80      	pop	{r7}
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	e000e100 	.word	0xe000e100
 8006b94:	e000ed00 	.word	0xe000ed00

08006b98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b089      	sub	sp, #36	@ 0x24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f1c3 0307 	rsb	r3, r3, #7
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	bf28      	it	cs
 8006bb6:	2304      	movcs	r3, #4
 8006bb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	2b06      	cmp	r3, #6
 8006bc0:	d902      	bls.n	8006bc8 <NVIC_EncodePriority+0x30>
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	3b03      	subs	r3, #3
 8006bc6:	e000      	b.n	8006bca <NVIC_EncodePriority+0x32>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd6:	43da      	mvns	r2, r3
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	401a      	ands	r2, r3
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006be0:	f04f 31ff 	mov.w	r1, #4294967295
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bea:	43d9      	mvns	r1, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006bf0:	4313      	orrs	r3, r2
         );
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3724      	adds	r7, #36	@ 0x24
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bc80      	pop	{r7}
 8006bfa:	4770      	bx	lr

08006bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c0c:	d301      	bcc.n	8006c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e00f      	b.n	8006c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c12:	4a0a      	ldr	r2, [pc, #40]	@ (8006c3c <SysTick_Config+0x40>)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c1a:	210f      	movs	r1, #15
 8006c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c20:	f7ff ff90 	bl	8006b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c24:	4b05      	ldr	r3, [pc, #20]	@ (8006c3c <SysTick_Config+0x40>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c2a:	4b04      	ldr	r3, [pc, #16]	@ (8006c3c <SysTick_Config+0x40>)
 8006c2c:	2207      	movs	r2, #7
 8006c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3708      	adds	r7, #8
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	e000e010 	.word	0xe000e010

08006c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f7ff ff2d 	bl	8006aa8 <__NVIC_SetPriorityGrouping>
}
 8006c4e:	bf00      	nop
 8006c50:	3708      	adds	r7, #8
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b086      	sub	sp, #24
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	607a      	str	r2, [r7, #4]
 8006c62:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006c64:	f7ff ff44 	bl	8006af0 <__NVIC_GetPriorityGrouping>
 8006c68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	6978      	ldr	r0, [r7, #20]
 8006c70:	f7ff ff92 	bl	8006b98 <NVIC_EncodePriority>
 8006c74:	4602      	mov	r2, r0
 8006c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7ff ff61 	bl	8006b44 <__NVIC_SetPriority>
}
 8006c82:	bf00      	nop
 8006c84:	3718      	adds	r7, #24
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	4603      	mov	r3, r0
 8006c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7ff ff37 	bl	8006b0c <__NVIC_EnableIRQ>
}
 8006c9e:	bf00      	nop
 8006ca0:	3708      	adds	r7, #8
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff ffa4 	bl	8006bfc <SysTick_Config>
 8006cb4:	4603      	mov	r3, r0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3708      	adds	r7, #8
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
	...

08006cc0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006cce:	e140      	b.n	8006f52 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	2101      	movs	r1, #1
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cdc:	4013      	ands	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8132 	beq.w	8006f4c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f003 0303 	and.w	r3, r3, #3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d005      	beq.n	8006d00 <HAL_GPIO_Init+0x40>
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	f003 0303 	and.w	r3, r3, #3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d130      	bne.n	8006d62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	005b      	lsls	r3, r3, #1
 8006d0a:	2203      	movs	r2, #3
 8006d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d10:	43db      	mvns	r3, r3
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4013      	ands	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d36:	2201      	movs	r2, #1
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3e:	43db      	mvns	r3, r3
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	4013      	ands	r3, r2
 8006d44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	091b      	lsrs	r3, r3, #4
 8006d4c:	f003 0201 	and.w	r2, r3, #1
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	fa02 f303 	lsl.w	r3, r2, r3
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	f003 0303 	and.w	r3, r3, #3
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d017      	beq.n	8006d9e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	2203      	movs	r2, #3
 8006d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d7e:	43db      	mvns	r3, r3
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4013      	ands	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	689a      	ldr	r2, [r3, #8]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	4313      	orrs	r3, r2
 8006d96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d123      	bne.n	8006df2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	08da      	lsrs	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3208      	adds	r2, #8
 8006db2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	f003 0307 	and.w	r3, r3, #7
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	691a      	ldr	r2, [r3, #16]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	fa02 f303 	lsl.w	r3, r2, r3
 8006dde:	693a      	ldr	r2, [r7, #16]
 8006de0:	4313      	orrs	r3, r2
 8006de2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	08da      	lsrs	r2, r3, #3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3208      	adds	r2, #8
 8006dec:	6939      	ldr	r1, [r7, #16]
 8006dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43db      	mvns	r3, r3
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4013      	ands	r3, r2
 8006e08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f003 0203 	and.w	r2, r3, #3
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	005b      	lsls	r3, r3, #1
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 808c 	beq.w	8006f4c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006e34:	4a4e      	ldr	r2, [pc, #312]	@ (8006f70 <HAL_GPIO_Init+0x2b0>)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	089b      	lsrs	r3, r3, #2
 8006e3a:	3302      	adds	r3, #2
 8006e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	2207      	movs	r2, #7
 8006e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e50:	43db      	mvns	r3, r3
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	4013      	ands	r3, r2
 8006e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006e5e:	d00d      	beq.n	8006e7c <HAL_GPIO_Init+0x1bc>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a44      	ldr	r2, [pc, #272]	@ (8006f74 <HAL_GPIO_Init+0x2b4>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d007      	beq.n	8006e78 <HAL_GPIO_Init+0x1b8>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a43      	ldr	r2, [pc, #268]	@ (8006f78 <HAL_GPIO_Init+0x2b8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d101      	bne.n	8006e74 <HAL_GPIO_Init+0x1b4>
 8006e70:	2302      	movs	r3, #2
 8006e72:	e004      	b.n	8006e7e <HAL_GPIO_Init+0x1be>
 8006e74:	2307      	movs	r3, #7
 8006e76:	e002      	b.n	8006e7e <HAL_GPIO_Init+0x1be>
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e000      	b.n	8006e7e <HAL_GPIO_Init+0x1be>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	f002 0203 	and.w	r2, r2, #3
 8006e84:	0092      	lsls	r2, r2, #2
 8006e86:	4093      	lsls	r3, r2
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006e8e:	4938      	ldr	r1, [pc, #224]	@ (8006f70 <HAL_GPIO_Init+0x2b0>)
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	089b      	lsrs	r3, r3, #2
 8006e94:	3302      	adds	r3, #2
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e9c:	4b37      	ldr	r3, [pc, #220]	@ (8006f7c <HAL_GPIO_Init+0x2bc>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	43db      	mvns	r3, r3
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8006f7c <HAL_GPIO_Init+0x2bc>)
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8006f7c <HAL_GPIO_Init+0x2bc>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	43db      	mvns	r3, r3
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006eea:	4a24      	ldr	r2, [pc, #144]	@ (8006f7c <HAL_GPIO_Init+0x2bc>)
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8006ef0:	4b22      	ldr	r3, [pc, #136]	@ (8006f7c <HAL_GPIO_Init+0x2bc>)
 8006ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006ef6:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	43db      	mvns	r3, r3
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4013      	ands	r3, r2
 8006f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d003      	beq.n	8006f16 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8006f16:	4a19      	ldr	r2, [pc, #100]	@ (8006f7c <HAL_GPIO_Init+0x2bc>)
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8006f1e:	4b17      	ldr	r3, [pc, #92]	@ (8006f7c <HAL_GPIO_Init+0x2bc>)
 8006f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f24:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	43db      	mvns	r3, r3
 8006f2a:	693a      	ldr	r2, [r7, #16]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d003      	beq.n	8006f44 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8006f44:	4a0d      	ldr	r2, [pc, #52]	@ (8006f7c <HAL_GPIO_Init+0x2bc>)
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	fa22 f303 	lsr.w	r3, r2, r3
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f47f aeb7 	bne.w	8006cd0 <HAL_GPIO_Init+0x10>
  }
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	371c      	adds	r7, #28
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	bc80      	pop	{r7}
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40010000 	.word	0x40010000
 8006f74:	48000400 	.word	0x48000400
 8006f78:	48000800 	.word	0x48000800
 8006f7c:	58000800 	.word	0x58000800

08006f80 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006f8e:	e0af      	b.n	80070f0 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006f90:	2201      	movs	r2, #1
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	683a      	ldr	r2, [r7, #0]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 80a2 	beq.w	80070ea <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006fa6:	4a59      	ldr	r2, [pc, #356]	@ (800710c <HAL_GPIO_DeInit+0x18c>)
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	089b      	lsrs	r3, r3, #2
 8006fac:	3302      	adds	r3, #2
 8006fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fb2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	f003 0303 	and.w	r3, r3, #3
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	2207      	movs	r2, #7
 8006fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006fce:	d00d      	beq.n	8006fec <HAL_GPIO_DeInit+0x6c>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	4a4f      	ldr	r2, [pc, #316]	@ (8007110 <HAL_GPIO_DeInit+0x190>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d007      	beq.n	8006fe8 <HAL_GPIO_DeInit+0x68>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a4e      	ldr	r2, [pc, #312]	@ (8007114 <HAL_GPIO_DeInit+0x194>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d101      	bne.n	8006fe4 <HAL_GPIO_DeInit+0x64>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e004      	b.n	8006fee <HAL_GPIO_DeInit+0x6e>
 8006fe4:	2307      	movs	r3, #7
 8006fe6:	e002      	b.n	8006fee <HAL_GPIO_DeInit+0x6e>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e000      	b.n	8006fee <HAL_GPIO_DeInit+0x6e>
 8006fec:	2300      	movs	r3, #0
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	f002 0203 	and.w	r2, r2, #3
 8006ff4:	0092      	lsls	r2, r2, #2
 8006ff6:	4093      	lsls	r3, r2
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d136      	bne.n	800706c <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8006ffe:	4b46      	ldr	r3, [pc, #280]	@ (8007118 <HAL_GPIO_DeInit+0x198>)
 8007000:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	43db      	mvns	r3, r3
 8007008:	4943      	ldr	r1, [pc, #268]	@ (8007118 <HAL_GPIO_DeInit+0x198>)
 800700a:	4013      	ands	r3, r2
 800700c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8007010:	4b41      	ldr	r3, [pc, #260]	@ (8007118 <HAL_GPIO_DeInit+0x198>)
 8007012:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	43db      	mvns	r3, r3
 800701a:	493f      	ldr	r1, [pc, #252]	@ (8007118 <HAL_GPIO_DeInit+0x198>)
 800701c:	4013      	ands	r3, r2
 800701e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8007022:	4b3d      	ldr	r3, [pc, #244]	@ (8007118 <HAL_GPIO_DeInit+0x198>)
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	43db      	mvns	r3, r3
 800702a:	493b      	ldr	r1, [pc, #236]	@ (8007118 <HAL_GPIO_DeInit+0x198>)
 800702c:	4013      	ands	r3, r2
 800702e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8007030:	4b39      	ldr	r3, [pc, #228]	@ (8007118 <HAL_GPIO_DeInit+0x198>)
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	43db      	mvns	r3, r3
 8007038:	4937      	ldr	r1, [pc, #220]	@ (8007118 <HAL_GPIO_DeInit+0x198>)
 800703a:	4013      	ands	r3, r2
 800703c:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	f003 0303 	and.w	r3, r3, #3
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	2207      	movs	r2, #7
 8007048:	fa02 f303 	lsl.w	r3, r2, r3
 800704c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800704e:	4a2f      	ldr	r2, [pc, #188]	@ (800710c <HAL_GPIO_DeInit+0x18c>)
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	089b      	lsrs	r3, r3, #2
 8007054:	3302      	adds	r3, #2
 8007056:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	43da      	mvns	r2, r3
 800705e:	482b      	ldr	r0, [pc, #172]	@ (800710c <HAL_GPIO_DeInit+0x18c>)
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	089b      	lsrs	r3, r3, #2
 8007064:	400a      	ands	r2, r1
 8007066:	3302      	adds	r3, #2
 8007068:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	005b      	lsls	r3, r3, #1
 8007074:	2103      	movs	r1, #3
 8007076:	fa01 f303 	lsl.w	r3, r1, r3
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	08da      	lsrs	r2, r3, #3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	3208      	adds	r2, #8
 8007088:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	f003 0307 	and.w	r3, r3, #7
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	220f      	movs	r2, #15
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	43db      	mvns	r3, r3
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	08d2      	lsrs	r2, r2, #3
 80070a0:	4019      	ands	r1, r3
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	3208      	adds	r2, #8
 80070a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	005b      	lsls	r3, r3, #1
 80070b2:	2103      	movs	r1, #3
 80070b4:	fa01 f303 	lsl.w	r3, r1, r3
 80070b8:	43db      	mvns	r3, r3
 80070ba:	401a      	ands	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	2101      	movs	r1, #1
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	fa01 f303 	lsl.w	r3, r1, r3
 80070cc:	43db      	mvns	r3, r3
 80070ce:	401a      	ands	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68da      	ldr	r2, [r3, #12]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	2103      	movs	r1, #3
 80070de:	fa01 f303 	lsl.w	r3, r1, r3
 80070e2:	43db      	mvns	r3, r3
 80070e4:	401a      	ands	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60da      	str	r2, [r3, #12]
    }

    position++;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	3301      	adds	r3, #1
 80070ee:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	fa22 f303 	lsr.w	r3, r2, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f47f af49 	bne.w	8006f90 <HAL_GPIO_DeInit+0x10>
  }
}
 80070fe:	bf00      	nop
 8007100:	bf00      	nop
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40010000 	.word	0x40010000
 8007110:	48000400 	.word	0x48000400
 8007114:	48000800 	.word	0x48000800
 8007118:	58000800 	.word	0x58000800

0800711c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	691a      	ldr	r2, [r3, #16]
 800712c:	887b      	ldrh	r3, [r7, #2]
 800712e:	4013      	ands	r3, r2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]
 8007138:	e001      	b.n	800713e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800713e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr

0800714a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	460b      	mov	r3, r1
 8007154:	807b      	strh	r3, [r7, #2]
 8007156:	4613      	mov	r3, r2
 8007158:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800715a:	787b      	ldrb	r3, [r7, #1]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d003      	beq.n	8007168 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007160:	887a      	ldrh	r2, [r7, #2]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007166:	e002      	b.n	800716e <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007168:	887a      	ldrh	r2, [r7, #2]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr

08007178 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800718a:	887a      	ldrh	r2, [r7, #2]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4013      	ands	r3, r2
 8007190:	041a      	lsls	r2, r3, #16
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	43d9      	mvns	r1, r3
 8007196:	887b      	ldrh	r3, [r7, #2]
 8007198:	400b      	ands	r3, r1
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	619a      	str	r2, [r3, #24]
}
 80071a0:	bf00      	nop
 80071a2:	3714      	adds	r7, #20
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bc80      	pop	{r7}
 80071a8:	4770      	bx	lr

080071aa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e081      	b.n	80072c0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d106      	bne.n	80071d6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f7fb f99b 	bl	800250c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2224      	movs	r2, #36	@ 0x24
 80071da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80071fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800720a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d107      	bne.n	8007224 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007220:	609a      	str	r2, [r3, #8]
 8007222:	e006      	b.n	8007232 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689a      	ldr	r2, [r3, #8]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007230:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d104      	bne.n	8007244 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007242:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	6812      	ldr	r2, [r2, #0]
 800724e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007256:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007266:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	695b      	ldr	r3, [r3, #20]
 8007270:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	430a      	orrs	r2, r1
 8007280:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	69d9      	ldr	r1, [r3, #28]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a1a      	ldr	r2, [r3, #32]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f042 0201 	orr.w	r2, r2, #1
 80072a0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3708      	adds	r7, #8
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d101      	bne.n	80072da <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	e021      	b.n	800731e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2224      	movs	r2, #36	@ 0x24
 80072de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fb f982 	bl	80025fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b088      	sub	sp, #32
 800732c:	af02      	add	r7, sp, #8
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	607a      	str	r2, [r7, #4]
 8007332:	461a      	mov	r2, r3
 8007334:	460b      	mov	r3, r1
 8007336:	817b      	strh	r3, [r7, #10]
 8007338:	4613      	mov	r3, r2
 800733a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b20      	cmp	r3, #32
 8007346:	f040 80da 	bne.w	80074fe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007350:	2b01      	cmp	r3, #1
 8007352:	d101      	bne.n	8007358 <HAL_I2C_Master_Transmit+0x30>
 8007354:	2302      	movs	r3, #2
 8007356:	e0d3      	b.n	8007500 <HAL_I2C_Master_Transmit+0x1d8>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007360:	f7fe fb1a 	bl	8005998 <HAL_GetTick>
 8007364:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	2319      	movs	r3, #25
 800736c:	2201      	movs	r2, #1
 800736e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007372:	68f8      	ldr	r0, [r7, #12]
 8007374:	f000 fccd 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800737e:	2301      	movs	r3, #1
 8007380:	e0be      	b.n	8007500 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2221      	movs	r2, #33	@ 0x21
 8007386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2210      	movs	r2, #16
 800738e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2200      	movs	r2, #0
 8007396:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	893a      	ldrh	r2, [r7, #8]
 80073a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2200      	movs	r2, #0
 80073a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	2bff      	cmp	r3, #255	@ 0xff
 80073b2:	d90e      	bls.n	80073d2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	22ff      	movs	r2, #255	@ 0xff
 80073b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073be:	b2da      	uxtb	r2, r3
 80073c0:	8979      	ldrh	r1, [r7, #10]
 80073c2:	4b51      	ldr	r3, [pc, #324]	@ (8007508 <HAL_I2C_Master_Transmit+0x1e0>)
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 fe3e 	bl	800804c <I2C_TransferConfig>
 80073d0:	e06c      	b.n	80074ac <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	8979      	ldrh	r1, [r7, #10]
 80073e4:	4b48      	ldr	r3, [pc, #288]	@ (8007508 <HAL_I2C_Master_Transmit+0x1e0>)
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 fe2d 	bl	800804c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80073f2:	e05b      	b.n	80074ac <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073f4:	697a      	ldr	r2, [r7, #20]
 80073f6:	6a39      	ldr	r1, [r7, #32]
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fcca 	bl	8007d92 <I2C_WaitOnTXISFlagUntilTimeout>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e07b      	b.n	8007500 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	781a      	ldrb	r2, [r3, #0]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007418:	1c5a      	adds	r2, r3, #1
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007430:	3b01      	subs	r3, #1
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800743c:	b29b      	uxth	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	d034      	beq.n	80074ac <HAL_I2C_Master_Transmit+0x184>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007446:	2b00      	cmp	r3, #0
 8007448:	d130      	bne.n	80074ac <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	6a3b      	ldr	r3, [r7, #32]
 8007450:	2200      	movs	r2, #0
 8007452:	2180      	movs	r1, #128	@ 0x80
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fc5c 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e04d      	b.n	8007500 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007468:	b29b      	uxth	r3, r3
 800746a:	2bff      	cmp	r3, #255	@ 0xff
 800746c:	d90e      	bls.n	800748c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	22ff      	movs	r2, #255	@ 0xff
 8007472:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007478:	b2da      	uxtb	r2, r3
 800747a:	8979      	ldrh	r1, [r7, #10]
 800747c:	2300      	movs	r3, #0
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fde1 	bl	800804c <I2C_TransferConfig>
 800748a:	e00f      	b.n	80074ac <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007490:	b29a      	uxth	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800749a:	b2da      	uxtb	r2, r3
 800749c:	8979      	ldrh	r1, [r7, #10]
 800749e:	2300      	movs	r3, #0
 80074a0:	9300      	str	r3, [sp, #0]
 80074a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074a6:	68f8      	ldr	r0, [r7, #12]
 80074a8:	f000 fdd0 	bl	800804c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d19e      	bne.n	80073f4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	6a39      	ldr	r1, [r7, #32]
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f000 fca9 	bl	8007e12 <I2C_WaitOnSTOPFlagUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e01a      	b.n	8007500 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2220      	movs	r2, #32
 80074d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	6859      	ldr	r1, [r3, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	4b0b      	ldr	r3, [pc, #44]	@ (800750c <HAL_I2C_Master_Transmit+0x1e4>)
 80074de:	400b      	ands	r3, r1
 80074e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2200      	movs	r2, #0
 80074f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	e000      	b.n	8007500 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80074fe:	2302      	movs	r3, #2
  }
}
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	80002000 	.word	0x80002000
 800750c:	fe00e800 	.word	0xfe00e800

08007510 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	4608      	mov	r0, r1
 800751a:	4611      	mov	r1, r2
 800751c:	461a      	mov	r2, r3
 800751e:	4603      	mov	r3, r0
 8007520:	817b      	strh	r3, [r7, #10]
 8007522:	460b      	mov	r3, r1
 8007524:	813b      	strh	r3, [r7, #8]
 8007526:	4613      	mov	r3, r2
 8007528:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b20      	cmp	r3, #32
 8007534:	f040 80f9 	bne.w	800772a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_I2C_Mem_Write+0x34>
 800753e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800754a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e0ed      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <HAL_I2C_Mem_Write+0x4e>
 800755a:	2302      	movs	r3, #2
 800755c:	e0e6      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007566:	f7fe fa17 	bl	8005998 <HAL_GetTick>
 800756a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	2319      	movs	r3, #25
 8007572:	2201      	movs	r2, #1
 8007574:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 fbca 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e0d1      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2221      	movs	r2, #33	@ 0x21
 800758c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2240      	movs	r2, #64	@ 0x40
 8007594:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a3a      	ldr	r2, [r7, #32]
 80075a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80075a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80075b0:	88f8      	ldrh	r0, [r7, #6]
 80075b2:	893a      	ldrh	r2, [r7, #8]
 80075b4:	8979      	ldrh	r1, [r7, #10]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	9301      	str	r3, [sp, #4]
 80075ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4603      	mov	r3, r0
 80075c0:	68f8      	ldr	r0, [r7, #12]
 80075c2:	f000 fadb 	bl	8007b7c <I2C_RequestMemoryWrite>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d005      	beq.n	80075d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80075d4:	2301      	movs	r3, #1
 80075d6:	e0a9      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80075dc:	b29b      	uxth	r3, r3
 80075de:	2bff      	cmp	r3, #255	@ 0xff
 80075e0:	d90e      	bls.n	8007600 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	22ff      	movs	r2, #255	@ 0xff
 80075e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	8979      	ldrh	r1, [r7, #10]
 80075f0:	2300      	movs	r3, #0
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fd27 	bl	800804c <I2C_TransferConfig>
 80075fe:	e00f      	b.n	8007620 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007604:	b29a      	uxth	r2, r3
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800760e:	b2da      	uxtb	r2, r3
 8007610:	8979      	ldrh	r1, [r7, #10]
 8007612:	2300      	movs	r3, #0
 8007614:	9300      	str	r3, [sp, #0]
 8007616:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fd16 	bl	800804c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 fbb4 	bl	8007d92 <I2C_WaitOnTXISFlagUntilTimeout>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e07b      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007638:	781a      	ldrb	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800765c:	3b01      	subs	r3, #1
 800765e:	b29a      	uxth	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007668:	b29b      	uxth	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d034      	beq.n	80076d8 <HAL_I2C_Mem_Write+0x1c8>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d130      	bne.n	80076d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800767c:	2200      	movs	r2, #0
 800767e:	2180      	movs	r1, #128	@ 0x80
 8007680:	68f8      	ldr	r0, [r7, #12]
 8007682:	f000 fb46 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 8007686:	4603      	mov	r3, r0
 8007688:	2b00      	cmp	r3, #0
 800768a:	d001      	beq.n	8007690 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e04d      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007694:	b29b      	uxth	r3, r3
 8007696:	2bff      	cmp	r3, #255	@ 0xff
 8007698:	d90e      	bls.n	80076b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	22ff      	movs	r2, #255	@ 0xff
 800769e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	8979      	ldrh	r1, [r7, #10]
 80076a8:	2300      	movs	r3, #0
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 fccb 	bl	800804c <I2C_TransferConfig>
 80076b6:	e00f      	b.n	80076d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	8979      	ldrh	r1, [r7, #10]
 80076ca:	2300      	movs	r3, #0
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f000 fcba 	bl	800804c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076dc:	b29b      	uxth	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d19e      	bne.n	8007620 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 fb93 	bl	8007e12 <I2C_WaitOnSTOPFlagUntilTimeout>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e01a      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	2220      	movs	r2, #32
 80076fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6859      	ldr	r1, [r3, #4]
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	4b0a      	ldr	r3, [pc, #40]	@ (8007734 <HAL_I2C_Mem_Write+0x224>)
 800770a:	400b      	ands	r3, r1
 800770c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2220      	movs	r2, #32
 8007712:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	e000      	b.n	800772c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800772a:	2302      	movs	r3, #2
  }
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	fe00e800 	.word	0xfe00e800

08007738 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	4608      	mov	r0, r1
 8007742:	4611      	mov	r1, r2
 8007744:	461a      	mov	r2, r3
 8007746:	4603      	mov	r3, r0
 8007748:	817b      	strh	r3, [r7, #10]
 800774a:	460b      	mov	r3, r1
 800774c:	813b      	strh	r3, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b20      	cmp	r3, #32
 800775c:	f040 80fd 	bne.w	800795a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d002      	beq.n	800776c <HAL_I2C_Mem_Read+0x34>
 8007766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007768:	2b00      	cmp	r3, #0
 800776a:	d105      	bne.n	8007778 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007772:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e0f1      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800777e:	2b01      	cmp	r3, #1
 8007780:	d101      	bne.n	8007786 <HAL_I2C_Mem_Read+0x4e>
 8007782:	2302      	movs	r3, #2
 8007784:	e0ea      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800778e:	f7fe f903 	bl	8005998 <HAL_GetTick>
 8007792:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	2319      	movs	r3, #25
 800779a:	2201      	movs	r2, #1
 800779c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fab6 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	e0d5      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2222      	movs	r2, #34	@ 0x22
 80077b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	2240      	movs	r2, #64	@ 0x40
 80077bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6a3a      	ldr	r2, [r7, #32]
 80077ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80077d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80077d8:	88f8      	ldrh	r0, [r7, #6]
 80077da:	893a      	ldrh	r2, [r7, #8]
 80077dc:	8979      	ldrh	r1, [r7, #10]
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	9301      	str	r3, [sp, #4]
 80077e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	4603      	mov	r3, r0
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f000 fa1b 	bl	8007c24 <I2C_RequestMemoryRead>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0ad      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007804:	b29b      	uxth	r3, r3
 8007806:	2bff      	cmp	r3, #255	@ 0xff
 8007808:	d90e      	bls.n	8007828 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	22ff      	movs	r2, #255	@ 0xff
 800780e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007814:	b2da      	uxtb	r2, r3
 8007816:	8979      	ldrh	r1, [r7, #10]
 8007818:	4b52      	ldr	r3, [pc, #328]	@ (8007964 <HAL_I2C_Mem_Read+0x22c>)
 800781a:	9300      	str	r3, [sp, #0]
 800781c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fc13 	bl	800804c <I2C_TransferConfig>
 8007826:	e00f      	b.n	8007848 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007836:	b2da      	uxtb	r2, r3
 8007838:	8979      	ldrh	r1, [r7, #10]
 800783a:	4b4a      	ldr	r3, [pc, #296]	@ (8007964 <HAL_I2C_Mem_Read+0x22c>)
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007842:	68f8      	ldr	r0, [r7, #12]
 8007844:	f000 fc02 	bl	800804c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784e:	2200      	movs	r2, #0
 8007850:	2104      	movs	r1, #4
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f000 fa5d 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	e07c      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800788a:	b29b      	uxth	r3, r3
 800788c:	3b01      	subs	r3, #1
 800788e:	b29a      	uxth	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007898:	b29b      	uxth	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d034      	beq.n	8007908 <HAL_I2C_Mem_Read+0x1d0>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d130      	bne.n	8007908 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	2200      	movs	r2, #0
 80078ae:	2180      	movs	r1, #128	@ 0x80
 80078b0:	68f8      	ldr	r0, [r7, #12]
 80078b2:	f000 fa2e 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e04d      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	2bff      	cmp	r3, #255	@ 0xff
 80078c8:	d90e      	bls.n	80078e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	22ff      	movs	r2, #255	@ 0xff
 80078ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078d4:	b2da      	uxtb	r2, r3
 80078d6:	8979      	ldrh	r1, [r7, #10]
 80078d8:	2300      	movs	r3, #0
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 fbb3 	bl	800804c <I2C_TransferConfig>
 80078e6:	e00f      	b.n	8007908 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078f6:	b2da      	uxtb	r2, r3
 80078f8:	8979      	ldrh	r1, [r7, #10]
 80078fa:	2300      	movs	r3, #0
 80078fc:	9300      	str	r3, [sp, #0]
 80078fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 fba2 	bl	800804c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d19a      	bne.n	8007848 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 fa7b 	bl	8007e12 <I2C_WaitOnSTOPFlagUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e01a      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2220      	movs	r2, #32
 800792c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	6859      	ldr	r1, [r3, #4]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	4b0b      	ldr	r3, [pc, #44]	@ (8007968 <HAL_I2C_Mem_Read+0x230>)
 800793a:	400b      	ands	r3, r1
 800793c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2220      	movs	r2, #32
 8007942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	e000      	b.n	800795c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800795a:	2302      	movs	r3, #2
  }
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	80002400 	.word	0x80002400
 8007968:	fe00e800 	.word	0xfe00e800

0800796c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08a      	sub	sp, #40	@ 0x28
 8007970:	af02      	add	r7, sp, #8
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	607a      	str	r2, [r7, #4]
 8007976:	603b      	str	r3, [r7, #0]
 8007978:	460b      	mov	r3, r1
 800797a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800797c:	2300      	movs	r3, #0
 800797e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007986:	b2db      	uxtb	r3, r3
 8007988:	2b20      	cmp	r3, #32
 800798a:	f040 80f1 	bne.w	8007b70 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800799c:	d101      	bne.n	80079a2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800799e:	2302      	movs	r3, #2
 80079a0:	e0e7      	b.n	8007b72 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <HAL_I2C_IsDeviceReady+0x44>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e0e0      	b.n	8007b72 <HAL_I2C_IsDeviceReady+0x206>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2224      	movs	r2, #36	@ 0x24
 80079bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d107      	bne.n	80079de <HAL_I2C_IsDeviceReady+0x72>
 80079ce:	897b      	ldrh	r3, [r7, #10]
 80079d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80079d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80079dc:	e004      	b.n	80079e8 <HAL_I2C_IsDeviceReady+0x7c>
 80079de:	897b      	ldrh	r3, [r7, #10]
 80079e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079e4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	6812      	ldr	r2, [r2, #0]
 80079ec:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80079ee:	f7fd ffd3 	bl	8005998 <HAL_GetTick>
 80079f2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	699b      	ldr	r3, [r3, #24]
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b20      	cmp	r3, #32
 8007a00:	bf0c      	ite	eq
 8007a02:	2301      	moveq	r3, #1
 8007a04:	2300      	movne	r3, #0
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	699b      	ldr	r3, [r3, #24]
 8007a10:	f003 0310 	and.w	r3, r3, #16
 8007a14:	2b10      	cmp	r3, #16
 8007a16:	bf0c      	ite	eq
 8007a18:	2301      	moveq	r3, #1
 8007a1a:	2300      	movne	r3, #0
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007a20:	e034      	b.n	8007a8c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a28:	d01a      	beq.n	8007a60 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007a2a:	f7fd ffb5 	bl	8005998 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	683a      	ldr	r2, [r7, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d302      	bcc.n	8007a40 <HAL_I2C_IsDeviceReady+0xd4>
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10f      	bne.n	8007a60 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a4c:	f043 0220 	orr.w	r2, r3, #32
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e088      	b.n	8007b72 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699b      	ldr	r3, [r3, #24]
 8007a66:	f003 0320 	and.w	r3, r3, #32
 8007a6a:	2b20      	cmp	r3, #32
 8007a6c:	bf0c      	ite	eq
 8007a6e:	2301      	moveq	r3, #1
 8007a70:	2300      	movne	r3, #0
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	f003 0310 	and.w	r3, r3, #16
 8007a80:	2b10      	cmp	r3, #16
 8007a82:	bf0c      	ite	eq
 8007a84:	2301      	moveq	r3, #1
 8007a86:	2300      	movne	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007a8c:	7ffb      	ldrb	r3, [r7, #31]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <HAL_I2C_IsDeviceReady+0x12c>
 8007a92:	7fbb      	ldrb	r3, [r7, #30]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0c4      	beq.n	8007a22 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	699b      	ldr	r3, [r3, #24]
 8007a9e:	f003 0310 	and.w	r3, r3, #16
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d01a      	beq.n	8007adc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2200      	movs	r2, #0
 8007aae:	2120      	movs	r1, #32
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f92e 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e058      	b.n	8007b72 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e04a      	b.n	8007b72 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2120      	movs	r1, #32
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	f000 f913 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d001      	beq.n	8007af6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e03d      	b.n	8007b72 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2210      	movs	r2, #16
 8007afc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2220      	movs	r2, #32
 8007b04:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d118      	bne.n	8007b40 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	685a      	ldr	r2, [r3, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b1c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2200      	movs	r2, #0
 8007b26:	2120      	movs	r1, #32
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f000 f8f2 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d001      	beq.n	8007b38 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	e01c      	b.n	8007b72 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2220      	movs	r2, #32
 8007b3e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	3301      	adds	r3, #1
 8007b44:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	f63f af3b 	bhi.w	80079c6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2220      	movs	r2, #32
 8007b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b5c:	f043 0220 	orr.w	r2, r3, #32
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8007b70:	2302      	movs	r3, #2
  }
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3720      	adds	r7, #32
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b086      	sub	sp, #24
 8007b80:	af02      	add	r7, sp, #8
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	4608      	mov	r0, r1
 8007b86:	4611      	mov	r1, r2
 8007b88:	461a      	mov	r2, r3
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	817b      	strh	r3, [r7, #10]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	813b      	strh	r3, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b96:	88fb      	ldrh	r3, [r7, #6]
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	8979      	ldrh	r1, [r7, #10]
 8007b9c:	4b20      	ldr	r3, [pc, #128]	@ (8007c20 <I2C_RequestMemoryWrite+0xa4>)
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007ba4:	68f8      	ldr	r0, [r7, #12]
 8007ba6:	f000 fa51 	bl	800804c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007baa:	69fa      	ldr	r2, [r7, #28]
 8007bac:	69b9      	ldr	r1, [r7, #24]
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f000 f8ef 	bl	8007d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d001      	beq.n	8007bbe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e02c      	b.n	8007c18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d105      	bne.n	8007bd0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bc4:	893b      	ldrh	r3, [r7, #8]
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8007bce:	e015      	b.n	8007bfc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bd0:	893b      	ldrh	r3, [r7, #8]
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	b2da      	uxtb	r2, r3
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bde:	69fa      	ldr	r2, [r7, #28]
 8007be0:	69b9      	ldr	r1, [r7, #24]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 f8d5 	bl	8007d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e012      	b.n	8007c18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bf2:	893b      	ldrh	r3, [r7, #8]
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	2200      	movs	r2, #0
 8007c04:	2180      	movs	r1, #128	@ 0x80
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 f883 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e000      	b.n	8007c18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	80002000 	.word	0x80002000

08007c24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af02      	add	r7, sp, #8
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	461a      	mov	r2, r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	817b      	strh	r3, [r7, #10]
 8007c36:	460b      	mov	r3, r1
 8007c38:	813b      	strh	r3, [r7, #8]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007c3e:	88fb      	ldrh	r3, [r7, #6]
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	8979      	ldrh	r1, [r7, #10]
 8007c44:	4b20      	ldr	r3, [pc, #128]	@ (8007cc8 <I2C_RequestMemoryRead+0xa4>)
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 f9fe 	bl	800804c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c50:	69fa      	ldr	r2, [r7, #28]
 8007c52:	69b9      	ldr	r1, [r7, #24]
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 f89c 	bl	8007d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d001      	beq.n	8007c64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e02c      	b.n	8007cbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c64:	88fb      	ldrh	r3, [r7, #6]
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d105      	bne.n	8007c76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c6a:	893b      	ldrh	r3, [r7, #8]
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c74:	e015      	b.n	8007ca2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c76:	893b      	ldrh	r3, [r7, #8]
 8007c78:	0a1b      	lsrs	r3, r3, #8
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	69b9      	ldr	r1, [r7, #24]
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f000 f882 	bl	8007d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d001      	beq.n	8007c98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e012      	b.n	8007cbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c98:	893b      	ldrh	r3, [r7, #8]
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2140      	movs	r1, #64	@ 0x40
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f000 f830 	bl	8007d12 <I2C_WaitOnFlagUntilTimeout>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d001      	beq.n	8007cbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e000      	b.n	8007cbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	80002000 	.word	0x80002000

08007ccc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	699b      	ldr	r3, [r3, #24]
 8007cda:	f003 0302 	and.w	r3, r3, #2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d103      	bne.n	8007cea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d007      	beq.n	8007d08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	699a      	ldr	r2, [r3, #24]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0201 	orr.w	r2, r2, #1
 8007d06:	619a      	str	r2, [r3, #24]
  }
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bc80      	pop	{r7}
 8007d10:	4770      	bx	lr

08007d12 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007d12:	b580      	push	{r7, lr}
 8007d14:	b084      	sub	sp, #16
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	60f8      	str	r0, [r7, #12]
 8007d1a:	60b9      	str	r1, [r7, #8]
 8007d1c:	603b      	str	r3, [r7, #0]
 8007d1e:	4613      	mov	r3, r2
 8007d20:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d22:	e022      	b.n	8007d6a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d2a:	d01e      	beq.n	8007d6a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d2c:	f7fd fe34 	bl	8005998 <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d302      	bcc.n	8007d42 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d113      	bne.n	8007d6a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d46:	f043 0220 	orr.w	r2, r3, #32
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	e00f      	b.n	8007d8a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	699a      	ldr	r2, [r3, #24]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4013      	ands	r3, r2
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	429a      	cmp	r2, r3
 8007d78:	bf0c      	ite	eq
 8007d7a:	2301      	moveq	r3, #1
 8007d7c:	2300      	movne	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	461a      	mov	r2, r3
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d0cd      	beq.n	8007d24 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d9e:	e02c      	b.n	8007dfa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	68b9      	ldr	r1, [r7, #8]
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f871 	bl	8007e8c <I2C_IsErrorOccurred>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e02a      	b.n	8007e0a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dba:	d01e      	beq.n	8007dfa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007dbc:	f7fd fdec 	bl	8005998 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d302      	bcc.n	8007dd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d113      	bne.n	8007dfa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dd6:	f043 0220 	orr.w	r2, r3, #32
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2220      	movs	r2, #32
 8007de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e007      	b.n	8007e0a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	f003 0302 	and.w	r3, r3, #2
 8007e04:	2b02      	cmp	r3, #2
 8007e06:	d1cb      	bne.n	8007da0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e1e:	e028      	b.n	8007e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	68b9      	ldr	r1, [r7, #8]
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f831 	bl	8007e8c <I2C_IsErrorOccurred>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e026      	b.n	8007e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e34:	f7fd fdb0 	bl	8005998 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d302      	bcc.n	8007e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d113      	bne.n	8007e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e4e:	f043 0220 	orr.w	r2, r3, #32
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e007      	b.n	8007e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	f003 0320 	and.w	r3, r3, #32
 8007e7c:	2b20      	cmp	r3, #32
 8007e7e:	d1cf      	bne.n	8007e20 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e80:	2300      	movs	r3, #0
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
	...

08007e8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	@ 0x28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	f003 0310 	and.w	r3, r3, #16
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d068      	beq.n	8007f8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2210      	movs	r2, #16
 8007ebe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007ec0:	e049      	b.n	8007f56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec8:	d045      	beq.n	8007f56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007eca:	f7fd fd65 	bl	8005998 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d302      	bcc.n	8007ee0 <I2C_IsErrorOccurred+0x54>
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d13a      	bne.n	8007f56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ef2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007efe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f02:	d121      	bne.n	8007f48 <I2C_IsErrorOccurred+0xbc>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007f0a:	d01d      	beq.n	8007f48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007f0c:	7cfb      	ldrb	r3, [r7, #19]
 8007f0e:	2b20      	cmp	r3, #32
 8007f10:	d01a      	beq.n	8007f48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007f22:	f7fd fd39 	bl	8005998 <HAL_GetTick>
 8007f26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f28:	e00e      	b.n	8007f48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007f2a:	f7fd fd35 	bl	8005998 <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b19      	cmp	r3, #25
 8007f36:	d907      	bls.n	8007f48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007f38:	6a3b      	ldr	r3, [r7, #32]
 8007f3a:	f043 0320 	orr.w	r3, r3, #32
 8007f3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007f46:	e006      	b.n	8007f56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	699b      	ldr	r3, [r3, #24]
 8007f4e:	f003 0320 	and.w	r3, r3, #32
 8007f52:	2b20      	cmp	r3, #32
 8007f54:	d1e9      	bne.n	8007f2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	f003 0320 	and.w	r3, r3, #32
 8007f60:	2b20      	cmp	r3, #32
 8007f62:	d003      	beq.n	8007f6c <I2C_IsErrorOccurred+0xe0>
 8007f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d0aa      	beq.n	8007ec2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007f7c:	6a3b      	ldr	r3, [r7, #32]
 8007f7e:	f043 0304 	orr.w	r3, r3, #4
 8007f82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007f84:	2301      	movs	r3, #1
 8007f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00b      	beq.n	8007fb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007f9c:	6a3b      	ldr	r3, [r7, #32]
 8007f9e:	f043 0301 	orr.w	r3, r3, #1
 8007fa2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007fb4:	69bb      	ldr	r3, [r7, #24]
 8007fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00b      	beq.n	8007fd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007fbe:	6a3b      	ldr	r3, [r7, #32]
 8007fc0:	f043 0308 	orr.w	r3, r3, #8
 8007fc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007fce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	f043 0302 	orr.w	r3, r3, #2
 8007fe6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ff0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01c      	beq.n	800803a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008000:	68f8      	ldr	r0, [r7, #12]
 8008002:	f7ff fe63 	bl	8007ccc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6859      	ldr	r1, [r3, #4]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	4b0d      	ldr	r3, [pc, #52]	@ (8008048 <I2C_IsErrorOccurred+0x1bc>)
 8008012:	400b      	ands	r3, r1
 8008014:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	431a      	orrs	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2220      	movs	r2, #32
 8008026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800803a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800803e:	4618      	mov	r0, r3
 8008040:	3728      	adds	r7, #40	@ 0x28
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	fe00e800 	.word	0xfe00e800

0800804c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	607b      	str	r3, [r7, #4]
 8008056:	460b      	mov	r3, r1
 8008058:	817b      	strh	r3, [r7, #10]
 800805a:	4613      	mov	r3, r2
 800805c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800805e:	897b      	ldrh	r3, [r7, #10]
 8008060:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008064:	7a7b      	ldrb	r3, [r7, #9]
 8008066:	041b      	lsls	r3, r3, #16
 8008068:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800806c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008072:	6a3b      	ldr	r3, [r7, #32]
 8008074:	4313      	orrs	r3, r2
 8008076:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800807a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685a      	ldr	r2, [r3, #4]
 8008082:	6a3b      	ldr	r3, [r7, #32]
 8008084:	0d5b      	lsrs	r3, r3, #21
 8008086:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800808a:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <I2C_TransferConfig+0x5c>)
 800808c:	430b      	orrs	r3, r1
 800808e:	43db      	mvns	r3, r3
 8008090:	ea02 0103 	and.w	r1, r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	430a      	orrs	r2, r1
 800809c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800809e:	bf00      	nop
 80080a0:	371c      	adds	r7, #28
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr
 80080a8:	03ff63ff 	.word	0x03ff63ff

080080ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080bc:	b2db      	uxtb	r3, r3
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d138      	bne.n	8008134 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d101      	bne.n	80080d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80080cc:	2302      	movs	r3, #2
 80080ce:	e032      	b.n	8008136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2224      	movs	r2, #36	@ 0x24
 80080dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 0201 	bic.w	r2, r2, #1
 80080ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80080fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6819      	ldr	r1, [r3, #0]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f042 0201 	orr.w	r2, r2, #1
 800811e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	e000      	b.n	8008136 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008134:	2302      	movs	r3, #2
  }
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr

08008140 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008140:	b480      	push	{r7}
 8008142:	b085      	sub	sp, #20
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b20      	cmp	r3, #32
 8008154:	d139      	bne.n	80081ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800815c:	2b01      	cmp	r3, #1
 800815e:	d101      	bne.n	8008164 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008160:	2302      	movs	r3, #2
 8008162:	e033      	b.n	80081cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2224      	movs	r2, #36	@ 0x24
 8008170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 0201 	bic.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008192:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	021b      	lsls	r3, r3, #8
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f042 0201 	orr.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2220      	movs	r2, #32
 80081ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	e000      	b.n	80081cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80081ca:	2302      	movs	r3, #2
  }
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bc80      	pop	{r7}
 80081d4:	4770      	bx	lr
	...

080081d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80081d8:	b480      	push	{r7}
 80081da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081dc:	4b04      	ldr	r3, [pc, #16]	@ (80081f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a03      	ldr	r2, [pc, #12]	@ (80081f0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80081e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e6:	6013      	str	r3, [r2, #0]
}
 80081e8:	bf00      	nop
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bc80      	pop	{r7}
 80081ee:	4770      	bx	lr
 80081f0:	58000400 	.word	0x58000400

080081f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80081f4:	b480      	push	{r7}
 80081f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80081f8:	4b03      	ldr	r3, [pc, #12]	@ (8008208 <HAL_PWREx_GetVoltageRange+0x14>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8008200:	4618      	mov	r0, r3
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr
 8008208:	58000400 	.word	0x58000400

0800820c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	4603      	mov	r3, r0
 8008214:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8008216:	4b10      	ldr	r3, [pc, #64]	@ (8008258 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f023 0307 	bic.w	r3, r3, #7
 800821e:	4a0e      	ldr	r2, [pc, #56]	@ (8008258 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008220:	f043 0302 	orr.w	r3, r3, #2
 8008224:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008226:	4b0d      	ldr	r3, [pc, #52]	@ (800825c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	4a0c      	ldr	r2, [pc, #48]	@ (800825c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800822c:	f043 0304 	orr.w	r3, r3, #4
 8008230:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	2b01      	cmp	r3, #1
 8008236:	d101      	bne.n	800823c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008238:	bf30      	wfi
 800823a:	e002      	b.n	8008242 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800823c:	bf40      	sev
    __WFE();
 800823e:	bf20      	wfe
    __WFE();
 8008240:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008242:	4b06      	ldr	r3, [pc, #24]	@ (800825c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	4a05      	ldr	r2, [pc, #20]	@ (800825c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008248:	f023 0304 	bic.w	r3, r3, #4
 800824c:	6113      	str	r3, [r2, #16]
}
 800824e:	bf00      	nop
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	bc80      	pop	{r7}
 8008256:	4770      	bx	lr
 8008258:	58000400 	.word	0x58000400
 800825c:	e000ed00 	.word	0xe000ed00

08008260 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8008264:	4b06      	ldr	r3, [pc, #24]	@ (8008280 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800826c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008270:	d101      	bne.n	8008276 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	46bd      	mov	sp, r7
 800827c:	bc80      	pop	{r7}
 800827e:	4770      	bx	lr
 8008280:	58000400 	.word	0x58000400

08008284 <LL_RCC_HSE_EnableTcxo>:
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8008288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008292:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008296:	6013      	str	r3, [r2, #0]
}
 8008298:	bf00      	nop
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr

080082a0 <LL_RCC_HSE_DisableTcxo>:
{
 80082a0:	b480      	push	{r7}
 80082a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80082a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80082ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80082b2:	6013      	str	r3, [r2, #0]
}
 80082b4:	bf00      	nop
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bc80      	pop	{r7}
 80082ba:	4770      	bx	lr

080082bc <LL_RCC_HSE_IsEnabledDiv2>:
{
 80082bc:	b480      	push	{r7}
 80082be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80082c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80082ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082ce:	d101      	bne.n	80082d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80082d0:	2301      	movs	r3, #1
 80082d2:	e000      	b.n	80082d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	46bd      	mov	sp, r7
 80082da:	bc80      	pop	{r7}
 80082dc:	4770      	bx	lr

080082de <LL_RCC_HSE_Enable>:
{
 80082de:	b480      	push	{r7}
 80082e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80082e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80082ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082f0:	6013      	str	r3, [r2, #0]
}
 80082f2:	bf00      	nop
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bc80      	pop	{r7}
 80082f8:	4770      	bx	lr

080082fa <LL_RCC_HSE_Disable>:
{
 80082fa:	b480      	push	{r7}
 80082fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80082fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008308:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800830c:	6013      	str	r3, [r2, #0]
}
 800830e:	bf00      	nop
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr

08008316 <LL_RCC_HSE_IsReady>:
{
 8008316:	b480      	push	{r7}
 8008318:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800831a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008324:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008328:	d101      	bne.n	800832e <LL_RCC_HSE_IsReady+0x18>
 800832a:	2301      	movs	r3, #1
 800832c:	e000      	b.n	8008330 <LL_RCC_HSE_IsReady+0x1a>
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr

08008338 <LL_RCC_HSI_Enable>:
{
 8008338:	b480      	push	{r7}
 800833a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800833c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008346:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800834a:	6013      	str	r3, [r2, #0]
}
 800834c:	bf00      	nop
 800834e:	46bd      	mov	sp, r7
 8008350:	bc80      	pop	{r7}
 8008352:	4770      	bx	lr

08008354 <LL_RCC_HSI_Disable>:
{
 8008354:	b480      	push	{r7}
 8008356:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008362:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008366:	6013      	str	r3, [r2, #0]
}
 8008368:	bf00      	nop
 800836a:	46bd      	mov	sp, r7
 800836c:	bc80      	pop	{r7}
 800836e:	4770      	bx	lr

08008370 <LL_RCC_HSI_IsReady>:
{
 8008370:	b480      	push	{r7}
 8008372:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008374:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800837e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008382:	d101      	bne.n	8008388 <LL_RCC_HSI_IsReady+0x18>
 8008384:	2301      	movs	r3, #1
 8008386:	e000      	b.n	800838a <LL_RCC_HSI_IsReady+0x1a>
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	46bd      	mov	sp, r7
 800838e:	bc80      	pop	{r7}
 8008390:	4770      	bx	lr

08008392 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008392:	b480      	push	{r7}
 8008394:	b083      	sub	sp, #12
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800839a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	061b      	lsls	r3, r3, #24
 80083a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083ac:	4313      	orrs	r3, r2
 80083ae:	604b      	str	r3, [r1, #4]
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bc80      	pop	{r7}
 80083b8:	4770      	bx	lr

080083ba <LL_RCC_LSE_IsReady>:
{
 80083ba:	b480      	push	{r7}
 80083bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80083be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d101      	bne.n	80083d2 <LL_RCC_LSE_IsReady+0x18>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e000      	b.n	80083d4 <LL_RCC_LSE_IsReady+0x1a>
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bc80      	pop	{r7}
 80083da:	4770      	bx	lr

080083dc <LL_RCC_LSI_Enable>:
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80083e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80083e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083ec:	f043 0301 	orr.w	r3, r3, #1
 80083f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80083f4:	bf00      	nop
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr

080083fc <LL_RCC_LSI_Disable>:
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8008400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800840c:	f023 0301 	bic.w	r3, r3, #1
 8008410:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008414:	bf00      	nop
 8008416:	46bd      	mov	sp, r7
 8008418:	bc80      	pop	{r7}
 800841a:	4770      	bx	lr

0800841c <LL_RCC_LSI_IsReady>:
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8008420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008424:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008428:	f003 0302 	and.w	r3, r3, #2
 800842c:	2b02      	cmp	r3, #2
 800842e:	d101      	bne.n	8008434 <LL_RCC_LSI_IsReady+0x18>
 8008430:	2301      	movs	r3, #1
 8008432:	e000      	b.n	8008436 <LL_RCC_LSI_IsReady+0x1a>
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	46bd      	mov	sp, r7
 800843a:	bc80      	pop	{r7}
 800843c:	4770      	bx	lr

0800843e <LL_RCC_MSI_Enable>:
{
 800843e:	b480      	push	{r7}
 8008440:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800844c:	f043 0301 	orr.w	r3, r3, #1
 8008450:	6013      	str	r3, [r2, #0]
}
 8008452:	bf00      	nop
 8008454:	46bd      	mov	sp, r7
 8008456:	bc80      	pop	{r7}
 8008458:	4770      	bx	lr

0800845a <LL_RCC_MSI_Disable>:
{
 800845a:	b480      	push	{r7}
 800845c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800845e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008468:	f023 0301 	bic.w	r3, r3, #1
 800846c:	6013      	str	r3, [r2, #0]
}
 800846e:	bf00      	nop
 8008470:	46bd      	mov	sp, r7
 8008472:	bc80      	pop	{r7}
 8008474:	4770      	bx	lr

08008476 <LL_RCC_MSI_IsReady>:
{
 8008476:	b480      	push	{r7}
 8008478:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800847a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b02      	cmp	r3, #2
 8008486:	d101      	bne.n	800848c <LL_RCC_MSI_IsReady+0x16>
 8008488:	2301      	movs	r3, #1
 800848a:	e000      	b.n	800848e <LL_RCC_MSI_IsReady+0x18>
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	46bd      	mov	sp, r7
 8008492:	bc80      	pop	{r7}
 8008494:	4770      	bx	lr

08008496 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8008496:	b480      	push	{r7}
 8008498:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800849a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0308 	and.w	r3, r3, #8
 80084a4:	2b08      	cmp	r3, #8
 80084a6:	d101      	bne.n	80084ac <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80084a8:	2301      	movs	r3, #1
 80084aa:	e000      	b.n	80084ae <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bc80      	pop	{r7}
 80084b4:	4770      	bx	lr

080084b6 <LL_RCC_MSI_GetRange>:
{
 80084b6:	b480      	push	{r7}
 80084b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80084ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr

080084cc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80084d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80084d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 80084dc:	4618      	mov	r0, r3
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr

080084e4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80084ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	021b      	lsls	r3, r3, #8
 80084fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80084fe:	4313      	orrs	r3, r2
 8008500:	604b      	str	r3, [r1, #4]
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	bc80      	pop	{r7}
 800850a:	4770      	bx	lr

0800850c <LL_RCC_SetSysClkSource>:
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f023 0203 	bic.w	r2, r3, #3
 800851e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4313      	orrs	r3, r2
 8008526:	608b      	str	r3, [r1, #8]
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr

08008532 <LL_RCC_GetSysClkSource>:
{
 8008532:	b480      	push	{r7}
 8008534:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f003 030c 	and.w	r3, r3, #12
}
 8008540:	4618      	mov	r0, r3
 8008542:	46bd      	mov	sp, r7
 8008544:	bc80      	pop	{r7}
 8008546:	4770      	bx	lr

08008548 <LL_RCC_SetAHBPrescaler>:
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008550:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800855a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4313      	orrs	r3, r2
 8008562:	608b      	str	r3, [r1, #8]
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	bc80      	pop	{r7}
 800856c:	4770      	bx	lr

0800856e <LL_C2_RCC_SetAHBPrescaler>:
{
 800856e:	b480      	push	{r7}
 8008570:	b083      	sub	sp, #12
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800857a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800857e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4313      	orrs	r3, r2
 800858a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800858e:	bf00      	nop
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	bc80      	pop	{r7}
 8008596:	4770      	bx	lr

08008598 <LL_RCC_SetAHB3Prescaler>:
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80085a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80085a8:	f023 020f 	bic.w	r2, r3, #15
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	091b      	lsrs	r3, r3, #4
 80085b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80085ba:	bf00      	nop
 80085bc:	370c      	adds	r7, #12
 80085be:	46bd      	mov	sp, r7
 80085c0:	bc80      	pop	{r7}
 80085c2:	4770      	bx	lr

080085c4 <LL_RCC_SetAPB1Prescaler>:
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80085cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4313      	orrs	r3, r2
 80085de:	608b      	str	r3, [r1, #8]
}
 80085e0:	bf00      	nop
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bc80      	pop	{r7}
 80085e8:	4770      	bx	lr

080085ea <LL_RCC_SetAPB2Prescaler>:
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80085f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80085fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4313      	orrs	r3, r2
 8008604:	608b      	str	r3, [r1, #8]
}
 8008606:	bf00      	nop
 8008608:	370c      	adds	r7, #12
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr

08008610 <LL_RCC_GetAHBPrescaler>:
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800861e:	4618      	mov	r0, r3
 8008620:	46bd      	mov	sp, r7
 8008622:	bc80      	pop	{r7}
 8008624:	4770      	bx	lr

08008626 <LL_RCC_GetAHB3Prescaler>:
{
 8008626:	b480      	push	{r7}
 8008628:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800862a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800862e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008632:	011b      	lsls	r3, r3, #4
 8008634:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8008638:	4618      	mov	r0, r3
 800863a:	46bd      	mov	sp, r7
 800863c:	bc80      	pop	{r7}
 800863e:	4770      	bx	lr

08008640 <LL_RCC_GetAPB1Prescaler>:
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800864e:	4618      	mov	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	bc80      	pop	{r7}
 8008654:	4770      	bx	lr

08008656 <LL_RCC_GetAPB2Prescaler>:
{
 8008656:	b480      	push	{r7}
 8008658:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800865a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8008664:	4618      	mov	r0, r3
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr

0800866c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800866c:	b480      	push	{r7}
 800866e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800867a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800867e:	6013      	str	r3, [r2, #0]
}
 8008680:	bf00      	nop
 8008682:	46bd      	mov	sp, r7
 8008684:	bc80      	pop	{r7}
 8008686:	4770      	bx	lr

08008688 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800868c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800869a:	6013      	str	r3, [r2, #0]
}
 800869c:	bf00      	nop
 800869e:	46bd      	mov	sp, r7
 80086a0:	bc80      	pop	{r7}
 80086a2:	4770      	bx	lr

080086a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80086a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80086b6:	d101      	bne.n	80086bc <LL_RCC_PLL_IsReady+0x18>
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <LL_RCC_PLL_IsReady+0x1a>
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr

080086c6 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80086c6:	b480      	push	{r7}
 80086c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80086ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	0a1b      	lsrs	r3, r3, #8
 80086d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	46bd      	mov	sp, r7
 80086da:	bc80      	pop	{r7}
 80086dc:	4770      	bx	lr

080086de <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80086de:	b480      	push	{r7}
 80086e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80086e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bc80      	pop	{r7}
 80086f2:	4770      	bx	lr

080086f4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80086f4:	b480      	push	{r7}
 80086f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80086f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8008702:	4618      	mov	r0, r3
 8008704:	46bd      	mov	sp, r7
 8008706:	bc80      	pop	{r7}
 8008708:	4770      	bx	lr

0800870a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800870a:	b480      	push	{r7}
 800870c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800870e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f003 0303 	and.w	r3, r3, #3
}
 8008718:	4618      	mov	r0, r3
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008720:	b480      	push	{r7}
 8008722:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800872e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008732:	d101      	bne.n	8008738 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008734:	2301      	movs	r3, #1
 8008736:	e000      	b.n	800873a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr

08008742 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8008742:	b480      	push	{r7}
 8008744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800874a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800874e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008756:	d101      	bne.n	800875c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr

08008766 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008766:	b480      	push	{r7}
 8008768:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800876a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800876e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800877a:	d101      	bne.n	8008780 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800877c:	2301      	movs	r3, #1
 800877e:	e000      	b.n	8008782 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	46bd      	mov	sp, r7
 8008786:	bc80      	pop	{r7}
 8008788:	4770      	bx	lr

0800878a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800878a:	b480      	push	{r7}
 800878c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800878e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008798:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800879c:	d101      	bne.n	80087a2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800879e:	2301      	movs	r3, #1
 80087a0:	e000      	b.n	80087a4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bc80      	pop	{r7}
 80087aa:	4770      	bx	lr

080087ac <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80087ac:	b480      	push	{r7}
 80087ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80087b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80087ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80087be:	d101      	bne.n	80087c4 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e000      	b.n	80087c6 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bc80      	pop	{r7}
 80087cc:	4770      	bx	lr
	...

080087d0 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d101      	bne.n	80087e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e36f      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087e2:	f7ff fea6 	bl	8008532 <LL_RCC_GetSysClkSource>
 80087e6:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087e8:	f7ff ff8f 	bl	800870a <LL_RCC_PLL_GetMainSource>
 80087ec:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 80c4 	beq.w	8008984 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d005      	beq.n	800880e <HAL_RCC_OscConfig+0x3e>
 8008802:	69fb      	ldr	r3, [r7, #28]
 8008804:	2b0c      	cmp	r3, #12
 8008806:	d176      	bne.n	80088f6 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	2b01      	cmp	r3, #1
 800880c:	d173      	bne.n	80088f6 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e353      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800881e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0308 	and.w	r3, r3, #8
 8008828:	2b00      	cmp	r3, #0
 800882a:	d005      	beq.n	8008838 <HAL_RCC_OscConfig+0x68>
 800882c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008836:	e006      	b.n	8008846 <HAL_RCC_OscConfig+0x76>
 8008838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800883c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008840:	091b      	lsrs	r3, r3, #4
 8008842:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008846:	4293      	cmp	r3, r2
 8008848:	d222      	bcs.n	8008890 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800884e:	4618      	mov	r0, r3
 8008850:	f000 fd5a 	bl	8009308 <RCC_SetFlashLatencyFromMSIRange>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e331      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800885e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008868:	f043 0308 	orr.w	r3, r3, #8
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800887c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008880:	4313      	orrs	r3, r2
 8008882:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff fe2b 	bl	80084e4 <LL_RCC_MSI_SetCalibTrimming>
 800888e:	e021      	b.n	80088d4 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008890:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800889a:	f043 0308 	orr.w	r3, r3, #8
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80088b2:	4313      	orrs	r3, r2
 80088b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7ff fe12 	bl	80084e4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 fd1f 	bl	8009308 <RCC_SetFlashLatencyFromMSIRange>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e2f6      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80088d4:	f000 fce0 	bl	8009298 <HAL_RCC_GetHCLKFreq>
 80088d8:	4603      	mov	r3, r0
 80088da:	4aa7      	ldr	r2, [pc, #668]	@ (8008b78 <HAL_RCC_OscConfig+0x3a8>)
 80088dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80088de:	4ba7      	ldr	r3, [pc, #668]	@ (8008b7c <HAL_RCC_OscConfig+0x3ac>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fd f80c 	bl	8005900 <HAL_InitTick>
 80088e8:	4603      	mov	r3, r0
 80088ea:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80088ec:	7cfb      	ldrb	r3, [r7, #19]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d047      	beq.n	8008982 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80088f2:	7cfb      	ldrb	r3, [r7, #19]
 80088f4:	e2e5      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d02c      	beq.n	8008958 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80088fe:	f7ff fd9e 	bl	800843e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008902:	f7fd f849 	bl	8005998 <HAL_GetTick>
 8008906:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008908:	e008      	b.n	800891c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800890a:	f7fd f845 	bl	8005998 <HAL_GetTick>
 800890e:	4602      	mov	r2, r0
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	1ad3      	subs	r3, r2, r3
 8008914:	2b02      	cmp	r3, #2
 8008916:	d901      	bls.n	800891c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8008918:	2303      	movs	r3, #3
 800891a:	e2d2      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800891c:	f7ff fdab 	bl	8008476 <LL_RCC_MSI_IsReady>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d0f1      	beq.n	800890a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008926:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008930:	f043 0308 	orr.w	r3, r3, #8
 8008934:	6013      	str	r3, [r2, #0]
 8008936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008944:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008948:	4313      	orrs	r3, r2
 800894a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008950:	4618      	mov	r0, r3
 8008952:	f7ff fdc7 	bl	80084e4 <LL_RCC_MSI_SetCalibTrimming>
 8008956:	e015      	b.n	8008984 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008958:	f7ff fd7f 	bl	800845a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800895c:	f7fd f81c 	bl	8005998 <HAL_GetTick>
 8008960:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008962:	e008      	b.n	8008976 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008964:	f7fd f818 	bl	8005998 <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b02      	cmp	r3, #2
 8008970:	d901      	bls.n	8008976 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e2a5      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008976:	f7ff fd7e 	bl	8008476 <LL_RCC_MSI_IsReady>
 800897a:	4603      	mov	r3, r0
 800897c:	2b00      	cmp	r3, #0
 800897e:	d1f1      	bne.n	8008964 <HAL_RCC_OscConfig+0x194>
 8008980:	e000      	b.n	8008984 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008982:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d058      	beq.n	8008a42 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	2b08      	cmp	r3, #8
 8008994:	d005      	beq.n	80089a2 <HAL_RCC_OscConfig+0x1d2>
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	2b0c      	cmp	r3, #12
 800899a:	d108      	bne.n	80089ae <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d105      	bne.n	80089ae <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d14b      	bne.n	8008a42 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e289      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80089ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089c0:	4313      	orrs	r3, r2
 80089c2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089cc:	d102      	bne.n	80089d4 <HAL_RCC_OscConfig+0x204>
 80089ce:	f7ff fc86 	bl	80082de <LL_RCC_HSE_Enable>
 80089d2:	e00d      	b.n	80089f0 <HAL_RCC_OscConfig+0x220>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80089dc:	d104      	bne.n	80089e8 <HAL_RCC_OscConfig+0x218>
 80089de:	f7ff fc51 	bl	8008284 <LL_RCC_HSE_EnableTcxo>
 80089e2:	f7ff fc7c 	bl	80082de <LL_RCC_HSE_Enable>
 80089e6:	e003      	b.n	80089f0 <HAL_RCC_OscConfig+0x220>
 80089e8:	f7ff fc87 	bl	80082fa <LL_RCC_HSE_Disable>
 80089ec:	f7ff fc58 	bl	80082a0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d012      	beq.n	8008a1e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089f8:	f7fc ffce 	bl	8005998 <HAL_GetTick>
 80089fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80089fe:	e008      	b.n	8008a12 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a00:	f7fc ffca 	bl	8005998 <HAL_GetTick>
 8008a04:	4602      	mov	r2, r0
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	1ad3      	subs	r3, r2, r3
 8008a0a:	2b64      	cmp	r3, #100	@ 0x64
 8008a0c:	d901      	bls.n	8008a12 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e257      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008a12:	f7ff fc80 	bl	8008316 <LL_RCC_HSE_IsReady>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d0f1      	beq.n	8008a00 <HAL_RCC_OscConfig+0x230>
 8008a1c:	e011      	b.n	8008a42 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a1e:	f7fc ffbb 	bl	8005998 <HAL_GetTick>
 8008a22:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008a24:	e008      	b.n	8008a38 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a26:	f7fc ffb7 	bl	8005998 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b64      	cmp	r3, #100	@ 0x64
 8008a32:	d901      	bls.n	8008a38 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e244      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008a38:	f7ff fc6d 	bl	8008316 <LL_RCC_HSE_IsReady>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1f1      	bne.n	8008a26 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0302 	and.w	r3, r3, #2
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d046      	beq.n	8008adc <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	2b04      	cmp	r3, #4
 8008a52:	d005      	beq.n	8008a60 <HAL_RCC_OscConfig+0x290>
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	2b0c      	cmp	r3, #12
 8008a58:	d10e      	bne.n	8008a78 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d10b      	bne.n	8008a78 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e22a      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	695b      	ldr	r3, [r3, #20]
 8008a70:	4618      	mov	r0, r3
 8008a72:	f7ff fc8e 	bl	8008392 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008a76:	e031      	b.n	8008adc <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	691b      	ldr	r3, [r3, #16]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d019      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a80:	f7ff fc5a 	bl	8008338 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a84:	f7fc ff88 	bl	8005998 <HAL_GetTick>
 8008a88:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008a8a:	e008      	b.n	8008a9e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a8c:	f7fc ff84 	bl	8005998 <HAL_GetTick>
 8008a90:	4602      	mov	r2, r0
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	1ad3      	subs	r3, r2, r3
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d901      	bls.n	8008a9e <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e211      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008a9e:	f7ff fc67 	bl	8008370 <LL_RCC_HSI_IsReady>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0f1      	beq.n	8008a8c <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	695b      	ldr	r3, [r3, #20]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff fc70 	bl	8008392 <LL_RCC_HSI_SetCalibTrimming>
 8008ab2:	e013      	b.n	8008adc <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ab4:	f7ff fc4e 	bl	8008354 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ab8:	f7fc ff6e 	bl	8005998 <HAL_GetTick>
 8008abc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ac0:	f7fc ff6a 	bl	8005998 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e1f7      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008ad2:	f7ff fc4d 	bl	8008370 <LL_RCC_HSI_IsReady>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1f1      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0308 	and.w	r3, r3, #8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d06e      	beq.n	8008bc6 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	699b      	ldr	r3, [r3, #24]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d056      	beq.n	8008b9e <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8008af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008af8:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	69da      	ldr	r2, [r3, #28]
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d031      	beq.n	8008b6c <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f003 0302 	and.w	r3, r3, #2
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d006      	beq.n	8008b20 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e1d0      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f003 0301 	and.w	r3, r3, #1
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d013      	beq.n	8008b52 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8008b2a:	f7ff fc67 	bl	80083fc <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b2e:	f7fc ff33 	bl	8005998 <HAL_GetTick>
 8008b32:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8008b34:	e008      	b.n	8008b48 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b36:	f7fc ff2f 	bl	8005998 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b11      	cmp	r3, #17
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e1bc      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8008b48:	f7ff fc68 	bl	800841c <LL_RCC_LSI_IsReady>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f1      	bne.n	8008b36 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8008b52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b5a:	f023 0210 	bic.w	r2, r3, #16
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	69db      	ldr	r3, [r3, #28]
 8008b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b66:	4313      	orrs	r3, r2
 8008b68:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b6c:	f7ff fc36 	bl	80083dc <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008b70:	f7fc ff12 	bl	8005998 <HAL_GetTick>
 8008b74:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8008b76:	e00c      	b.n	8008b92 <HAL_RCC_OscConfig+0x3c2>
 8008b78:	20000014 	.word	0x20000014
 8008b7c:	20000024 	.word	0x20000024
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b80:	f7fc ff0a 	bl	8005998 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	2b11      	cmp	r3, #17
 8008b8c:	d901      	bls.n	8008b92 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e197      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8008b92:	f7ff fc43 	bl	800841c <LL_RCC_LSI_IsReady>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d0f1      	beq.n	8008b80 <HAL_RCC_OscConfig+0x3b0>
 8008b9c:	e013      	b.n	8008bc6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b9e:	f7ff fc2d 	bl	80083fc <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ba2:	f7fc fef9 	bl	8005998 <HAL_GetTick>
 8008ba6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008ba8:	e008      	b.n	8008bbc <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008baa:	f7fc fef5 	bl	8005998 <HAL_GetTick>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	1ad3      	subs	r3, r2, r3
 8008bb4:	2b11      	cmp	r3, #17
 8008bb6:	d901      	bls.n	8008bbc <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e182      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008bbc:	f7ff fc2e 	bl	800841c <LL_RCC_LSI_IsReady>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1f1      	bne.n	8008baa <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 80d8 	beq.w	8008d84 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008bd4:	f7ff fb44 	bl	8008260 <LL_PWR_IsEnabledBkUpAccess>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d113      	bne.n	8008c06 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008bde:	f7ff fafb 	bl	80081d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008be2:	f7fc fed9 	bl	8005998 <HAL_GetTick>
 8008be6:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008be8:	e008      	b.n	8008bfc <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008bea:	f7fc fed5 	bl	8005998 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b02      	cmp	r3, #2
 8008bf6:	d901      	bls.n	8008bfc <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e162      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008bfc:	f7ff fb30 	bl	8008260 <LL_PWR_IsEnabledBkUpAccess>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0f1      	beq.n	8008bea <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d07b      	beq.n	8008d06 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	2b85      	cmp	r3, #133	@ 0x85
 8008c14:	d003      	beq.n	8008c1e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	2b05      	cmp	r3, #5
 8008c1c:	d109      	bne.n	8008c32 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c2a:	f043 0304 	orr.w	r3, r3, #4
 8008c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c32:	f7fc feb1 	bl	8005998 <HAL_GetTick>
 8008c36:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008c38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c44:	f043 0301 	orr.w	r3, r3, #1
 8008c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008c4c:	e00a      	b.n	8008c64 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c4e:	f7fc fea3 	bl	8005998 <HAL_GetTick>
 8008c52:	4602      	mov	r2, r0
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d901      	bls.n	8008c64 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8008c60:	2303      	movs	r3, #3
 8008c62:	e12e      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008c64:	f7ff fba9 	bl	80083ba <LL_RCC_LSE_IsReady>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d0ef      	beq.n	8008c4e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	2b81      	cmp	r3, #129	@ 0x81
 8008c74:	d003      	beq.n	8008c7e <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	2b85      	cmp	r3, #133	@ 0x85
 8008c7c:	d121      	bne.n	8008cc2 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c7e:	f7fc fe8b 	bl	8005998 <HAL_GetTick>
 8008c82:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008c84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008c98:	e00a      	b.n	8008cb0 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c9a:	f7fc fe7d 	bl	8005998 <HAL_GetTick>
 8008c9e:	4602      	mov	r2, r0
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d901      	bls.n	8008cb0 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8008cac:	2303      	movs	r3, #3
 8008cae:	e108      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008cb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d0ec      	beq.n	8008c9a <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008cc0:	e060      	b.n	8008d84 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008cc2:	f7fc fe69 	bl	8005998 <HAL_GetTick>
 8008cc6:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008cd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008cd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008cdc:	e00a      	b.n	8008cf4 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cde:	f7fc fe5b 	bl	8005998 <HAL_GetTick>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d901      	bls.n	8008cf4 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	e0e6      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d1ec      	bne.n	8008cde <HAL_RCC_OscConfig+0x50e>
 8008d04:	e03e      	b.n	8008d84 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d06:	f7fc fe47 	bl	8005998 <HAL_GetTick>
 8008d0a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d14:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d20:	e00a      	b.n	8008d38 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d22:	f7fc fe39 	bl	8005998 <HAL_GetTick>
 8008d26:	4602      	mov	r2, r0
 8008d28:	697b      	ldr	r3, [r7, #20]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d901      	bls.n	8008d38 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e0c4      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d1ec      	bne.n	8008d22 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d48:	f7fc fe26 	bl	8005998 <HAL_GetTick>
 8008d4c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008d4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d5a:	f023 0301 	bic.w	r3, r3, #1
 8008d5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008d62:	e00a      	b.n	8008d7a <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d64:	f7fc fe18 	bl	8005998 <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e0a3      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008d7a:	f7ff fb1e 	bl	80083ba <LL_RCC_LSE_IsReady>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d1ef      	bne.n	8008d64 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 8099 	beq.w	8008ec0 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008d8e:	69fb      	ldr	r3, [r7, #28]
 8008d90:	2b0c      	cmp	r3, #12
 8008d92:	d06c      	beq.n	8008e6e <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d14b      	bne.n	8008e34 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d9c:	f7ff fc74 	bl	8008688 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008da0:	f7fc fdfa 	bl	8005998 <HAL_GetTick>
 8008da4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008da6:	e008      	b.n	8008dba <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008da8:	f7fc fdf6 	bl	8005998 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	2b0a      	cmp	r3, #10
 8008db4:	d901      	bls.n	8008dba <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e083      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008dba:	f7ff fc73 	bl	80086a4 <LL_RCC_PLL_IsReady>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1f1      	bne.n	8008da8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008dc8:	68da      	ldr	r2, [r3, #12]
 8008dca:	4b40      	ldr	r3, [pc, #256]	@ (8008ecc <HAL_RCC_OscConfig+0x6fc>)
 8008dcc:	4013      	ands	r3, r2
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008dd6:	4311      	orrs	r1, r2
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008ddc:	0212      	lsls	r2, r2, #8
 8008dde:	4311      	orrs	r1, r2
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008de4:	4311      	orrs	r1, r2
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008dea:	4311      	orrs	r1, r2
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008df0:	430a      	orrs	r2, r1
 8008df2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008dfa:	f7ff fc37 	bl	800866c <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008dfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e0c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e0e:	f7fc fdc3 	bl	8005998 <HAL_GetTick>
 8008e12:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8008e14:	e008      	b.n	8008e28 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e16:	f7fc fdbf 	bl	8005998 <HAL_GetTick>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	1ad3      	subs	r3, r2, r3
 8008e20:	2b0a      	cmp	r3, #10
 8008e22:	d901      	bls.n	8008e28 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e04c      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8008e28:	f7ff fc3c 	bl	80086a4 <LL_RCC_PLL_IsReady>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0f1      	beq.n	8008e16 <HAL_RCC_OscConfig+0x646>
 8008e32:	e045      	b.n	8008ec0 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e34:	f7ff fc28 	bl	8008688 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e38:	f7fc fdae 	bl	8005998 <HAL_GetTick>
 8008e3c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008e3e:	e008      	b.n	8008e52 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e40:	f7fc fdaa 	bl	8005998 <HAL_GetTick>
 8008e44:	4602      	mov	r2, r0
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	1ad3      	subs	r3, r2, r3
 8008e4a:	2b0a      	cmp	r3, #10
 8008e4c:	d901      	bls.n	8008e52 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008e4e:	2303      	movs	r3, #3
 8008e50:	e037      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008e52:	f7ff fc27 	bl	80086a4 <LL_RCC_PLL_IsReady>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1f1      	bne.n	8008e40 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008e5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e60:	68da      	ldr	r2, [r3, #12]
 8008e62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e66:	4b1a      	ldr	r3, [pc, #104]	@ (8008ed0 <HAL_RCC_OscConfig+0x700>)
 8008e68:	4013      	ands	r3, r2
 8008e6a:	60cb      	str	r3, [r1, #12]
 8008e6c:	e028      	b.n	8008ec0 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e72:	2b01      	cmp	r3, #1
 8008e74:	d101      	bne.n	8008e7a <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e023      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	f003 0203 	and.w	r2, r3, #3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d115      	bne.n	8008ebc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d10e      	bne.n	8008ebc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea8:	021b      	lsls	r3, r3, #8
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d106      	bne.n	8008ebc <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d001      	beq.n	8008ec0 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e000      	b.n	8008ec2 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3720      	adds	r7, #32
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	11c1808c 	.word	0x11c1808c
 8008ed0:	eefefffc 	.word	0xeefefffc

08008ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e12c      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ee8:	4b98      	ldr	r3, [pc, #608]	@ (800914c <HAL_RCC_ClockConfig+0x278>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0307 	and.w	r3, r3, #7
 8008ef0:	683a      	ldr	r2, [r7, #0]
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d91b      	bls.n	8008f2e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ef6:	4b95      	ldr	r3, [pc, #596]	@ (800914c <HAL_RCC_ClockConfig+0x278>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f023 0207 	bic.w	r2, r3, #7
 8008efe:	4993      	ldr	r1, [pc, #588]	@ (800914c <HAL_RCC_ClockConfig+0x278>)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f06:	f7fc fd47 	bl	8005998 <HAL_GetTick>
 8008f0a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f0c:	e008      	b.n	8008f20 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008f0e:	f7fc fd43 	bl	8005998 <HAL_GetTick>
 8008f12:	4602      	mov	r2, r0
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	1ad3      	subs	r3, r2, r3
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d901      	bls.n	8008f20 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e110      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f20:	4b8a      	ldr	r3, [pc, #552]	@ (800914c <HAL_RCC_ClockConfig+0x278>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0307 	and.w	r3, r3, #7
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d1ef      	bne.n	8008f0e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0302 	and.w	r3, r3, #2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d016      	beq.n	8008f68 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7ff fb02 	bl	8008548 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008f44:	f7fc fd28 	bl	8005998 <HAL_GetTick>
 8008f48:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008f4a:	e008      	b.n	8008f5e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008f4c:	f7fc fd24 	bl	8005998 <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d901      	bls.n	8008f5e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e0f1      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008f5e:	f7ff fbdf 	bl	8008720 <LL_RCC_IsActiveFlag_HPRE>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0f1      	beq.n	8008f4c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f003 0320 	and.w	r3, r3, #32
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d016      	beq.n	8008fa2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7ff faf8 	bl	800856e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008f7e:	f7fc fd0b 	bl	8005998 <HAL_GetTick>
 8008f82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008f84:	e008      	b.n	8008f98 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008f86:	f7fc fd07 	bl	8005998 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	2b02      	cmp	r3, #2
 8008f92:	d901      	bls.n	8008f98 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008f94:	2303      	movs	r3, #3
 8008f96:	e0d4      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008f98:	f7ff fbd3 	bl	8008742 <LL_RCC_IsActiveFlag_C2HPRE>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0f1      	beq.n	8008f86 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d016      	beq.n	8008fdc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7ff faf0 	bl	8008598 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008fb8:	f7fc fcee 	bl	8005998 <HAL_GetTick>
 8008fbc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008fbe:	e008      	b.n	8008fd2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008fc0:	f7fc fcea 	bl	8005998 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	2b02      	cmp	r3, #2
 8008fcc:	d901      	bls.n	8008fd2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008fce:	2303      	movs	r3, #3
 8008fd0:	e0b7      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008fd2:	f7ff fbc8 	bl	8008766 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d0f1      	beq.n	8008fc0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d016      	beq.n	8009016 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff fae9 	bl	80085c4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008ff2:	f7fc fcd1 	bl	8005998 <HAL_GetTick>
 8008ff6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008ff8:	e008      	b.n	800900c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008ffa:	f7fc fccd 	bl	8005998 <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	2b02      	cmp	r3, #2
 8009006:	d901      	bls.n	800900c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e09a      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800900c:	f7ff fbbd 	bl	800878a <LL_RCC_IsActiveFlag_PPRE1>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d0f1      	beq.n	8008ffa <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 0308 	and.w	r3, r3, #8
 800901e:	2b00      	cmp	r3, #0
 8009020:	d017      	beq.n	8009052 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	00db      	lsls	r3, r3, #3
 8009028:	4618      	mov	r0, r3
 800902a:	f7ff fade 	bl	80085ea <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800902e:	f7fc fcb3 	bl	8005998 <HAL_GetTick>
 8009032:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009034:	e008      	b.n	8009048 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009036:	f7fc fcaf 	bl	8005998 <HAL_GetTick>
 800903a:	4602      	mov	r2, r0
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	1ad3      	subs	r3, r2, r3
 8009040:	2b02      	cmp	r3, #2
 8009042:	d901      	bls.n	8009048 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8009044:	2303      	movs	r3, #3
 8009046:	e07c      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009048:	f7ff fbb0 	bl	80087ac <LL_RCC_IsActiveFlag_PPRE2>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f1      	beq.n	8009036 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b00      	cmp	r3, #0
 800905c:	d043      	beq.n	80090e6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	2b02      	cmp	r3, #2
 8009064:	d106      	bne.n	8009074 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009066:	f7ff f956 	bl	8008316 <LL_RCC_HSE_IsReady>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d11e      	bne.n	80090ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	e066      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	2b03      	cmp	r3, #3
 800907a:	d106      	bne.n	800908a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800907c:	f7ff fb12 	bl	80086a4 <LL_RCC_PLL_IsReady>
 8009080:	4603      	mov	r3, r0
 8009082:	2b00      	cmp	r3, #0
 8009084:	d113      	bne.n	80090ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009086:	2301      	movs	r3, #1
 8009088:	e05b      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d106      	bne.n	80090a0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009092:	f7ff f9f0 	bl	8008476 <LL_RCC_MSI_IsReady>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d108      	bne.n	80090ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e050      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80090a0:	f7ff f966 	bl	8008370 <LL_RCC_HSI_IsReady>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d101      	bne.n	80090ae <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e049      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7ff fa2a 	bl	800850c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090b8:	f7fc fc6e 	bl	8005998 <HAL_GetTick>
 80090bc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090be:	e00a      	b.n	80090d6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80090c0:	f7fc fc6a 	bl	8005998 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e035      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80090d6:	f7ff fa2c 	bl	8008532 <LL_RCC_GetSysClkSource>
 80090da:	4602      	mov	r2, r0
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d1ec      	bne.n	80090c0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80090e6:	4b19      	ldr	r3, [pc, #100]	@ (800914c <HAL_RCC_ClockConfig+0x278>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0307 	and.w	r3, r3, #7
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d21b      	bcs.n	800912c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090f4:	4b15      	ldr	r3, [pc, #84]	@ (800914c <HAL_RCC_ClockConfig+0x278>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f023 0207 	bic.w	r2, r3, #7
 80090fc:	4913      	ldr	r1, [pc, #76]	@ (800914c <HAL_RCC_ClockConfig+0x278>)
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	4313      	orrs	r3, r2
 8009102:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009104:	f7fc fc48 	bl	8005998 <HAL_GetTick>
 8009108:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800910a:	e008      	b.n	800911e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800910c:	f7fc fc44 	bl	8005998 <HAL_GetTick>
 8009110:	4602      	mov	r2, r0
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	1ad3      	subs	r3, r2, r3
 8009116:	2b02      	cmp	r3, #2
 8009118:	d901      	bls.n	800911e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800911a:	2303      	movs	r3, #3
 800911c:	e011      	b.n	8009142 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800911e:	4b0b      	ldr	r3, [pc, #44]	@ (800914c <HAL_RCC_ClockConfig+0x278>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	429a      	cmp	r2, r3
 800912a:	d1ef      	bne.n	800910c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800912c:	f000 f8b4 	bl	8009298 <HAL_RCC_GetHCLKFreq>
 8009130:	4603      	mov	r3, r0
 8009132:	4a07      	ldr	r2, [pc, #28]	@ (8009150 <HAL_RCC_ClockConfig+0x27c>)
 8009134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8009136:	4b07      	ldr	r3, [pc, #28]	@ (8009154 <HAL_RCC_ClockConfig+0x280>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4618      	mov	r0, r3
 800913c:	f7fc fbe0 	bl	8005900 <HAL_InitTick>
 8009140:	4603      	mov	r3, r0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	58004000 	.word	0x58004000
 8009150:	20000014 	.word	0x20000014
 8009154:	20000024 	.word	0x20000024

08009158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009158:	b590      	push	{r4, r7, lr}
 800915a:	b087      	sub	sp, #28
 800915c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800915e:	2300      	movs	r3, #0
 8009160:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8009162:	2300      	movs	r3, #0
 8009164:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009166:	f7ff f9e4 	bl	8008532 <LL_RCC_GetSysClkSource>
 800916a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800916c:	f7ff facd 	bl	800870a <LL_RCC_PLL_GetMainSource>
 8009170:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d005      	beq.n	8009184 <HAL_RCC_GetSysClockFreq+0x2c>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b0c      	cmp	r3, #12
 800917c:	d139      	bne.n	80091f2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b01      	cmp	r3, #1
 8009182:	d136      	bne.n	80091f2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009184:	f7ff f987 	bl	8008496 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d115      	bne.n	80091ba <HAL_RCC_GetSysClockFreq+0x62>
 800918e:	f7ff f982 	bl	8008496 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009192:	4603      	mov	r3, r0
 8009194:	2b01      	cmp	r3, #1
 8009196:	d106      	bne.n	80091a6 <HAL_RCC_GetSysClockFreq+0x4e>
 8009198:	f7ff f98d 	bl	80084b6 <LL_RCC_MSI_GetRange>
 800919c:	4603      	mov	r3, r0
 800919e:	0a1b      	lsrs	r3, r3, #8
 80091a0:	f003 030f 	and.w	r3, r3, #15
 80091a4:	e005      	b.n	80091b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80091a6:	f7ff f991 	bl	80084cc <LL_RCC_MSI_GetRangeAfterStandby>
 80091aa:	4603      	mov	r3, r0
 80091ac:	0a1b      	lsrs	r3, r3, #8
 80091ae:	f003 030f 	and.w	r3, r3, #15
 80091b2:	4a36      	ldr	r2, [pc, #216]	@ (800928c <HAL_RCC_GetSysClockFreq+0x134>)
 80091b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091b8:	e014      	b.n	80091e4 <HAL_RCC_GetSysClockFreq+0x8c>
 80091ba:	f7ff f96c 	bl	8008496 <LL_RCC_MSI_IsEnabledRangeSelect>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d106      	bne.n	80091d2 <HAL_RCC_GetSysClockFreq+0x7a>
 80091c4:	f7ff f977 	bl	80084b6 <LL_RCC_MSI_GetRange>
 80091c8:	4603      	mov	r3, r0
 80091ca:	091b      	lsrs	r3, r3, #4
 80091cc:	f003 030f 	and.w	r3, r3, #15
 80091d0:	e005      	b.n	80091de <HAL_RCC_GetSysClockFreq+0x86>
 80091d2:	f7ff f97b 	bl	80084cc <LL_RCC_MSI_GetRangeAfterStandby>
 80091d6:	4603      	mov	r3, r0
 80091d8:	091b      	lsrs	r3, r3, #4
 80091da:	f003 030f 	and.w	r3, r3, #15
 80091de:	4a2b      	ldr	r2, [pc, #172]	@ (800928c <HAL_RCC_GetSysClockFreq+0x134>)
 80091e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091e4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d115      	bne.n	8009218 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80091f0:	e012      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80091f2:	68bb      	ldr	r3, [r7, #8]
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	d102      	bne.n	80091fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80091f8:	4b25      	ldr	r3, [pc, #148]	@ (8009290 <HAL_RCC_GetSysClockFreq+0x138>)
 80091fa:	617b      	str	r3, [r7, #20]
 80091fc:	e00c      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	2b08      	cmp	r3, #8
 8009202:	d109      	bne.n	8009218 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8009204:	f7ff f85a 	bl	80082bc <LL_RCC_HSE_IsEnabledDiv2>
 8009208:	4603      	mov	r3, r0
 800920a:	2b01      	cmp	r3, #1
 800920c:	d102      	bne.n	8009214 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800920e:	4b20      	ldr	r3, [pc, #128]	@ (8009290 <HAL_RCC_GetSysClockFreq+0x138>)
 8009210:	617b      	str	r3, [r7, #20]
 8009212:	e001      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8009214:	4b1f      	ldr	r3, [pc, #124]	@ (8009294 <HAL_RCC_GetSysClockFreq+0x13c>)
 8009216:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009218:	f7ff f98b 	bl	8008532 <LL_RCC_GetSysClkSource>
 800921c:	4603      	mov	r3, r0
 800921e:	2b0c      	cmp	r3, #12
 8009220:	d12f      	bne.n	8009282 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009222:	f7ff fa72 	bl	800870a <LL_RCC_PLL_GetMainSource>
 8009226:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b02      	cmp	r3, #2
 800922c:	d003      	beq.n	8009236 <HAL_RCC_GetSysClockFreq+0xde>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b03      	cmp	r3, #3
 8009232:	d003      	beq.n	800923c <HAL_RCC_GetSysClockFreq+0xe4>
 8009234:	e00d      	b.n	8009252 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009236:	4b16      	ldr	r3, [pc, #88]	@ (8009290 <HAL_RCC_GetSysClockFreq+0x138>)
 8009238:	60fb      	str	r3, [r7, #12]
        break;
 800923a:	e00d      	b.n	8009258 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800923c:	f7ff f83e 	bl	80082bc <LL_RCC_HSE_IsEnabledDiv2>
 8009240:	4603      	mov	r3, r0
 8009242:	2b01      	cmp	r3, #1
 8009244:	d102      	bne.n	800924c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009246:	4b12      	ldr	r3, [pc, #72]	@ (8009290 <HAL_RCC_GetSysClockFreq+0x138>)
 8009248:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800924a:	e005      	b.n	8009258 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800924c:	4b11      	ldr	r3, [pc, #68]	@ (8009294 <HAL_RCC_GetSysClockFreq+0x13c>)
 800924e:	60fb      	str	r3, [r7, #12]
        break;
 8009250:	e002      	b.n	8009258 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	60fb      	str	r3, [r7, #12]
        break;
 8009256:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009258:	f7ff fa35 	bl	80086c6 <LL_RCC_PLL_GetN>
 800925c:	4602      	mov	r2, r0
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	fb03 f402 	mul.w	r4, r3, r2
 8009264:	f7ff fa46 	bl	80086f4 <LL_RCC_PLL_GetDivider>
 8009268:	4603      	mov	r3, r0
 800926a:	091b      	lsrs	r3, r3, #4
 800926c:	3301      	adds	r3, #1
 800926e:	fbb4 f4f3 	udiv	r4, r4, r3
 8009272:	f7ff fa34 	bl	80086de <LL_RCC_PLL_GetR>
 8009276:	4603      	mov	r3, r0
 8009278:	0f5b      	lsrs	r3, r3, #29
 800927a:	3301      	adds	r3, #1
 800927c:	fbb4 f3f3 	udiv	r3, r4, r3
 8009280:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009282:	697b      	ldr	r3, [r7, #20]
}
 8009284:	4618      	mov	r0, r3
 8009286:	371c      	adds	r7, #28
 8009288:	46bd      	mov	sp, r7
 800928a:	bd90      	pop	{r4, r7, pc}
 800928c:	0800f16c 	.word	0x0800f16c
 8009290:	00f42400 	.word	0x00f42400
 8009294:	01e84800 	.word	0x01e84800

08009298 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009298:	b598      	push	{r3, r4, r7, lr}
 800929a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800929c:	f7ff ff5c 	bl	8009158 <HAL_RCC_GetSysClockFreq>
 80092a0:	4604      	mov	r4, r0
 80092a2:	f7ff f9b5 	bl	8008610 <LL_RCC_GetAHBPrescaler>
 80092a6:	4603      	mov	r3, r0
 80092a8:	091b      	lsrs	r3, r3, #4
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	4a03      	ldr	r2, [pc, #12]	@ (80092bc <HAL_RCC_GetHCLKFreq+0x24>)
 80092b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	bd98      	pop	{r3, r4, r7, pc}
 80092bc:	0800f10c 	.word	0x0800f10c

080092c0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80092c0:	b598      	push	{r3, r4, r7, lr}
 80092c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80092c4:	f7ff ffe8 	bl	8009298 <HAL_RCC_GetHCLKFreq>
 80092c8:	4604      	mov	r4, r0
 80092ca:	f7ff f9b9 	bl	8008640 <LL_RCC_GetAPB1Prescaler>
 80092ce:	4603      	mov	r3, r0
 80092d0:	0a1b      	lsrs	r3, r3, #8
 80092d2:	4a03      	ldr	r2, [pc, #12]	@ (80092e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80092d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80092dc:	4618      	mov	r0, r3
 80092de:	bd98      	pop	{r3, r4, r7, pc}
 80092e0:	0800f14c 	.word	0x0800f14c

080092e4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80092e4:	b598      	push	{r3, r4, r7, lr}
 80092e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80092e8:	f7ff ffd6 	bl	8009298 <HAL_RCC_GetHCLKFreq>
 80092ec:	4604      	mov	r4, r0
 80092ee:	f7ff f9b2 	bl	8008656 <LL_RCC_GetAPB2Prescaler>
 80092f2:	4603      	mov	r3, r0
 80092f4:	0adb      	lsrs	r3, r3, #11
 80092f6:	4a03      	ldr	r2, [pc, #12]	@ (8009304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80092f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009300:	4618      	mov	r0, r3
 8009302:	bd98      	pop	{r3, r4, r7, pc}
 8009304:	0800f14c 	.word	0x0800f14c

08009308 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009308:	b590      	push	{r4, r7, lr}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	091b      	lsrs	r3, r3, #4
 8009314:	f003 030f 	and.w	r3, r3, #15
 8009318:	4a10      	ldr	r2, [pc, #64]	@ (800935c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800931a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800931e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8009320:	f7ff f981 	bl	8008626 <LL_RCC_GetAHB3Prescaler>
 8009324:	4603      	mov	r3, r0
 8009326:	091b      	lsrs	r3, r3, #4
 8009328:	f003 030f 	and.w	r3, r3, #15
 800932c:	4a0c      	ldr	r2, [pc, #48]	@ (8009360 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800932e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	fbb2 f3f3 	udiv	r3, r2, r3
 8009338:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	4a09      	ldr	r2, [pc, #36]	@ (8009364 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800933e:	fba2 2303 	umull	r2, r3, r2, r3
 8009342:	0c9c      	lsrs	r4, r3, #18
 8009344:	f7fe ff56 	bl	80081f4 <HAL_PWREx_GetVoltageRange>
 8009348:	4603      	mov	r3, r0
 800934a:	4619      	mov	r1, r3
 800934c:	4620      	mov	r0, r4
 800934e:	f000 f80b 	bl	8009368 <RCC_SetFlashLatency>
 8009352:	4603      	mov	r3, r0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3714      	adds	r7, #20
 8009358:	46bd      	mov	sp, r7
 800935a:	bd90      	pop	{r4, r7, pc}
 800935c:	0800f16c 	.word	0x0800f16c
 8009360:	0800f10c 	.word	0x0800f10c
 8009364:	431bde83 	.word	0x431bde83

08009368 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b08e      	sub	sp, #56	@ 0x38
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8009372:	4a3a      	ldr	r2, [pc, #232]	@ (800945c <RCC_SetFlashLatency+0xf4>)
 8009374:	f107 0320 	add.w	r3, r7, #32
 8009378:	e892 0003 	ldmia.w	r2, {r0, r1}
 800937c:	6018      	str	r0, [r3, #0]
 800937e:	3304      	adds	r3, #4
 8009380:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8009382:	4a37      	ldr	r2, [pc, #220]	@ (8009460 <RCC_SetFlashLatency+0xf8>)
 8009384:	f107 0318 	add.w	r3, r7, #24
 8009388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800938c:	6018      	str	r0, [r3, #0]
 800938e:	3304      	adds	r3, #4
 8009390:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8009392:	4a34      	ldr	r2, [pc, #208]	@ (8009464 <RCC_SetFlashLatency+0xfc>)
 8009394:	f107 030c 	add.w	r3, r7, #12
 8009398:	ca07      	ldmia	r2, {r0, r1, r2}
 800939a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800939e:	2300      	movs	r3, #0
 80093a0:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093a8:	d11b      	bne.n	80093e2 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80093aa:	2300      	movs	r3, #0
 80093ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80093ae:	e014      	b.n	80093da <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80093b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b2:	005b      	lsls	r3, r3, #1
 80093b4:	3338      	adds	r3, #56	@ 0x38
 80093b6:	443b      	add	r3, r7
 80093b8:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80093bc:	461a      	mov	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d807      	bhi.n	80093d4 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80093c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	3338      	adds	r3, #56	@ 0x38
 80093ca:	443b      	add	r3, r7
 80093cc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80093d0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093d2:	e021      	b.n	8009418 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80093d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093d6:	3301      	adds	r3, #1
 80093d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d9e7      	bls.n	80093b0 <RCC_SetFlashLatency+0x48>
 80093e0:	e01a      	b.n	8009418 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80093e2:	2300      	movs	r3, #0
 80093e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093e6:	e014      	b.n	8009412 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80093e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	3338      	adds	r3, #56	@ 0x38
 80093ee:	443b      	add	r3, r7
 80093f0:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80093f4:	461a      	mov	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d807      	bhi.n	800940c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80093fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	3338      	adds	r3, #56	@ 0x38
 8009402:	443b      	add	r3, r7
 8009404:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009408:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800940a:	e005      	b.n	8009418 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800940c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800940e:	3301      	adds	r3, #1
 8009410:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009414:	2b02      	cmp	r3, #2
 8009416:	d9e7      	bls.n	80093e8 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009418:	4b13      	ldr	r3, [pc, #76]	@ (8009468 <RCC_SetFlashLatency+0x100>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f023 0207 	bic.w	r2, r3, #7
 8009420:	4911      	ldr	r1, [pc, #68]	@ (8009468 <RCC_SetFlashLatency+0x100>)
 8009422:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009424:	4313      	orrs	r3, r2
 8009426:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009428:	f7fc fab6 	bl	8005998 <HAL_GetTick>
 800942c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800942e:	e008      	b.n	8009442 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009430:	f7fc fab2 	bl	8005998 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e007      	b.n	8009452 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009442:	4b09      	ldr	r3, [pc, #36]	@ (8009468 <RCC_SetFlashLatency+0x100>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 0307 	and.w	r3, r3, #7
 800944a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800944c:	429a      	cmp	r2, r3
 800944e:	d1ef      	bne.n	8009430 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3738      	adds	r7, #56	@ 0x38
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	0800e984 	.word	0x0800e984
 8009460:	0800e98c 	.word	0x0800e98c
 8009464:	0800e994 	.word	0x0800e994
 8009468:	58004000 	.word	0x58004000

0800946c <LL_RCC_LSE_IsReady>:
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009478:	f003 0302 	and.w	r3, r3, #2
 800947c:	2b02      	cmp	r3, #2
 800947e:	d101      	bne.n	8009484 <LL_RCC_LSE_IsReady+0x18>
 8009480:	2301      	movs	r3, #1
 8009482:	e000      	b.n	8009486 <LL_RCC_LSE_IsReady+0x1a>
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	46bd      	mov	sp, r7
 800948a:	bc80      	pop	{r7}
 800948c:	4770      	bx	lr

0800948e <LL_RCC_SetUSARTClockSource>:
{
 800948e:	b480      	push	{r7}
 8009490:	b083      	sub	sp, #12
 8009492:	af00      	add	r7, sp, #0
 8009494:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8009496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800949a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	0c1b      	lsrs	r3, r3, #16
 80094a2:	43db      	mvns	r3, r3
 80094a4:	401a      	ands	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80094ae:	4313      	orrs	r3, r2
 80094b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bc80      	pop	{r7}
 80094bc:	4770      	bx	lr

080094be <LL_RCC_SetI2SClockSource>:
{
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80094c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	4313      	orrs	r3, r2
 80094da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80094de:	bf00      	nop
 80094e0:	370c      	adds	r7, #12
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bc80      	pop	{r7}
 80094e6:	4770      	bx	lr

080094e8 <LL_RCC_SetLPUARTClockSource>:
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80094f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094f8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4313      	orrs	r3, r2
 8009504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	bc80      	pop	{r7}
 8009510:	4770      	bx	lr

08009512 <LL_RCC_SetI2CClockSource>:
{
 8009512:	b480      	push	{r7}
 8009514:	b083      	sub	sp, #12
 8009516:	af00      	add	r7, sp, #0
 8009518:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800951a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800951e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	091b      	lsrs	r3, r3, #4
 8009526:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800952a:	43db      	mvns	r3, r3
 800952c:	401a      	ands	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009536:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800953a:	4313      	orrs	r3, r2
 800953c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	bc80      	pop	{r7}
 8009548:	4770      	bx	lr

0800954a <LL_RCC_SetLPTIMClockSource>:
{
 800954a:	b480      	push	{r7}
 800954c:	b083      	sub	sp, #12
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009556:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	0c1b      	lsrs	r3, r3, #16
 800955e:	041b      	lsls	r3, r3, #16
 8009560:	43db      	mvns	r3, r3
 8009562:	401a      	ands	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	041b      	lsls	r3, r3, #16
 8009568:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800956c:	4313      	orrs	r3, r2
 800956e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	bc80      	pop	{r7}
 800957a:	4770      	bx	lr

0800957c <LL_RCC_SetRNGClockSource>:
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800958c:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009590:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4313      	orrs	r3, r2
 8009598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bc80      	pop	{r7}
 80095a4:	4770      	bx	lr

080095a6 <LL_RCC_SetADCClockSource>:
{
 80095a6:	b480      	push	{r7}
 80095a8:	b083      	sub	sp, #12
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80095ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80095ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4313      	orrs	r3, r2
 80095c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bc80      	pop	{r7}
 80095ce:	4770      	bx	lr

080095d0 <LL_RCC_SetRTCClockSource>:
{
 80095d0:	b480      	push	{r7}
 80095d2:	b083      	sub	sp, #12
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80095d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095e0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80095e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bc80      	pop	{r7}
 80095f8:	4770      	bx	lr

080095fa <LL_RCC_GetRTCClockSource>:
{
 80095fa:	b480      	push	{r7}
 80095fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80095fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800960a:	4618      	mov	r0, r3
 800960c:	46bd      	mov	sp, r7
 800960e:	bc80      	pop	{r7}
 8009610:	4770      	bx	lr

08009612 <LL_RCC_ForceBackupDomainReset>:
{
 8009612:	b480      	push	{r7}
 8009614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800961a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800961e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009626:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800962a:	bf00      	nop
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr

08009632 <LL_RCC_ReleaseBackupDomainReset>:
{
 8009632:	b480      	push	{r7}
 8009634:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800963a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800963e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009646:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800964a:	bf00      	nop
 800964c:	46bd      	mov	sp, r7
 800964e:	bc80      	pop	{r7}
 8009650:	4770      	bx	lr
	...

08009654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b086      	sub	sp, #24
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8009660:	2300      	movs	r3, #0
 8009662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009664:	2300      	movs	r3, #0
 8009666:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d058      	beq.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8009674:	f7fe fdb0 	bl	80081d8 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009678:	f7fc f98e 	bl	8005998 <HAL_GetTick>
 800967c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800967e:	e009      	b.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009680:	f7fc f98a 	bl	8005998 <HAL_GetTick>
 8009684:	4602      	mov	r2, r0
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	1ad3      	subs	r3, r2, r3
 800968a:	2b02      	cmp	r3, #2
 800968c:	d902      	bls.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800968e:	2303      	movs	r3, #3
 8009690:	74fb      	strb	r3, [r7, #19]
        break;
 8009692:	e006      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009694:	4b7b      	ldr	r3, [pc, #492]	@ (8009884 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800969c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a0:	d1ee      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80096a2:	7cfb      	ldrb	r3, [r7, #19]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d13c      	bne.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80096a8:	f7ff ffa7 	bl	80095fa <LL_RCC_GetRTCClockSource>
 80096ac:	4602      	mov	r2, r0
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d00f      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80096b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80096be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096c2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80096c4:	f7ff ffa5 	bl	8009612 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80096c8:	f7ff ffb3 	bl	8009632 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80096cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	f003 0302 	and.w	r3, r3, #2
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d014      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80096e0:	f7fc f95a 	bl	8005998 <HAL_GetTick>
 80096e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80096e6:	e00b      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80096e8:	f7fc f956 	bl	8005998 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d902      	bls.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	74fb      	strb	r3, [r7, #19]
            break;
 80096fe:	e004      	b.n	800970a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8009700:	f7ff feb4 	bl	800946c <LL_RCC_LSE_IsReady>
 8009704:	4603      	mov	r3, r0
 8009706:	2b01      	cmp	r3, #1
 8009708:	d1ee      	bne.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800970a:	7cfb      	ldrb	r3, [r7, #19]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d105      	bne.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009714:	4618      	mov	r0, r3
 8009716:	f7ff ff5b 	bl	80095d0 <LL_RCC_SetRTCClockSource>
 800971a:	e004      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800971c:	7cfb      	ldrb	r3, [r7, #19]
 800971e:	74bb      	strb	r3, [r7, #18]
 8009720:	e001      	b.n	8009726 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009722:	7cfb      	ldrb	r3, [r7, #19]
 8009724:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0301 	and.w	r3, r3, #1
 800972e:	2b00      	cmp	r3, #0
 8009730:	d004      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	4618      	mov	r0, r3
 8009738:	f7ff fea9 	bl	800948e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d004      	beq.n	8009752 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	4618      	mov	r0, r3
 800974e:	f7ff fe9e 	bl	800948e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0320 	and.w	r3, r3, #32
 800975a:	2b00      	cmp	r3, #0
 800975c:	d004      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	4618      	mov	r0, r3
 8009764:	f7ff fec0 	bl	80094e8 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009770:	2b00      	cmp	r3, #0
 8009772:	d004      	beq.n	800977e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6a1b      	ldr	r3, [r3, #32]
 8009778:	4618      	mov	r0, r3
 800977a:	f7ff fee6 	bl	800954a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800978e:	4618      	mov	r0, r3
 8009790:	f7ff fedb 	bl	800954a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800979c:	2b00      	cmp	r3, #0
 800979e:	d004      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7ff fed0 	bl	800954a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d004      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7ff fea9 	bl	8009512 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff fe9e 	bl	8009512 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d004      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	69db      	ldr	r3, [r3, #28]
 80097e6:	4618      	mov	r0, r3
 80097e8:	f7ff fe93 	bl	8009512 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f003 0310 	and.w	r3, r3, #16
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d011      	beq.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7ff fe5e 	bl	80094be <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800980a:	d107      	bne.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800980c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009816:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800981a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d010      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800982c:	4618      	mov	r0, r3
 800982e:	f7ff fea5 	bl	800957c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009836:	2b00      	cmp	r3, #0
 8009838:	d107      	bne.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800983a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009844:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009848:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d011      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff fea3 	bl	80095a6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009864:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009868:	d107      	bne.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800986a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009878:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800987a:	7cbb      	ldrb	r3, [r7, #18]
}
 800987c:	4618      	mov	r0, r3
 800987e:	3718      	adds	r7, #24
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	58000400 	.word	0x58000400

08009888 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d071      	beq.n	800997e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d106      	bne.n	80098b4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f7fa f946 	bl	8003b40 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2202      	movs	r2, #2
 80098b8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80098bc:	4b32      	ldr	r3, [pc, #200]	@ (8009988 <HAL_RTC_Init+0x100>)
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f003 0310 	and.w	r3, r3, #16
 80098c4:	2b10      	cmp	r3, #16
 80098c6:	d051      	beq.n	800996c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098c8:	4b2f      	ldr	r3, [pc, #188]	@ (8009988 <HAL_RTC_Init+0x100>)
 80098ca:	22ca      	movs	r2, #202	@ 0xca
 80098cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80098ce:	4b2e      	ldr	r3, [pc, #184]	@ (8009988 <HAL_RTC_Init+0x100>)
 80098d0:	2253      	movs	r2, #83	@ 0x53
 80098d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f87f 	bl	80099d8 <RTC_EnterInitMode>
 80098da:	4603      	mov	r3, r0
 80098dc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80098de:	7bfb      	ldrb	r3, [r7, #15]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d13f      	bne.n	8009964 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80098e4:	4b28      	ldr	r3, [pc, #160]	@ (8009988 <HAL_RTC_Init+0x100>)
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	4a27      	ldr	r2, [pc, #156]	@ (8009988 <HAL_RTC_Init+0x100>)
 80098ea:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80098ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098f2:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80098f4:	4b24      	ldr	r3, [pc, #144]	@ (8009988 <HAL_RTC_Init+0x100>)
 80098f6:	699a      	ldr	r2, [r3, #24]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6859      	ldr	r1, [r3, #4]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	4319      	orrs	r1, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	699b      	ldr	r3, [r3, #24]
 8009906:	430b      	orrs	r3, r1
 8009908:	491f      	ldr	r1, [pc, #124]	@ (8009988 <HAL_RTC_Init+0x100>)
 800990a:	4313      	orrs	r3, r2
 800990c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	68da      	ldr	r2, [r3, #12]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	689b      	ldr	r3, [r3, #8]
 8009916:	041b      	lsls	r3, r3, #16
 8009918:	491b      	ldr	r1, [pc, #108]	@ (8009988 <HAL_RTC_Init+0x100>)
 800991a:	4313      	orrs	r3, r2
 800991c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800991e:	4b1a      	ldr	r3, [pc, #104]	@ (8009988 <HAL_RTC_Init+0x100>)
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800992e:	430b      	orrs	r3, r1
 8009930:	4915      	ldr	r1, [pc, #84]	@ (8009988 <HAL_RTC_Init+0x100>)
 8009932:	4313      	orrs	r3, r2
 8009934:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f882 	bl	8009a40 <RTC_ExitInitMode>
 800993c:	4603      	mov	r3, r0
 800993e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10e      	bne.n	8009964 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8009946:	4b10      	ldr	r3, [pc, #64]	@ (8009988 <HAL_RTC_Init+0x100>)
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a19      	ldr	r1, [r3, #32]
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69db      	ldr	r3, [r3, #28]
 8009956:	4319      	orrs	r1, r3
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	430b      	orrs	r3, r1
 800995e:	490a      	ldr	r1, [pc, #40]	@ (8009988 <HAL_RTC_Init+0x100>)
 8009960:	4313      	orrs	r3, r2
 8009962:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009964:	4b08      	ldr	r3, [pc, #32]	@ (8009988 <HAL_RTC_Init+0x100>)
 8009966:	22ff      	movs	r2, #255	@ 0xff
 8009968:	625a      	str	r2, [r3, #36]	@ 0x24
 800996a:	e001      	b.n	8009970 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800996c:	2300      	movs	r3, #0
 800996e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d103      	bne.n	800997e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2201      	movs	r2, #1
 800997a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800997e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009980:	4618      	mov	r0, r3
 8009982:	3710      	adds	r7, #16
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	40002800 	.word	0x40002800

0800998c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009994:	4b0f      	ldr	r3, [pc, #60]	@ (80099d4 <HAL_RTC_WaitForSynchro+0x48>)
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	4a0e      	ldr	r2, [pc, #56]	@ (80099d4 <HAL_RTC_WaitForSynchro+0x48>)
 800999a:	f023 0320 	bic.w	r3, r3, #32
 800999e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80099a0:	f7fb fffa 	bl	8005998 <HAL_GetTick>
 80099a4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80099a6:	e009      	b.n	80099bc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099a8:	f7fb fff6 	bl	8005998 <HAL_GetTick>
 80099ac:	4602      	mov	r2, r0
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	1ad3      	subs	r3, r2, r3
 80099b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80099b6:	d901      	bls.n	80099bc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	e006      	b.n	80099ca <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80099bc:	4b05      	ldr	r3, [pc, #20]	@ (80099d4 <HAL_RTC_WaitForSynchro+0x48>)
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	f003 0320 	and.w	r3, r3, #32
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d0ef      	beq.n	80099a8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	40002800 	.word	0x40002800

080099d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80099e4:	4b15      	ldr	r3, [pc, #84]	@ (8009a3c <RTC_EnterInitMode+0x64>)
 80099e6:	68db      	ldr	r3, [r3, #12]
 80099e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d120      	bne.n	8009a32 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80099f0:	4b12      	ldr	r3, [pc, #72]	@ (8009a3c <RTC_EnterInitMode+0x64>)
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	4a11      	ldr	r2, [pc, #68]	@ (8009a3c <RTC_EnterInitMode+0x64>)
 80099f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099fa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80099fc:	f7fb ffcc 	bl	8005998 <HAL_GetTick>
 8009a00:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a02:	e00d      	b.n	8009a20 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009a04:	f7fb ffc8 	bl	8005998 <HAL_GetTick>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a12:	d905      	bls.n	8009a20 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2203      	movs	r2, #3
 8009a1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009a20:	4b06      	ldr	r3, [pc, #24]	@ (8009a3c <RTC_EnterInitMode+0x64>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <RTC_EnterInitMode+0x5a>
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	2b03      	cmp	r3, #3
 8009a30:	d1e8      	bne.n	8009a04 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}
 8009a3c:	40002800 	.word	0x40002800

08009a40 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b084      	sub	sp, #16
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab8 <RTC_ExitInitMode+0x78>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	4a19      	ldr	r2, [pc, #100]	@ (8009ab8 <RTC_ExitInitMode+0x78>)
 8009a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a56:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009a58:	4b17      	ldr	r3, [pc, #92]	@ (8009ab8 <RTC_ExitInitMode+0x78>)
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	f003 0320 	and.w	r3, r3, #32
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d10c      	bne.n	8009a7e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff ff91 	bl	800998c <HAL_RTC_WaitForSynchro>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d01e      	beq.n	8009aae <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2203      	movs	r2, #3
 8009a74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	73fb      	strb	r3, [r7, #15]
 8009a7c:	e017      	b.n	8009aae <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8009ab8 <RTC_ExitInitMode+0x78>)
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	4a0d      	ldr	r2, [pc, #52]	@ (8009ab8 <RTC_ExitInitMode+0x78>)
 8009a84:	f023 0320 	bic.w	r3, r3, #32
 8009a88:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff ff7e 	bl	800998c <HAL_RTC_WaitForSynchro>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2203      	movs	r2, #3
 8009a9a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009aa2:	4b05      	ldr	r3, [pc, #20]	@ (8009ab8 <RTC_ExitInitMode+0x78>)
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	4a04      	ldr	r2, [pc, #16]	@ (8009ab8 <RTC_ExitInitMode+0x78>)
 8009aa8:	f043 0320 	orr.w	r3, r3, #32
 8009aac:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	40002800 	.word	0x40002800

08009abc <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
 8009ac8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d101      	bne.n	8009ad8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8009ad4:	2302      	movs	r3, #2
 8009ad6:	e06f      	b.n	8009bb8 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	2201      	movs	r2, #1
 8009adc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ae8:	4b35      	ldr	r3, [pc, #212]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009aea:	22ca      	movs	r2, #202	@ 0xca
 8009aec:	625a      	str	r2, [r3, #36]	@ 0x24
 8009aee:	4b34      	ldr	r3, [pc, #208]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009af0:	2253      	movs	r2, #83	@ 0x53
 8009af2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8009af4:	4b32      	ldr	r3, [pc, #200]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009af6:	699b      	ldr	r3, [r3, #24]
 8009af8:	4a31      	ldr	r2, [pc, #196]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009afa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009afe:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8009b00:	4b2f      	ldr	r3, [pc, #188]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009b02:	2204      	movs	r2, #4
 8009b04:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009b06:	4b2e      	ldr	r3, [pc, #184]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d11e      	bne.n	8009b50 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 8009b12:	f7fb ff41 	bl	8005998 <HAL_GetTick>
 8009b16:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009b18:	e014      	b.n	8009b44 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009b1a:	f7fb ff3d 	bl	8005998 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	697b      	ldr	r3, [r7, #20]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b28:	d90c      	bls.n	8009b44 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b2a:	4b25      	ldr	r3, [pc, #148]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009b2c:	22ff      	movs	r2, #255	@ 0xff
 8009b2e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2203      	movs	r2, #3
 8009b34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

        return HAL_TIMEOUT;
 8009b40:	2303      	movs	r3, #3
 8009b42:	e039      	b.n	8009bb8 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009b44:	4b1e      	ldr	r3, [pc, #120]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d0e4      	beq.n	8009b1a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	041a      	lsls	r2, r3, #16
 8009b54:	491a      	ldr	r1, [pc, #104]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8009b5c:	4b18      	ldr	r3, [pc, #96]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	f023 0207 	bic.w	r2, r3, #7
 8009b64:	4916      	ldr	r1, [pc, #88]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d008      	beq.n	8009b84 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8009b72:	4b14      	ldr	r3, [pc, #80]	@ (8009bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8009b74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b78:	4a12      	ldr	r2, [pc, #72]	@ (8009bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8009b7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b7e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
 8009b82:	e007      	b.n	8009b94 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009b84:	4b0f      	ldr	r3, [pc, #60]	@ (8009bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8009b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8009bc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8009b8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009b90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8009b94:	4b0a      	ldr	r3, [pc, #40]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	4a09      	ldr	r2, [pc, #36]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009b9a:	f443 4388 	orr.w	r3, r3, #17408	@ 0x4400
 8009b9e:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ba0:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8009ba2:	22ff      	movs	r2, #255	@ 0xff
 8009ba4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	40002800 	.word	0x40002800
 8009bc4:	58000800 	.word	0x58000800

08009bc8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d101      	bne.n	8009bde <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8009bda:	2302      	movs	r3, #2
 8009bdc:	e041      	b.n	8009c62 <HAL_RTCEx_DeactivateWakeUpTimer+0x9a>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2202      	movs	r2, #2
 8009bea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bee:	4b1f      	ldr	r3, [pc, #124]	@ (8009c6c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8009bf0:	22ca      	movs	r2, #202	@ 0xca
 8009bf2:	625a      	str	r2, [r3, #36]	@ 0x24
 8009bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8009c6c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8009bf6:	2253      	movs	r2, #83	@ 0x53
 8009bf8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8009bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8009c6c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	4a1b      	ldr	r2, [pc, #108]	@ (8009c6c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8009c00:	f423 4388 	bic.w	r3, r3, #17408	@ 0x4400
 8009c04:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 8009c06:	f7fb fec7 	bl	8005998 <HAL_GetTick>
 8009c0a:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009c0c:	e014      	b.n	8009c38 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009c0e:	f7fb fec3 	bl	8005998 <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009c1c:	d90c      	bls.n	8009c38 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c1e:	4b13      	ldr	r3, [pc, #76]	@ (8009c6c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8009c20:	22ff      	movs	r2, #255	@ 0xff
 8009c22:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2203      	movs	r2, #3
 8009c28:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      return HAL_TIMEOUT;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e014      	b.n	8009c62 <HAL_RTCEx_DeactivateWakeUpTimer+0x9a>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8009c38:	4b0c      	ldr	r3, [pc, #48]	@ (8009c6c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f003 0304 	and.w	r3, r3, #4
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d0e4      	beq.n	8009c0e <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
    }
  }

  /* Clear wakeup timer flag */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8009c44:	4b09      	ldr	r3, [pc, #36]	@ (8009c6c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8009c46:	2204      	movs	r2, #4
 8009c48:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c4a:	4b08      	ldr	r3, [pc, #32]	@ (8009c6c <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8009c4c:	22ff      	movs	r2, #255	@ 0xff
 8009c4e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
 8009c6a:	bf00      	nop
 8009c6c:	40002800 	.word	0x40002800

08009c70 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8009c78:	4b06      	ldr	r3, [pc, #24]	@ (8009c94 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009c7a:	689b      	ldr	r3, [r3, #8]
 8009c7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009c80:	4904      	ldr	r1, [pc, #16]	@ (8009c94 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	608b      	str	r3, [r1, #8]
}
 8009c88:	bf00      	nop
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bc80      	pop	{r7}
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	58000400 	.word	0x58000400

08009c98 <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009c9c:	4b05      	ldr	r3, [pc, #20]	@ (8009cb4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ca2:	4a04      	ldr	r2, [pc, #16]	@ (8009cb4 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8009ca4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ca8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009cac:	bf00      	nop
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bc80      	pop	{r7}
 8009cb2:	4770      	bx	lr
 8009cb4:	58000400 	.word	0x58000400

08009cb8 <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8009cbc:	4b05      	ldr	r3, [pc, #20]	@ (8009cd4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009cc2:	4a04      	ldr	r2, [pc, #16]	@ (8009cd4 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8009cc4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009ccc:	bf00      	nop
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bc80      	pop	{r7}
 8009cd2:	4770      	bx	lr
 8009cd4:	58000400 	.word	0x58000400

08009cd8 <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8009cdc:	4b03      	ldr	r3, [pc, #12]	@ (8009cec <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8009cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ce2:	619a      	str	r2, [r3, #24]
}
 8009ce4:	bf00      	nop
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bc80      	pop	{r7}
 8009cea:	4770      	bx	lr
 8009cec:	58000400 	.word	0x58000400

08009cf0 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8009cf4:	4b06      	ldr	r3, [pc, #24]	@ (8009d10 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	f003 0302 	and.w	r3, r3, #2
 8009cfc:	2b02      	cmp	r3, #2
 8009cfe:	d101      	bne.n	8009d04 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e000      	b.n	8009d06 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bc80      	pop	{r7}
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	58000400 	.word	0x58000400

08009d14 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8009d14:	b480      	push	{r7}
 8009d16:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8009d18:	4b06      	ldr	r3, [pc, #24]	@ (8009d34 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b04      	cmp	r3, #4
 8009d22:	d101      	bne.n	8009d28 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8009d24:	2301      	movs	r3, #1
 8009d26:	e000      	b.n	8009d2a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bc80      	pop	{r7}
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	58000400 	.word	0x58000400

08009d38 <LL_RCC_RF_DisableReset>:
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8009d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009d48:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009d4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8009d50:	bf00      	nop
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bc80      	pop	{r7}
 8009d56:	4770      	bx	lr

08009d58 <LL_RCC_IsRFUnderReset>:
{
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8009d5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009d64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009d6c:	d101      	bne.n	8009d72 <LL_RCC_IsRFUnderReset+0x1a>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <LL_RCC_IsRFUnderReset+0x1c>
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bc80      	pop	{r7}
 8009d7a:	4770      	bx	lr

08009d7c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8009d84:	4b06      	ldr	r3, [pc, #24]	@ (8009da0 <LL_EXTI_EnableIT_32_63+0x24>)
 8009d86:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8009d8a:	4905      	ldr	r1, [pc, #20]	@ (8009da0 <LL_EXTI_EnableIT_32_63+0x24>)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bc80      	pop	{r7}
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	58000800 	.word	0x58000800

08009da4 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d103      	bne.n	8009dba <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8009db2:	2301      	movs	r3, #1
 8009db4:	73fb      	strb	r3, [r7, #15]
    return status;
 8009db6:	7bfb      	ldrb	r3, [r7, #15]
 8009db8:	e052      	b.n	8009e60 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	799b      	ldrb	r3, [r3, #6]
 8009dc2:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8009dc4:	7bbb      	ldrb	r3, [r7, #14]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d002      	beq.n	8009dd0 <HAL_SUBGHZ_Init+0x2c>
 8009dca:	7bbb      	ldrb	r3, [r7, #14]
 8009dcc:	2b03      	cmp	r3, #3
 8009dce:	d109      	bne.n	8009de4 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7fa fa06 	bl	80041e8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8009ddc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8009de0:	f7ff ffcc 	bl	8009d7c <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d126      	bne.n	8009e38 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2202      	movs	r2, #2
 8009dee:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8009df0:	f7ff ffa2 	bl	8009d38 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8009df4:	4b1c      	ldr	r3, [pc, #112]	@ (8009e68 <HAL_SUBGHZ_Init+0xc4>)
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	1a9b      	subs	r3, r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	0cdb      	lsrs	r3, r3, #19
 8009e02:	2264      	movs	r2, #100	@ 0x64
 8009e04:	fb02 f303 	mul.w	r3, r2, r3
 8009e08:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d105      	bne.n	8009e1c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	609a      	str	r2, [r3, #8]
        break;
 8009e1a:	e007      	b.n	8009e2c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8009e22:	f7ff ff99 	bl	8009d58 <LL_RCC_IsRFUnderReset>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d1ee      	bne.n	8009e0a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009e2c:	f7ff ff34 	bl	8009c98 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8009e30:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009e34:	f7ff ff1c 	bl	8009c70 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8009e38:	f7ff ff4e 	bl	8009cd8 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d10a      	bne.n	8009e58 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f000 faac 	bl	800a3a4 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	719a      	strb	r2, [r3, #6]

  return status;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	20000014 	.word	0x20000014

08009e6c <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b086      	sub	sp, #24
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	461a      	mov	r2, r3
 8009e78:	460b      	mov	r3, r1
 8009e7a:	817b      	strh	r3, [r7, #10]
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	799b      	ldrb	r3, [r3, #6]
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d14a      	bne.n	8009f20 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	795b      	ldrb	r3, [r3, #5]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d101      	bne.n	8009e96 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8009e92:	2302      	movs	r3, #2
 8009e94:	e045      	b.n	8009f22 <HAL_SUBGHZ_WriteRegisters+0xb6>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f000 fb4c 	bl	800a540 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009ea8:	f7ff ff06 	bl	8009cb8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8009eac:	210d      	movs	r1, #13
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	f000 fa98 	bl	800a3e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009eb4:	897b      	ldrh	r3, [r7, #10]
 8009eb6:	0a1b      	lsrs	r3, r3, #8
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	68f8      	ldr	r0, [r7, #12]
 8009ec0:	f000 fa90 	bl	800a3e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009ec4:	897b      	ldrh	r3, [r7, #10]
 8009ec6:	b2db      	uxtb	r3, r3
 8009ec8:	4619      	mov	r1, r3
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f000 fa8a 	bl	800a3e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	82bb      	strh	r3, [r7, #20]
 8009ed4:	e00a      	b.n	8009eec <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8009ed6:	8abb      	ldrh	r3, [r7, #20]
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	4413      	add	r3, r2
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	68f8      	ldr	r0, [r7, #12]
 8009ee2:	f000 fa7f 	bl	800a3e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8009ee6:	8abb      	ldrh	r3, [r7, #20]
 8009ee8:	3301      	adds	r3, #1
 8009eea:	82bb      	strh	r3, [r7, #20]
 8009eec:	8aba      	ldrh	r2, [r7, #20]
 8009eee:	893b      	ldrh	r3, [r7, #8]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d3f0      	bcc.n	8009ed6 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009ef4:	f7ff fed0 	bl	8009c98 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009ef8:	68f8      	ldr	r0, [r7, #12]
 8009efa:	f000 fb45 	bl	800a588 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	75fb      	strb	r3, [r7, #23]
 8009f0a:	e001      	b.n	8009f10 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2201      	movs	r2, #1
 8009f14:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	715a      	strb	r2, [r3, #5]

    return status;
 8009f1c:	7dfb      	ldrb	r3, [r7, #23]
 8009f1e:	e000      	b.n	8009f22 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8009f20:	2302      	movs	r3, #2
  }
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3718      	adds	r7, #24
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b088      	sub	sp, #32
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	60f8      	str	r0, [r7, #12]
 8009f32:	607a      	str	r2, [r7, #4]
 8009f34:	461a      	mov	r2, r3
 8009f36:	460b      	mov	r3, r1
 8009f38:	817b      	strh	r3, [r7, #10]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	799b      	ldrb	r3, [r3, #6]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d14a      	bne.n	8009fe2 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	795b      	ldrb	r3, [r3, #5]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8009f54:	2302      	movs	r3, #2
 8009f56:	e045      	b.n	8009fe4 <HAL_SUBGHZ_ReadRegisters+0xba>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 faee 	bl	800a540 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8009f64:	f7ff fea8 	bl	8009cb8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8009f68:	211d      	movs	r1, #29
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 fa3a 	bl	800a3e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8009f70:	897b      	ldrh	r3, [r7, #10]
 8009f72:	0a1b      	lsrs	r3, r3, #8
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	4619      	mov	r1, r3
 8009f7a:	68f8      	ldr	r0, [r7, #12]
 8009f7c:	f000 fa32 	bl	800a3e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8009f80:	897b      	ldrh	r3, [r7, #10]
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	4619      	mov	r1, r3
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 fa2c 	bl	800a3e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f000 fa28 	bl	800a3e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8009f94:	2300      	movs	r3, #0
 8009f96:	82fb      	strh	r3, [r7, #22]
 8009f98:	e009      	b.n	8009fae <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8009f9a:	69b9      	ldr	r1, [r7, #24]
 8009f9c:	68f8      	ldr	r0, [r7, #12]
 8009f9e:	f000 fa77 	bl	800a490 <SUBGHZSPI_Receive>
      pData++;
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8009fa8:	8afb      	ldrh	r3, [r7, #22]
 8009faa:	3301      	adds	r3, #1
 8009fac:	82fb      	strh	r3, [r7, #22]
 8009fae:	8afa      	ldrh	r2, [r7, #22]
 8009fb0:	893b      	ldrh	r3, [r7, #8]
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d3f1      	bcc.n	8009f9a <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8009fb6:	f7ff fe6f 	bl	8009c98 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 fae4 	bl	800a588 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	77fb      	strb	r3, [r7, #31]
 8009fcc:	e001      	b.n	8009fd2 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	715a      	strb	r2, [r3, #5]

    return status;
 8009fde:	7ffb      	ldrb	r3, [r7, #31]
 8009fe0:	e000      	b.n	8009fe4 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8009fe2:	2302      	movs	r3, #2
  }
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3720      	adds	r7, #32
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b086      	sub	sp, #24
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	60f8      	str	r0, [r7, #12]
 8009ff4:	607a      	str	r2, [r7, #4]
 8009ff6:	461a      	mov	r2, r3
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	72fb      	strb	r3, [r7, #11]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	799b      	ldrb	r3, [r3, #6]
 800a004:	b2db      	uxtb	r3, r3
 800a006:	2b01      	cmp	r3, #1
 800a008:	d14a      	bne.n	800a0a0 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	795b      	ldrb	r3, [r3, #5]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a012:	2302      	movs	r3, #2
 800a014:	e045      	b.n	800a0a2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a01c:	68f8      	ldr	r0, [r7, #12]
 800a01e:	f000 fa8f 	bl	800a540 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a022:	7afb      	ldrb	r3, [r7, #11]
 800a024:	2b84      	cmp	r3, #132	@ 0x84
 800a026:	d002      	beq.n	800a02e <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a028:	7afb      	ldrb	r3, [r7, #11]
 800a02a:	2b94      	cmp	r3, #148	@ 0x94
 800a02c:	d103      	bne.n	800a036 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2201      	movs	r2, #1
 800a032:	711a      	strb	r2, [r3, #4]
 800a034:	e002      	b.n	800a03c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a03c:	f7ff fe3c 	bl	8009cb8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a040:	7afb      	ldrb	r3, [r7, #11]
 800a042:	4619      	mov	r1, r3
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 f9cd 	bl	800a3e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a04a:	2300      	movs	r3, #0
 800a04c:	82bb      	strh	r3, [r7, #20]
 800a04e:	e00a      	b.n	800a066 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a050:	8abb      	ldrh	r3, [r7, #20]
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	4413      	add	r3, r2
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	4619      	mov	r1, r3
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f000 f9c2 	bl	800a3e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a060:	8abb      	ldrh	r3, [r7, #20]
 800a062:	3301      	adds	r3, #1
 800a064:	82bb      	strh	r3, [r7, #20]
 800a066:	8aba      	ldrh	r2, [r7, #20]
 800a068:	893b      	ldrh	r3, [r7, #8]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d3f0      	bcc.n	800a050 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a06e:	f7ff fe13 	bl	8009c98 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a072:	7afb      	ldrb	r3, [r7, #11]
 800a074:	2b84      	cmp	r3, #132	@ 0x84
 800a076:	d002      	beq.n	800a07e <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a078:	68f8      	ldr	r0, [r7, #12]
 800a07a:	f000 fa85 	bl	800a588 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	75fb      	strb	r3, [r7, #23]
 800a08a:	e001      	b.n	800a090 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a08c:	2300      	movs	r3, #0
 800a08e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2201      	movs	r2, #1
 800a094:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2200      	movs	r2, #0
 800a09a:	715a      	strb	r2, [r3, #5]

    return status;
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	e000      	b.n	800a0a2 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a0a0:	2302      	movs	r3, #2
  }
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b088      	sub	sp, #32
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	460b      	mov	r3, r1
 800a0b8:	72fb      	strb	r3, [r7, #11]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	799b      	ldrb	r3, [r3, #6]
 800a0c6:	b2db      	uxtb	r3, r3
 800a0c8:	2b01      	cmp	r3, #1
 800a0ca:	d13d      	bne.n	800a148 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	795b      	ldrb	r3, [r3, #5]
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d101      	bne.n	800a0d8 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	e038      	b.n	800a14a <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a0de:	68f8      	ldr	r0, [r7, #12]
 800a0e0:	f000 fa2e 	bl	800a540 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a0e4:	f7ff fde8 	bl	8009cb8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a0e8:	7afb      	ldrb	r3, [r7, #11]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 f979 	bl	800a3e4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	68f8      	ldr	r0, [r7, #12]
 800a0f6:	f000 f975 	bl	800a3e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	82fb      	strh	r3, [r7, #22]
 800a0fe:	e009      	b.n	800a114 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a100:	69b9      	ldr	r1, [r7, #24]
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f000 f9c4 	bl	800a490 <SUBGHZSPI_Receive>
      pData++;
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	3301      	adds	r3, #1
 800a10c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a10e:	8afb      	ldrh	r3, [r7, #22]
 800a110:	3301      	adds	r3, #1
 800a112:	82fb      	strh	r3, [r7, #22]
 800a114:	8afa      	ldrh	r2, [r7, #22]
 800a116:	893b      	ldrh	r3, [r7, #8]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d3f1      	bcc.n	800a100 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a11c:	f7ff fdbc 	bl	8009c98 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 fa31 	bl	800a588 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	689b      	ldr	r3, [r3, #8]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	77fb      	strb	r3, [r7, #31]
 800a132:	e001      	b.n	800a138 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2201      	movs	r2, #1
 800a13c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	715a      	strb	r2, [r3, #5]

    return status;
 800a144:	7ffb      	ldrb	r3, [r7, #31]
 800a146:	e000      	b.n	800a14a <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a148:	2302      	movs	r3, #2
  }
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3720      	adds	r7, #32
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b086      	sub	sp, #24
 800a156:	af00      	add	r7, sp, #0
 800a158:	60f8      	str	r0, [r7, #12]
 800a15a:	607a      	str	r2, [r7, #4]
 800a15c:	461a      	mov	r2, r3
 800a15e:	460b      	mov	r3, r1
 800a160:	72fb      	strb	r3, [r7, #11]
 800a162:	4613      	mov	r3, r2
 800a164:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	799b      	ldrb	r3, [r3, #6]
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d13e      	bne.n	800a1ee <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	795b      	ldrb	r3, [r3, #5]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a178:	2302      	movs	r3, #2
 800a17a:	e039      	b.n	800a1f0 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2201      	movs	r2, #1
 800a180:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 f9dc 	bl	800a540 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a188:	f7ff fd96 	bl	8009cb8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a18c:	210e      	movs	r1, #14
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 f928 	bl	800a3e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a194:	7afb      	ldrb	r3, [r7, #11]
 800a196:	4619      	mov	r1, r3
 800a198:	68f8      	ldr	r0, [r7, #12]
 800a19a:	f000 f923 	bl	800a3e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a19e:	2300      	movs	r3, #0
 800a1a0:	82bb      	strh	r3, [r7, #20]
 800a1a2:	e00a      	b.n	800a1ba <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a1a4:	8abb      	ldrh	r3, [r7, #20]
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f000 f918 	bl	800a3e4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a1b4:	8abb      	ldrh	r3, [r7, #20]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	82bb      	strh	r3, [r7, #20]
 800a1ba:	8aba      	ldrh	r2, [r7, #20]
 800a1bc:	893b      	ldrh	r3, [r7, #8]
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d3f0      	bcc.n	800a1a4 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a1c2:	f7ff fd69 	bl	8009c98 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f000 f9de 	bl	800a588 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	689b      	ldr	r3, [r3, #8]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	75fb      	strb	r3, [r7, #23]
 800a1d8:	e001      	b.n	800a1de <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	715a      	strb	r2, [r3, #5]

    return status;
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	e000      	b.n	800a1f0 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a1ee:	2302      	movs	r3, #2
  }
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3718      	adds	r7, #24
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b088      	sub	sp, #32
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	607a      	str	r2, [r7, #4]
 800a202:	461a      	mov	r2, r3
 800a204:	460b      	mov	r3, r1
 800a206:	72fb      	strb	r3, [r7, #11]
 800a208:	4613      	mov	r3, r2
 800a20a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	799b      	ldrb	r3, [r3, #6]
 800a214:	b2db      	uxtb	r3, r3
 800a216:	2b01      	cmp	r3, #1
 800a218:	d141      	bne.n	800a29e <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	795b      	ldrb	r3, [r3, #5]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d101      	bne.n	800a226 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a222:	2302      	movs	r3, #2
 800a224:	e03c      	b.n	800a2a0 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2201      	movs	r2, #1
 800a22a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f000 f987 	bl	800a540 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a232:	f7ff fd41 	bl	8009cb8 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a236:	211e      	movs	r1, #30
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f000 f8d3 	bl	800a3e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	4619      	mov	r1, r3
 800a242:	68f8      	ldr	r0, [r7, #12]
 800a244:	f000 f8ce 	bl	800a3e4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a248:	2100      	movs	r1, #0
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f000 f8ca 	bl	800a3e4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a250:	2300      	movs	r3, #0
 800a252:	82fb      	strh	r3, [r7, #22]
 800a254:	e009      	b.n	800a26a <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a256:	69b9      	ldr	r1, [r7, #24]
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 f919 	bl	800a490 <SUBGHZSPI_Receive>
      pData++;
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	3301      	adds	r3, #1
 800a262:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a264:	8afb      	ldrh	r3, [r7, #22]
 800a266:	3301      	adds	r3, #1
 800a268:	82fb      	strh	r3, [r7, #22]
 800a26a:	8afa      	ldrh	r2, [r7, #22]
 800a26c:	893b      	ldrh	r3, [r7, #8]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d3f1      	bcc.n	800a256 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a272:	f7ff fd11 	bl	8009c98 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 f986 	bl	800a588 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	77fb      	strb	r3, [r7, #31]
 800a288:	e001      	b.n	800a28e <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a28a:	2300      	movs	r3, #0
 800a28c:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2201      	movs	r2, #1
 800a292:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2200      	movs	r2, #0
 800a298:	715a      	strb	r2, [r3, #5]

    return status;
 800a29a:	7ffb      	ldrb	r3, [r7, #31]
 800a29c:	e000      	b.n	800a2a0 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a29e:	2302      	movs	r3, #2
  }
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3720      	adds	r7, #32
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a2b4:	f107 020c 	add.w	r2, r7, #12
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	2112      	movs	r1, #18
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f7ff fef4 	bl	800a0aa <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a2c2:	7b3b      	ldrb	r3, [r7, #12]
 800a2c4:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a2c6:	89fb      	ldrh	r3, [r7, #14]
 800a2c8:	021b      	lsls	r3, r3, #8
 800a2ca:	b21a      	sxth	r2, r3
 800a2cc:	7b7b      	ldrb	r3, [r7, #13]
 800a2ce:	b21b      	sxth	r3, r3
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	b21b      	sxth	r3, r3
 800a2d4:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a2d6:	f107 020c 	add.w	r2, r7, #12
 800a2da:	2302      	movs	r3, #2
 800a2dc:	2102      	movs	r1, #2
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7ff fe84 	bl	8009fec <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a2e4:	89fb      	ldrh	r3, [r7, #14]
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d002      	beq.n	800a2f4 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f7fb fa24 	bl	800573c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a2f4:	89fb      	ldrh	r3, [r7, #14]
 800a2f6:	f003 0302 	and.w	r3, r3, #2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f7fb fa2a 	bl	8005758 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a304:	89fb      	ldrh	r3, [r7, #14]
 800a306:	f003 0304 	and.w	r3, r3, #4
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f7fb fa7a 	bl	8005808 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a314:	89fb      	ldrh	r3, [r7, #14]
 800a316:	f003 0308 	and.w	r3, r3, #8
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d002      	beq.n	800a324 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7fb fa80 	bl	8005824 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a324:	89fb      	ldrh	r3, [r7, #14]
 800a326:	f003 0310 	and.w	r3, r3, #16
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d002      	beq.n	800a334 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f7fb fa86 	bl	8005840 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a334:	89fb      	ldrh	r3, [r7, #14]
 800a336:	f003 0320 	and.w	r3, r3, #32
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d002      	beq.n	800a344 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7fb fa54 	bl	80057ec <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a344:	89fb      	ldrh	r3, [r7, #14]
 800a346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d002      	beq.n	800a354 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7fb fa10 	bl	8005774 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a354:	89fb      	ldrh	r3, [r7, #14]
 800a356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00d      	beq.n	800a37a <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a35e:	89fb      	ldrh	r3, [r7, #14]
 800a360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a364:	2b00      	cmp	r3, #0
 800a366:	d004      	beq.n	800a372 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a368:	2101      	movs	r1, #1
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f7fb fa10 	bl	8005790 <HAL_SUBGHZ_CADStatusCallback>
 800a370:	e003      	b.n	800a37a <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a372:	2100      	movs	r1, #0
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7fb fa0b 	bl	8005790 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a37a:	89fb      	ldrh	r3, [r7, #14]
 800a37c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a380:	2b00      	cmp	r3, #0
 800a382:	d002      	beq.n	800a38a <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a384:	6878      	ldr	r0, [r7, #4]
 800a386:	f7fb fa21 	bl	80057cc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a38a:	89fb      	ldrh	r3, [r7, #14]
 800a38c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d002      	beq.n	800a39a <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7fb fa61 	bl	800585c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a39a:	bf00      	nop
 800a39c:	3710      	adds	r7, #16
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	bd80      	pop	{r7, pc}
	...

0800a3a4 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a3e0 <SUBGHZSPI_Init+0x3c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a0b      	ldr	r2, [pc, #44]	@ (800a3e0 <SUBGHZSPI_Init+0x3c>)
 800a3b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3b6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800a3b8:	4a09      	ldr	r2, [pc, #36]	@ (800a3e0 <SUBGHZSPI_Init+0x3c>)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 800a3c0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800a3c2:	4b07      	ldr	r3, [pc, #28]	@ (800a3e0 <SUBGHZSPI_Init+0x3c>)
 800a3c4:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 800a3c8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800a3ca:	4b05      	ldr	r3, [pc, #20]	@ (800a3e0 <SUBGHZSPI_Init+0x3c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a04      	ldr	r2, [pc, #16]	@ (800a3e0 <SUBGHZSPI_Init+0x3c>)
 800a3d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3d4:	6013      	str	r3, [r2, #0]
}
 800a3d6:	bf00      	nop
 800a3d8:	370c      	adds	r7, #12
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bc80      	pop	{r7}
 800a3de:	4770      	bx	lr
 800a3e0:	58010000 	.word	0x58010000

0800a3e4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b087      	sub	sp, #28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a3f4:	4b23      	ldr	r3, [pc, #140]	@ (800a484 <SUBGHZSPI_Transmit+0xa0>)
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	00db      	lsls	r3, r3, #3
 800a3fc:	1a9b      	subs	r3, r3, r2
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	0cdb      	lsrs	r3, r3, #19
 800a402:	2264      	movs	r2, #100	@ 0x64
 800a404:	fb02 f303 	mul.w	r3, r2, r3
 800a408:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d105      	bne.n	800a41c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2201      	movs	r2, #1
 800a418:	609a      	str	r2, [r3, #8]
      break;
 800a41a:	e008      	b.n	800a42e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	3b01      	subs	r3, #1
 800a420:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a422:	4b19      	ldr	r3, [pc, #100]	@ (800a488 <SUBGHZSPI_Transmit+0xa4>)
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f003 0302 	and.w	r3, r3, #2
 800a42a:	2b02      	cmp	r3, #2
 800a42c:	d1ed      	bne.n	800a40a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a42e:	4b17      	ldr	r3, [pc, #92]	@ (800a48c <SUBGHZSPI_Transmit+0xa8>)
 800a430:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	78fa      	ldrb	r2, [r7, #3]
 800a436:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a438:	4b12      	ldr	r3, [pc, #72]	@ (800a484 <SUBGHZSPI_Transmit+0xa0>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	4613      	mov	r3, r2
 800a43e:	00db      	lsls	r3, r3, #3
 800a440:	1a9b      	subs	r3, r3, r2
 800a442:	009b      	lsls	r3, r3, #2
 800a444:	0cdb      	lsrs	r3, r3, #19
 800a446:	2264      	movs	r2, #100	@ 0x64
 800a448:	fb02 f303 	mul.w	r3, r2, r3
 800a44c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d105      	bne.n	800a460 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2201      	movs	r2, #1
 800a45c:	609a      	str	r2, [r3, #8]
      break;
 800a45e:	e008      	b.n	800a472 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3b01      	subs	r3, #1
 800a464:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a466:	4b08      	ldr	r3, [pc, #32]	@ (800a488 <SUBGHZSPI_Transmit+0xa4>)
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f003 0301 	and.w	r3, r3, #1
 800a46e:	2b01      	cmp	r3, #1
 800a470:	d1ed      	bne.n	800a44e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800a472:	4b05      	ldr	r3, [pc, #20]	@ (800a488 <SUBGHZSPI_Transmit+0xa4>)
 800a474:	68db      	ldr	r3, [r3, #12]

  return status;
 800a476:	7dfb      	ldrb	r3, [r7, #23]
}
 800a478:	4618      	mov	r0, r3
 800a47a:	371c      	adds	r7, #28
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bc80      	pop	{r7}
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	20000014 	.word	0x20000014
 800a488:	58010000 	.word	0x58010000
 800a48c:	5801000c 	.word	0x5801000c

0800a490 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a49a:	2300      	movs	r3, #0
 800a49c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a49e:	4b25      	ldr	r3, [pc, #148]	@ (800a534 <SUBGHZSPI_Receive+0xa4>)
 800a4a0:	681a      	ldr	r2, [r3, #0]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	00db      	lsls	r3, r3, #3
 800a4a6:	1a9b      	subs	r3, r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	0cdb      	lsrs	r3, r3, #19
 800a4ac:	2264      	movs	r2, #100	@ 0x64
 800a4ae:	fb02 f303 	mul.w	r3, r2, r3
 800a4b2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d105      	bne.n	800a4c6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	609a      	str	r2, [r3, #8]
      break;
 800a4c4:	e008      	b.n	800a4d8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	3b01      	subs	r3, #1
 800a4ca:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800a4cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a538 <SUBGHZSPI_Receive+0xa8>)
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f003 0302 	and.w	r3, r3, #2
 800a4d4:	2b02      	cmp	r3, #2
 800a4d6:	d1ed      	bne.n	800a4b4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800a4d8:	4b18      	ldr	r3, [pc, #96]	@ (800a53c <SUBGHZSPI_Receive+0xac>)
 800a4da:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	22ff      	movs	r2, #255	@ 0xff
 800a4e0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a4e2:	4b14      	ldr	r3, [pc, #80]	@ (800a534 <SUBGHZSPI_Receive+0xa4>)
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	4613      	mov	r3, r2
 800a4e8:	00db      	lsls	r3, r3, #3
 800a4ea:	1a9b      	subs	r3, r3, r2
 800a4ec:	009b      	lsls	r3, r3, #2
 800a4ee:	0cdb      	lsrs	r3, r3, #19
 800a4f0:	2264      	movs	r2, #100	@ 0x64
 800a4f2:	fb02 f303 	mul.w	r3, r2, r3
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d105      	bne.n	800a50a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2201      	movs	r2, #1
 800a506:	609a      	str	r2, [r3, #8]
      break;
 800a508:	e008      	b.n	800a51c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3b01      	subs	r3, #1
 800a50e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800a510:	4b09      	ldr	r3, [pc, #36]	@ (800a538 <SUBGHZSPI_Receive+0xa8>)
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d1ed      	bne.n	800a4f8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800a51c:	4b06      	ldr	r3, [pc, #24]	@ (800a538 <SUBGHZSPI_Receive+0xa8>)
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	b2da      	uxtb	r2, r3
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	701a      	strb	r2, [r3, #0]

  return status;
 800a526:	7dfb      	ldrb	r3, [r7, #23]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	371c      	adds	r7, #28
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bc80      	pop	{r7}
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	20000014 	.word	0x20000014
 800a538:	58010000 	.word	0x58010000
 800a53c:	5801000c 	.word	0x5801000c

0800a540 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	791b      	ldrb	r3, [r3, #4]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d111      	bne.n	800a574 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800a550:	4b0c      	ldr	r3, [pc, #48]	@ (800a584 <SUBGHZ_CheckDeviceReady+0x44>)
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	4613      	mov	r3, r2
 800a556:	005b      	lsls	r3, r3, #1
 800a558:	4413      	add	r3, r2
 800a55a:	00db      	lsls	r3, r3, #3
 800a55c:	0c1b      	lsrs	r3, r3, #16
 800a55e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a560:	f7ff fbaa 	bl	8009cb8 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	3b01      	subs	r3, #1
 800a568:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1f9      	bne.n	800a564 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a570:	f7ff fb92 	bl	8009c98 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f807 	bl	800a588 <SUBGHZ_WaitOnBusy>
 800a57a:	4603      	mov	r3, r0
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3710      	adds	r7, #16
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}
 800a584:	20000014 	.word	0x20000014

0800a588 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800a594:	4b12      	ldr	r3, [pc, #72]	@ (800a5e0 <SUBGHZ_WaitOnBusy+0x58>)
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	4613      	mov	r3, r2
 800a59a:	005b      	lsls	r3, r3, #1
 800a59c:	4413      	add	r3, r2
 800a59e:	00db      	lsls	r3, r3, #3
 800a5a0:	0d1b      	lsrs	r3, r3, #20
 800a5a2:	2264      	movs	r2, #100	@ 0x64
 800a5a4:	fb02 f303 	mul.w	r3, r2, r3
 800a5a8:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800a5aa:	f7ff fbb3 	bl	8009d14 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800a5ae:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d105      	bne.n	800a5c2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2202      	movs	r2, #2
 800a5be:	609a      	str	r2, [r3, #8]
      break;
 800a5c0:	e009      	b.n	800a5d6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800a5c8:	f7ff fb92 	bl	8009cf0 <LL_PWR_IsActiveFlag_RFBUSYS>
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d0e9      	beq.n	800a5aa <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}
 800a5e0:	20000014 	.word	0x20000014

0800a5e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e049      	b.n	800a68a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d106      	bne.n	800a610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7f9 ff2c 	bl	8004468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2202      	movs	r2, #2
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	3304      	adds	r3, #4
 800a620:	4619      	mov	r1, r3
 800a622:	4610      	mov	r0, r2
 800a624:	f000 f944 	bl	800a8b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2201      	movs	r2, #1
 800a64c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2201      	movs	r2, #1
 800a674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3708      	adds	r7, #8
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
	...

0800a694 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a694:	b480      	push	{r7}
 800a696:	b085      	sub	sp, #20
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d001      	beq.n	800a6ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e02e      	b.n	800a70a <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a16      	ldr	r2, [pc, #88]	@ (800a714 <HAL_TIM_Base_Start+0x80>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d004      	beq.n	800a6c8 <HAL_TIM_Base_Start+0x34>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6c6:	d115      	bne.n	800a6f4 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689a      	ldr	r2, [r3, #8]
 800a6ce:	4b12      	ldr	r3, [pc, #72]	@ (800a718 <HAL_TIM_Base_Start+0x84>)
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b06      	cmp	r3, #6
 800a6d8:	d015      	beq.n	800a706 <HAL_TIM_Base_Start+0x72>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6e0:	d011      	beq.n	800a706 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f042 0201 	orr.w	r2, r2, #1
 800a6f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6f2:	e008      	b.n	800a706 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f042 0201 	orr.w	r2, r2, #1
 800a702:	601a      	str	r2, [r3, #0]
 800a704:	e000      	b.n	800a708 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a706:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3714      	adds	r7, #20
 800a70e:	46bd      	mov	sp, r7
 800a710:	bc80      	pop	{r7}
 800a712:	4770      	bx	lr
 800a714:	40012c00 	.word	0x40012c00
 800a718:	00010007 	.word	0x00010007

0800a71c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a726:	2300      	movs	r3, #0
 800a728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a730:	2b01      	cmp	r3, #1
 800a732:	d101      	bne.n	800a738 <HAL_TIM_ConfigClockSource+0x1c>
 800a734:	2302      	movs	r3, #2
 800a736:	e0b6      	b.n	800a8a6 <HAL_TIM_ConfigClockSource+0x18a>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2202      	movs	r2, #2
 800a744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a756:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a75a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a762:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	68ba      	ldr	r2, [r7, #8]
 800a76a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a774:	d03e      	beq.n	800a7f4 <HAL_TIM_ConfigClockSource+0xd8>
 800a776:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a77a:	f200 8087 	bhi.w	800a88c <HAL_TIM_ConfigClockSource+0x170>
 800a77e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a782:	f000 8086 	beq.w	800a892 <HAL_TIM_ConfigClockSource+0x176>
 800a786:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a78a:	d87f      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x170>
 800a78c:	2b70      	cmp	r3, #112	@ 0x70
 800a78e:	d01a      	beq.n	800a7c6 <HAL_TIM_ConfigClockSource+0xaa>
 800a790:	2b70      	cmp	r3, #112	@ 0x70
 800a792:	d87b      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x170>
 800a794:	2b60      	cmp	r3, #96	@ 0x60
 800a796:	d050      	beq.n	800a83a <HAL_TIM_ConfigClockSource+0x11e>
 800a798:	2b60      	cmp	r3, #96	@ 0x60
 800a79a:	d877      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x170>
 800a79c:	2b50      	cmp	r3, #80	@ 0x50
 800a79e:	d03c      	beq.n	800a81a <HAL_TIM_ConfigClockSource+0xfe>
 800a7a0:	2b50      	cmp	r3, #80	@ 0x50
 800a7a2:	d873      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x170>
 800a7a4:	2b40      	cmp	r3, #64	@ 0x40
 800a7a6:	d058      	beq.n	800a85a <HAL_TIM_ConfigClockSource+0x13e>
 800a7a8:	2b40      	cmp	r3, #64	@ 0x40
 800a7aa:	d86f      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x170>
 800a7ac:	2b30      	cmp	r3, #48	@ 0x30
 800a7ae:	d064      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x15e>
 800a7b0:	2b30      	cmp	r3, #48	@ 0x30
 800a7b2:	d86b      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x170>
 800a7b4:	2b20      	cmp	r3, #32
 800a7b6:	d060      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x15e>
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d867      	bhi.n	800a88c <HAL_TIM_ConfigClockSource+0x170>
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d05c      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x15e>
 800a7c0:	2b10      	cmp	r3, #16
 800a7c2:	d05a      	beq.n	800a87a <HAL_TIM_ConfigClockSource+0x15e>
 800a7c4:	e062      	b.n	800a88c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7d6:	f000 f946 	bl	800aa66 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a7e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68ba      	ldr	r2, [r7, #8]
 800a7f0:	609a      	str	r2, [r3, #8]
      break;
 800a7f2:	e04f      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a804:	f000 f92f 	bl	800aa66 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	689a      	ldr	r2, [r3, #8]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a816:	609a      	str	r2, [r3, #8]
      break;
 800a818:	e03c      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a826:	461a      	mov	r2, r3
 800a828:	f000 f8a4 	bl	800a974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	2150      	movs	r1, #80	@ 0x50
 800a832:	4618      	mov	r0, r3
 800a834:	f000 f8fb 	bl	800aa2e <TIM_ITRx_SetConfig>
      break;
 800a838:	e02c      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a846:	461a      	mov	r2, r3
 800a848:	f000 f8c2 	bl	800a9d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	2160      	movs	r1, #96	@ 0x60
 800a852:	4618      	mov	r0, r3
 800a854:	f000 f8eb 	bl	800aa2e <TIM_ITRx_SetConfig>
      break;
 800a858:	e01c      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a866:	461a      	mov	r2, r3
 800a868:	f000 f884 	bl	800a974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	2140      	movs	r1, #64	@ 0x40
 800a872:	4618      	mov	r0, r3
 800a874:	f000 f8db 	bl	800aa2e <TIM_ITRx_SetConfig>
      break;
 800a878:	e00c      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4619      	mov	r1, r3
 800a884:	4610      	mov	r0, r2
 800a886:	f000 f8d2 	bl	800aa2e <TIM_ITRx_SetConfig>
      break;
 800a88a:	e003      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a88c:	2301      	movs	r3, #1
 800a88e:	73fb      	strb	r3, [r7, #15]
      break;
 800a890:	e000      	b.n	800a894 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a892:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2201      	movs	r2, #1
 800a898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
	...

0800a8b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a29      	ldr	r2, [pc, #164]	@ (800a968 <TIM_Base_SetConfig+0xb8>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d003      	beq.n	800a8d0 <TIM_Base_SetConfig+0x20>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8ce:	d108      	bne.n	800a8e2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	4a20      	ldr	r2, [pc, #128]	@ (800a968 <TIM_Base_SetConfig+0xb8>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d00b      	beq.n	800a902 <TIM_Base_SetConfig+0x52>
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8f0:	d007      	beq.n	800a902 <TIM_Base_SetConfig+0x52>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a1d      	ldr	r2, [pc, #116]	@ (800a96c <TIM_Base_SetConfig+0xbc>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d003      	beq.n	800a902 <TIM_Base_SetConfig+0x52>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	4a1c      	ldr	r2, [pc, #112]	@ (800a970 <TIM_Base_SetConfig+0xc0>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d108      	bne.n	800a914 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	68db      	ldr	r3, [r3, #12]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	695b      	ldr	r3, [r3, #20]
 800a91e:	4313      	orrs	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	689a      	ldr	r2, [r3, #8]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a0b      	ldr	r2, [pc, #44]	@ (800a968 <TIM_Base_SetConfig+0xb8>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d007      	beq.n	800a950 <TIM_Base_SetConfig+0xa0>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a0a      	ldr	r2, [pc, #40]	@ (800a96c <TIM_Base_SetConfig+0xbc>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d003      	beq.n	800a950 <TIM_Base_SetConfig+0xa0>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a09      	ldr	r2, [pc, #36]	@ (800a970 <TIM_Base_SetConfig+0xc0>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d103      	bne.n	800a958 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	691a      	ldr	r2, [r3, #16]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	615a      	str	r2, [r3, #20]
}
 800a95e:	bf00      	nop
 800a960:	3714      	adds	r7, #20
 800a962:	46bd      	mov	sp, r7
 800a964:	bc80      	pop	{r7}
 800a966:	4770      	bx	lr
 800a968:	40012c00 	.word	0x40012c00
 800a96c:	40014400 	.word	0x40014400
 800a970:	40014800 	.word	0x40014800

0800a974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a974:	b480      	push	{r7}
 800a976:	b087      	sub	sp, #28
 800a978:	af00      	add	r7, sp, #0
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	f023 0201 	bic.w	r2, r3, #1
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a99e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	011b      	lsls	r3, r3, #4
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	f023 030a 	bic.w	r3, r3, #10
 800a9b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	693a      	ldr	r2, [r7, #16]
 800a9be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	697a      	ldr	r2, [r7, #20]
 800a9c4:	621a      	str	r2, [r3, #32]
}
 800a9c6:	bf00      	nop
 800a9c8:	371c      	adds	r7, #28
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bc80      	pop	{r7}
 800a9ce:	4770      	bx	lr

0800a9d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b087      	sub	sp, #28
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	f023 0210 	bic.w	r2, r3, #16
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6a1b      	ldr	r3, [r3, #32]
 800a9f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a9fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	031b      	lsls	r3, r3, #12
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aa0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	011b      	lsls	r3, r3, #4
 800aa12:	693a      	ldr	r2, [r7, #16]
 800aa14:	4313      	orrs	r3, r2
 800aa16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	697a      	ldr	r2, [r7, #20]
 800aa1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	693a      	ldr	r2, [r7, #16]
 800aa22:	621a      	str	r2, [r3, #32]
}
 800aa24:	bf00      	nop
 800aa26:	371c      	adds	r7, #28
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bc80      	pop	{r7}
 800aa2c:	4770      	bx	lr

0800aa2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b085      	sub	sp, #20
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aa44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa4a:	683a      	ldr	r2, [r7, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	f043 0307 	orr.w	r3, r3, #7
 800aa54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	68fa      	ldr	r2, [r7, #12]
 800aa5a:	609a      	str	r2, [r3, #8]
}
 800aa5c:	bf00      	nop
 800aa5e:	3714      	adds	r7, #20
 800aa60:	46bd      	mov	sp, r7
 800aa62:	bc80      	pop	{r7}
 800aa64:	4770      	bx	lr

0800aa66 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b087      	sub	sp, #28
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	607a      	str	r2, [r7, #4]
 800aa72:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aa80:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	021a      	lsls	r2, r3, #8
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	431a      	orrs	r2, r3
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	697a      	ldr	r2, [r7, #20]
 800aa90:	4313      	orrs	r3, r2
 800aa92:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	609a      	str	r2, [r3, #8]
}
 800aa9a:	bf00      	nop
 800aa9c:	371c      	adds	r7, #28
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bc80      	pop	{r7}
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b085      	sub	sp, #20
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
 800aaac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d101      	bne.n	800aabc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aab8:	2302      	movs	r3, #2
 800aaba:	e04a      	b.n	800ab52 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2202      	movs	r2, #2
 800aac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a1e      	ldr	r2, [pc, #120]	@ (800ab5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d108      	bne.n	800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aaec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aaee:	683b      	ldr	r3, [r7, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	68fa      	ldr	r2, [r7, #12]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aafe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a11      	ldr	r2, [pc, #68]	@ (800ab5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d004      	beq.n	800ab26 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab24:	d10c      	bne.n	800ab40 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	68ba      	ldr	r2, [r7, #8]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68ba      	ldr	r2, [r7, #8]
 800ab3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3714      	adds	r7, #20
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bc80      	pop	{r7}
 800ab5a:	4770      	bx	lr
 800ab5c:	40012c00 	.word	0x40012c00

0800ab60 <LL_RCC_GetUSARTClockSource>:
{
 800ab60:	b480      	push	{r7}
 800ab62:	b083      	sub	sp, #12
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800ab68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab6c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	401a      	ands	r2, r3
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	041b      	lsls	r3, r3, #16
 800ab78:	4313      	orrs	r3, r2
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bc80      	pop	{r7}
 800ab82:	4770      	bx	lr

0800ab84 <LL_RCC_GetLPUARTClockSource>:
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ab8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab90:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4013      	ands	r3, r2
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bc80      	pop	{r7}
 800aba0:	4770      	bx	lr

0800aba2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aba2:	b580      	push	{r7, lr}
 800aba4:	b082      	sub	sp, #8
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d101      	bne.n	800abb4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abb0:	2301      	movs	r3, #1
 800abb2:	e042      	b.n	800ac3a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d106      	bne.n	800abcc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7f9 fcec 	bl	80045a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2224      	movs	r2, #36	@ 0x24
 800abd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f022 0201 	bic.w	r2, r2, #1
 800abe2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 f8f1 	bl	800adcc <UART_SetConfig>
 800abea:	4603      	mov	r3, r0
 800abec:	2b01      	cmp	r3, #1
 800abee:	d101      	bne.n	800abf4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e022      	b.n	800ac3a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fb59 	bl	800b2b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	685a      	ldr	r2, [r3, #4]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ac10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	689a      	ldr	r2, [r3, #8]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ac20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	681a      	ldr	r2, [r3, #0]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f042 0201 	orr.w	r2, r2, #1
 800ac30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fbdf 	bl	800b3f6 <UART_CheckIdleState>
 800ac38:	4603      	mov	r3, r0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3708      	adds	r7, #8
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b082      	sub	sp, #8
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d101      	bne.n	800ac54 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800ac50:	2301      	movs	r3, #1
 800ac52:	e031      	b.n	800acb8 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2224      	movs	r2, #36	@ 0x24
 800ac58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f022 0201 	bic.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2200      	movs	r2, #0
 800ac72:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	2200      	movs	r2, #0
 800ac82:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f7f9 fcd3 	bl	8004630 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	3708      	adds	r7, #8
 800acbc:	46bd      	mov	sp, r7
 800acbe:	bd80      	pop	{r7, pc}

0800acc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b08a      	sub	sp, #40	@ 0x28
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	60b9      	str	r1, [r7, #8]
 800acca:	603b      	str	r3, [r7, #0]
 800accc:	4613      	mov	r3, r2
 800acce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800acd6:	2b20      	cmp	r3, #32
 800acd8:	d173      	bne.n	800adc2 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <HAL_UART_Transmit+0x26>
 800ace0:	88fb      	ldrh	r3, [r7, #6]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e06c      	b.n	800adc4 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	2221      	movs	r2, #33	@ 0x21
 800acf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acfa:	f7fa fe4d 	bl	8005998 <HAL_GetTick>
 800acfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	88fa      	ldrh	r2, [r7, #6]
 800ad04:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	88fa      	ldrh	r2, [r7, #6]
 800ad0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad18:	d108      	bne.n	800ad2c <HAL_UART_Transmit+0x6c>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d104      	bne.n	800ad2c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	61bb      	str	r3, [r7, #24]
 800ad2a:	e003      	b.n	800ad34 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad30:	2300      	movs	r3, #0
 800ad32:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad34:	e02c      	b.n	800ad90 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	9300      	str	r3, [sp, #0]
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	2180      	movs	r1, #128	@ 0x80
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f000 fba6 	bl	800b492 <UART_WaitOnFlagUntilTimeout>
 800ad46:	4603      	mov	r3, r0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d001      	beq.n	800ad50 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e039      	b.n	800adc4 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d10b      	bne.n	800ad6e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	881b      	ldrh	r3, [r3, #0]
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	3302      	adds	r3, #2
 800ad6a:	61bb      	str	r3, [r7, #24]
 800ad6c:	e007      	b.n	800ad7e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad6e:	69fb      	ldr	r3, [r7, #28]
 800ad70:	781a      	ldrb	r2, [r3, #0]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ad78:	69fb      	ldr	r3, [r7, #28]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	3b01      	subs	r3, #1
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1cc      	bne.n	800ad36 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	9300      	str	r3, [sp, #0]
 800ada0:	697b      	ldr	r3, [r7, #20]
 800ada2:	2200      	movs	r2, #0
 800ada4:	2140      	movs	r1, #64	@ 0x40
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 fb73 	bl	800b492 <UART_WaitOnFlagUntilTimeout>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d001      	beq.n	800adb6 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 800adb2:	2303      	movs	r3, #3
 800adb4:	e006      	b.n	800adc4 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2220      	movs	r2, #32
 800adba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800adbe:	2300      	movs	r3, #0
 800adc0:	e000      	b.n	800adc4 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800adc2:	2302      	movs	r3, #2
  }
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3720      	adds	r7, #32
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800adcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800add0:	b08c      	sub	sp, #48	@ 0x30
 800add2:	af00      	add	r7, sp, #0
 800add4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800add6:	2300      	movs	r3, #0
 800add8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	689a      	ldr	r2, [r3, #8]
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	431a      	orrs	r2, r3
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	695b      	ldr	r3, [r3, #20]
 800adea:	431a      	orrs	r2, r3
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	69db      	ldr	r3, [r3, #28]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	681a      	ldr	r2, [r3, #0]
 800adfa:	4b94      	ldr	r3, [pc, #592]	@ (800b04c <UART_SetConfig+0x280>)
 800adfc:	4013      	ands	r3, r2
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	6812      	ldr	r2, [r2, #0]
 800ae02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae04:	430b      	orrs	r3, r1
 800ae06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ae12:	697b      	ldr	r3, [r7, #20]
 800ae14:	68da      	ldr	r2, [r3, #12]
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	430a      	orrs	r2, r1
 800ae1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a89      	ldr	r2, [pc, #548]	@ (800b050 <UART_SetConfig+0x284>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d004      	beq.n	800ae38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	6a1b      	ldr	r3, [r3, #32]
 800ae32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae34:	4313      	orrs	r3, r2
 800ae36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ae42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	6812      	ldr	r2, [r2, #0]
 800ae4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae4c:	430b      	orrs	r3, r1
 800ae4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae56:	f023 010f 	bic.w	r1, r3, #15
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	430a      	orrs	r2, r1
 800ae64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a7a      	ldr	r2, [pc, #488]	@ (800b054 <UART_SetConfig+0x288>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d127      	bne.n	800aec0 <UART_SetConfig+0xf4>
 800ae70:	2003      	movs	r0, #3
 800ae72:	f7ff fe75 	bl	800ab60 <LL_RCC_GetUSARTClockSource>
 800ae76:	4603      	mov	r3, r0
 800ae78:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d81b      	bhi.n	800aeb8 <UART_SetConfig+0xec>
 800ae80:	a201      	add	r2, pc, #4	@ (adr r2, 800ae88 <UART_SetConfig+0xbc>)
 800ae82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae86:	bf00      	nop
 800ae88:	0800ae99 	.word	0x0800ae99
 800ae8c:	0800aea9 	.word	0x0800aea9
 800ae90:	0800aea1 	.word	0x0800aea1
 800ae94:	0800aeb1 	.word	0x0800aeb1
 800ae98:	2301      	movs	r3, #1
 800ae9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ae9e:	e080      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800aea0:	2302      	movs	r3, #2
 800aea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aea6:	e07c      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800aea8:	2304      	movs	r3, #4
 800aeaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeae:	e078      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800aeb0:	2308      	movs	r3, #8
 800aeb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aeb6:	e074      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800aeb8:	2310      	movs	r3, #16
 800aeba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aebe:	e070      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a64      	ldr	r2, [pc, #400]	@ (800b058 <UART_SetConfig+0x28c>)
 800aec6:	4293      	cmp	r3, r2
 800aec8:	d138      	bne.n	800af3c <UART_SetConfig+0x170>
 800aeca:	200c      	movs	r0, #12
 800aecc:	f7ff fe48 	bl	800ab60 <LL_RCC_GetUSARTClockSource>
 800aed0:	4603      	mov	r3, r0
 800aed2:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 800aed6:	2b0c      	cmp	r3, #12
 800aed8:	d82c      	bhi.n	800af34 <UART_SetConfig+0x168>
 800aeda:	a201      	add	r2, pc, #4	@ (adr r2, 800aee0 <UART_SetConfig+0x114>)
 800aedc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee0:	0800af15 	.word	0x0800af15
 800aee4:	0800af35 	.word	0x0800af35
 800aee8:	0800af35 	.word	0x0800af35
 800aeec:	0800af35 	.word	0x0800af35
 800aef0:	0800af25 	.word	0x0800af25
 800aef4:	0800af35 	.word	0x0800af35
 800aef8:	0800af35 	.word	0x0800af35
 800aefc:	0800af35 	.word	0x0800af35
 800af00:	0800af1d 	.word	0x0800af1d
 800af04:	0800af35 	.word	0x0800af35
 800af08:	0800af35 	.word	0x0800af35
 800af0c:	0800af35 	.word	0x0800af35
 800af10:	0800af2d 	.word	0x0800af2d
 800af14:	2300      	movs	r3, #0
 800af16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af1a:	e042      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800af1c:	2302      	movs	r3, #2
 800af1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af22:	e03e      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800af24:	2304      	movs	r3, #4
 800af26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af2a:	e03a      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800af2c:	2308      	movs	r3, #8
 800af2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af32:	e036      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800af34:	2310      	movs	r3, #16
 800af36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af3a:	e032      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a43      	ldr	r2, [pc, #268]	@ (800b050 <UART_SetConfig+0x284>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d12a      	bne.n	800af9c <UART_SetConfig+0x1d0>
 800af46:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800af4a:	f7ff fe1b 	bl	800ab84 <LL_RCC_GetLPUARTClockSource>
 800af4e:	4603      	mov	r3, r0
 800af50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af54:	d01a      	beq.n	800af8c <UART_SetConfig+0x1c0>
 800af56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af5a:	d81b      	bhi.n	800af94 <UART_SetConfig+0x1c8>
 800af5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af60:	d00c      	beq.n	800af7c <UART_SetConfig+0x1b0>
 800af62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800af66:	d815      	bhi.n	800af94 <UART_SetConfig+0x1c8>
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <UART_SetConfig+0x1a8>
 800af6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800af70:	d008      	beq.n	800af84 <UART_SetConfig+0x1b8>
 800af72:	e00f      	b.n	800af94 <UART_SetConfig+0x1c8>
 800af74:	2300      	movs	r3, #0
 800af76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af7a:	e012      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800af7c:	2302      	movs	r3, #2
 800af7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af82:	e00e      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800af84:	2304      	movs	r3, #4
 800af86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af8a:	e00a      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800af8c:	2308      	movs	r3, #8
 800af8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af92:	e006      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800af94:	2310      	movs	r3, #16
 800af96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800af9a:	e002      	b.n	800afa2 <UART_SetConfig+0x1d6>
 800af9c:	2310      	movs	r3, #16
 800af9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a2a      	ldr	r2, [pc, #168]	@ (800b050 <UART_SetConfig+0x284>)
 800afa8:	4293      	cmp	r3, r2
 800afaa:	f040 80a4 	bne.w	800b0f6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800afae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800afb2:	2b08      	cmp	r3, #8
 800afb4:	d823      	bhi.n	800affe <UART_SetConfig+0x232>
 800afb6:	a201      	add	r2, pc, #4	@ (adr r2, 800afbc <UART_SetConfig+0x1f0>)
 800afb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afbc:	0800afe1 	.word	0x0800afe1
 800afc0:	0800afff 	.word	0x0800afff
 800afc4:	0800afe9 	.word	0x0800afe9
 800afc8:	0800afff 	.word	0x0800afff
 800afcc:	0800afef 	.word	0x0800afef
 800afd0:	0800afff 	.word	0x0800afff
 800afd4:	0800afff 	.word	0x0800afff
 800afd8:	0800afff 	.word	0x0800afff
 800afdc:	0800aff7 	.word	0x0800aff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800afe0:	f7fe f96e 	bl	80092c0 <HAL_RCC_GetPCLK1Freq>
 800afe4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800afe6:	e010      	b.n	800b00a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800afe8:	4b1c      	ldr	r3, [pc, #112]	@ (800b05c <UART_SetConfig+0x290>)
 800afea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800afec:	e00d      	b.n	800b00a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800afee:	f7fe f8b3 	bl	8009158 <HAL_RCC_GetSysClockFreq>
 800aff2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800aff4:	e009      	b.n	800b00a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aff6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800affa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800affc:	e005      	b.n	800b00a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800affe:	2300      	movs	r3, #0
 800b000:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b008:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 8137 	beq.w	800b280 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b016:	4a12      	ldr	r2, [pc, #72]	@ (800b060 <UART_SetConfig+0x294>)
 800b018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b01c:	461a      	mov	r2, r3
 800b01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b020:	fbb3 f3f2 	udiv	r3, r3, r2
 800b024:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	685a      	ldr	r2, [r3, #4]
 800b02a:	4613      	mov	r3, r2
 800b02c:	005b      	lsls	r3, r3, #1
 800b02e:	4413      	add	r3, r2
 800b030:	69ba      	ldr	r2, [r7, #24]
 800b032:	429a      	cmp	r2, r3
 800b034:	d305      	bcc.n	800b042 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	685b      	ldr	r3, [r3, #4]
 800b03a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b03c:	69ba      	ldr	r2, [r7, #24]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d910      	bls.n	800b064 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b042:	2301      	movs	r3, #1
 800b044:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b048:	e11a      	b.n	800b280 <UART_SetConfig+0x4b4>
 800b04a:	bf00      	nop
 800b04c:	cfff69f3 	.word	0xcfff69f3
 800b050:	40008000 	.word	0x40008000
 800b054:	40013800 	.word	0x40013800
 800b058:	40004400 	.word	0x40004400
 800b05c:	00f42400 	.word	0x00f42400
 800b060:	0800f1b4 	.word	0x0800f1b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b066:	2200      	movs	r2, #0
 800b068:	60bb      	str	r3, [r7, #8]
 800b06a:	60fa      	str	r2, [r7, #12]
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b070:	4a8e      	ldr	r2, [pc, #568]	@ (800b2ac <UART_SetConfig+0x4e0>)
 800b072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b076:	b29b      	uxth	r3, r3
 800b078:	2200      	movs	r2, #0
 800b07a:	603b      	str	r3, [r7, #0]
 800b07c:	607a      	str	r2, [r7, #4]
 800b07e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b082:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b086:	f7f6 f865 	bl	8001154 <__aeabi_uldivmod>
 800b08a:	4602      	mov	r2, r0
 800b08c:	460b      	mov	r3, r1
 800b08e:	4610      	mov	r0, r2
 800b090:	4619      	mov	r1, r3
 800b092:	f04f 0200 	mov.w	r2, #0
 800b096:	f04f 0300 	mov.w	r3, #0
 800b09a:	020b      	lsls	r3, r1, #8
 800b09c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b0a0:	0202      	lsls	r2, r0, #8
 800b0a2:	6979      	ldr	r1, [r7, #20]
 800b0a4:	6849      	ldr	r1, [r1, #4]
 800b0a6:	0849      	lsrs	r1, r1, #1
 800b0a8:	2000      	movs	r0, #0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	eb12 0804 	adds.w	r8, r2, r4
 800b0b2:	eb43 0905 	adc.w	r9, r3, r5
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	685b      	ldr	r3, [r3, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	469a      	mov	sl, r3
 800b0be:	4693      	mov	fp, r2
 800b0c0:	4652      	mov	r2, sl
 800b0c2:	465b      	mov	r3, fp
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	f7f6 f844 	bl	8001154 <__aeabi_uldivmod>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b0da:	d308      	bcc.n	800b0ee <UART_SetConfig+0x322>
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0e2:	d204      	bcs.n	800b0ee <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	6a3a      	ldr	r2, [r7, #32]
 800b0ea:	60da      	str	r2, [r3, #12]
 800b0ec:	e0c8      	b.n	800b280 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b0f4:	e0c4      	b.n	800b280 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	69db      	ldr	r3, [r3, #28]
 800b0fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b0fe:	d167      	bne.n	800b1d0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b100:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b104:	2b08      	cmp	r3, #8
 800b106:	d828      	bhi.n	800b15a <UART_SetConfig+0x38e>
 800b108:	a201      	add	r2, pc, #4	@ (adr r2, 800b110 <UART_SetConfig+0x344>)
 800b10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10e:	bf00      	nop
 800b110:	0800b135 	.word	0x0800b135
 800b114:	0800b13d 	.word	0x0800b13d
 800b118:	0800b145 	.word	0x0800b145
 800b11c:	0800b15b 	.word	0x0800b15b
 800b120:	0800b14b 	.word	0x0800b14b
 800b124:	0800b15b 	.word	0x0800b15b
 800b128:	0800b15b 	.word	0x0800b15b
 800b12c:	0800b15b 	.word	0x0800b15b
 800b130:	0800b153 	.word	0x0800b153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b134:	f7fe f8c4 	bl	80092c0 <HAL_RCC_GetPCLK1Freq>
 800b138:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b13a:	e014      	b.n	800b166 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b13c:	f7fe f8d2 	bl	80092e4 <HAL_RCC_GetPCLK2Freq>
 800b140:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b142:	e010      	b.n	800b166 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b144:	4b5a      	ldr	r3, [pc, #360]	@ (800b2b0 <UART_SetConfig+0x4e4>)
 800b146:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b148:	e00d      	b.n	800b166 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b14a:	f7fe f805 	bl	8009158 <HAL_RCC_GetSysClockFreq>
 800b14e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b150:	e009      	b.n	800b166 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b156:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b158:	e005      	b.n	800b166 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b15a:	2300      	movs	r3, #0
 800b15c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b15e:	2301      	movs	r3, #1
 800b160:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b164:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 8089 	beq.w	800b280 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b172:	4a4e      	ldr	r2, [pc, #312]	@ (800b2ac <UART_SetConfig+0x4e0>)
 800b174:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b178:	461a      	mov	r2, r3
 800b17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b180:	005a      	lsls	r2, r3, #1
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	085b      	lsrs	r3, r3, #1
 800b188:	441a      	add	r2, r3
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b192:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b194:	6a3b      	ldr	r3, [r7, #32]
 800b196:	2b0f      	cmp	r3, #15
 800b198:	d916      	bls.n	800b1c8 <UART_SetConfig+0x3fc>
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b1a0:	d212      	bcs.n	800b1c8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b1a2:	6a3b      	ldr	r3, [r7, #32]
 800b1a4:	b29b      	uxth	r3, r3
 800b1a6:	f023 030f 	bic.w	r3, r3, #15
 800b1aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	085b      	lsrs	r3, r3, #1
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	f003 0307 	and.w	r3, r3, #7
 800b1b6:	b29a      	uxth	r2, r3
 800b1b8:	8bfb      	ldrh	r3, [r7, #30]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	8bfa      	ldrh	r2, [r7, #30]
 800b1c4:	60da      	str	r2, [r3, #12]
 800b1c6:	e05b      	b.n	800b280 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b1ce:	e057      	b.n	800b280 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b1d0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b1d4:	2b08      	cmp	r3, #8
 800b1d6:	d828      	bhi.n	800b22a <UART_SetConfig+0x45e>
 800b1d8:	a201      	add	r2, pc, #4	@ (adr r2, 800b1e0 <UART_SetConfig+0x414>)
 800b1da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1de:	bf00      	nop
 800b1e0:	0800b205 	.word	0x0800b205
 800b1e4:	0800b20d 	.word	0x0800b20d
 800b1e8:	0800b215 	.word	0x0800b215
 800b1ec:	0800b22b 	.word	0x0800b22b
 800b1f0:	0800b21b 	.word	0x0800b21b
 800b1f4:	0800b22b 	.word	0x0800b22b
 800b1f8:	0800b22b 	.word	0x0800b22b
 800b1fc:	0800b22b 	.word	0x0800b22b
 800b200:	0800b223 	.word	0x0800b223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b204:	f7fe f85c 	bl	80092c0 <HAL_RCC_GetPCLK1Freq>
 800b208:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b20a:	e014      	b.n	800b236 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b20c:	f7fe f86a 	bl	80092e4 <HAL_RCC_GetPCLK2Freq>
 800b210:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b212:	e010      	b.n	800b236 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b214:	4b26      	ldr	r3, [pc, #152]	@ (800b2b0 <UART_SetConfig+0x4e4>)
 800b216:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b218:	e00d      	b.n	800b236 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b21a:	f7fd ff9d 	bl	8009158 <HAL_RCC_GetSysClockFreq>
 800b21e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b220:	e009      	b.n	800b236 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b226:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b228:	e005      	b.n	800b236 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b22a:	2300      	movs	r3, #0
 800b22c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b234:	bf00      	nop
    }

    if (pclk != 0U)
 800b236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d021      	beq.n	800b280 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b240:	4a1a      	ldr	r2, [pc, #104]	@ (800b2ac <UART_SetConfig+0x4e0>)
 800b242:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b246:	461a      	mov	r2, r3
 800b248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b24a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	085b      	lsrs	r3, r3, #1
 800b254:	441a      	add	r2, r3
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	2b0f      	cmp	r3, #15
 800b264:	d909      	bls.n	800b27a <UART_SetConfig+0x4ae>
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b26c:	d205      	bcs.n	800b27a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	b29a      	uxth	r2, r3
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	60da      	str	r2, [r3, #12]
 800b278:	e002      	b.n	800b280 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2201      	movs	r2, #1
 800b284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2201      	movs	r2, #1
 800b28c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2200      	movs	r2, #0
 800b294:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2200      	movs	r2, #0
 800b29a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b29c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3730      	adds	r7, #48	@ 0x30
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2aa:	bf00      	nop
 800b2ac:	0800f1b4 	.word	0x0800f1b4
 800b2b0:	00f42400 	.word	0x00f42400

0800b2b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c0:	f003 0301 	and.w	r3, r3, #1
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00a      	beq.n	800b2de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e2:	f003 0302 	and.w	r3, r3, #2
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d00a      	beq.n	800b300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	430a      	orrs	r2, r1
 800b2fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b304:	f003 0304 	and.w	r3, r3, #4
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00a      	beq.n	800b322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	430a      	orrs	r2, r1
 800b320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b326:	f003 0308 	and.w	r3, r3, #8
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00a      	beq.n	800b344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	430a      	orrs	r2, r1
 800b342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b348:	f003 0310 	and.w	r3, r3, #16
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00a      	beq.n	800b366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b36a:	f003 0320 	and.w	r3, r3, #32
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d01a      	beq.n	800b3ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685b      	ldr	r3, [r3, #4]
 800b39a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b3ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b3b2:	d10a      	bne.n	800b3ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00a      	beq.n	800b3ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	605a      	str	r2, [r3, #4]
  }
}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bc80      	pop	{r7}
 800b3f4:	4770      	bx	lr

0800b3f6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b086      	sub	sp, #24
 800b3fa:	af02      	add	r7, sp, #8
 800b3fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b406:	f7fa fac7 	bl	8005998 <HAL_GetTick>
 800b40a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 0308 	and.w	r3, r3, #8
 800b416:	2b08      	cmp	r3, #8
 800b418:	d10e      	bne.n	800b438 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b41a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b41e:	9300      	str	r3, [sp, #0]
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f000 f832 	bl	800b492 <UART_WaitOnFlagUntilTimeout>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b434:	2303      	movs	r3, #3
 800b436:	e028      	b.n	800b48a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f003 0304 	and.w	r3, r3, #4
 800b442:	2b04      	cmp	r3, #4
 800b444:	d10e      	bne.n	800b464 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b446:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2200      	movs	r2, #0
 800b450:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f81c 	bl	800b492 <UART_WaitOnFlagUntilTimeout>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d001      	beq.n	800b464 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b460:	2303      	movs	r3, #3
 800b462:	e012      	b.n	800b48a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2220      	movs	r2, #32
 800b468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2220      	movs	r2, #32
 800b470:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2200      	movs	r2, #0
 800b47e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3710      	adds	r7, #16
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}

0800b492 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b492:	b580      	push	{r7, lr}
 800b494:	b09c      	sub	sp, #112	@ 0x70
 800b496:	af00      	add	r7, sp, #0
 800b498:	60f8      	str	r0, [r7, #12]
 800b49a:	60b9      	str	r1, [r7, #8]
 800b49c:	603b      	str	r3, [r7, #0]
 800b49e:	4613      	mov	r3, r2
 800b4a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4a2:	e0a9      	b.n	800b5f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4aa:	f000 80a5 	beq.w	800b5f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4ae:	f7fa fa73 	bl	8005998 <HAL_GetTick>
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d302      	bcc.n	800b4c4 <UART_WaitOnFlagUntilTimeout+0x32>
 800b4be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d140      	bne.n	800b546 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4cc:	e853 3f00 	ldrex	r3, [r3]
 800b4d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b4d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4d4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b4d8:	667b      	str	r3, [r7, #100]	@ 0x64
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	461a      	mov	r2, r3
 800b4e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b4e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b4e4:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4e6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b4e8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b4ea:	e841 2300 	strex	r3, r2, [r1]
 800b4ee:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b4f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d1e6      	bne.n	800b4c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3308      	adds	r3, #8
 800b4fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b500:	e853 3f00 	ldrex	r3, [r3]
 800b504:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b508:	f023 0301 	bic.w	r3, r3, #1
 800b50c:	663b      	str	r3, [r7, #96]	@ 0x60
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3308      	adds	r3, #8
 800b514:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b516:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b518:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b51a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b51c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b51e:	e841 2300 	strex	r3, r2, [r1]
 800b522:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b524:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1e5      	bne.n	800b4f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2220      	movs	r2, #32
 800b52e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2220      	movs	r2, #32
 800b536:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e069      	b.n	800b61a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b00      	cmp	r3, #0
 800b552:	d051      	beq.n	800b5f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	69db      	ldr	r3, [r3, #28]
 800b55a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b55e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b562:	d149      	bne.n	800b5f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b56c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b576:	e853 3f00 	ldrex	r3, [r3]
 800b57a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b582:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	461a      	mov	r2, r3
 800b58a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b58c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b58e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b590:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b592:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b594:	e841 2300 	strex	r3, r2, [r1]
 800b598:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b59a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d1e6      	bne.n	800b56e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	e853 3f00 	ldrex	r3, [r3]
 800b5ae:	613b      	str	r3, [r7, #16]
   return(result);
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	f023 0301 	bic.w	r3, r3, #1
 800b5b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3308      	adds	r3, #8
 800b5be:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b5c0:	623a      	str	r2, [r7, #32]
 800b5c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c4:	69f9      	ldr	r1, [r7, #28]
 800b5c6:	6a3a      	ldr	r2, [r7, #32]
 800b5c8:	e841 2300 	strex	r3, r2, [r1]
 800b5cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1e5      	bne.n	800b5a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2220      	movs	r2, #32
 800b5d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2220      	movs	r2, #32
 800b5e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2220      	movs	r2, #32
 800b5e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b5f4:	2303      	movs	r3, #3
 800b5f6:	e010      	b.n	800b61a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	69da      	ldr	r2, [r3, #28]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	4013      	ands	r3, r2
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	429a      	cmp	r2, r3
 800b606:	bf0c      	ite	eq
 800b608:	2301      	moveq	r3, #1
 800b60a:	2300      	movne	r3, #0
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	461a      	mov	r2, r3
 800b610:	79fb      	ldrb	r3, [r7, #7]
 800b612:	429a      	cmp	r2, r3
 800b614:	f43f af46 	beq.w	800b4a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3770      	adds	r7, #112	@ 0x70
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b622:	b480      	push	{r7}
 800b624:	b085      	sub	sp, #20
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b630:	2b01      	cmp	r3, #1
 800b632:	d101      	bne.n	800b638 <HAL_UARTEx_DisableFifoMode+0x16>
 800b634:	2302      	movs	r3, #2
 800b636:	e027      	b.n	800b688 <HAL_UARTEx_DisableFifoMode+0x66>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2224      	movs	r2, #36	@ 0x24
 800b644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f022 0201 	bic.w	r2, r2, #1
 800b65e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b666:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2200      	movs	r2, #0
 800b66c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2220      	movs	r2, #32
 800b67a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b686:	2300      	movs	r3, #0
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3714      	adds	r7, #20
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bc80      	pop	{r7}
 800b690:	4770      	bx	lr

0800b692 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b084      	sub	sp, #16
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6a2:	2b01      	cmp	r3, #1
 800b6a4:	d101      	bne.n	800b6aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b6a6:	2302      	movs	r3, #2
 800b6a8:	e02d      	b.n	800b706 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2224      	movs	r2, #36	@ 0x24
 800b6b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f022 0201 	bic.w	r2, r2, #1
 800b6d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	689b      	ldr	r3, [r3, #8]
 800b6d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	430a      	orrs	r2, r1
 800b6e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6e6:	6878      	ldr	r0, [r7, #4]
 800b6e8:	f000 f850 	bl	800b78c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	68fa      	ldr	r2, [r7, #12]
 800b6f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2220      	movs	r2, #32
 800b6f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b70e:	b580      	push	{r7, lr}
 800b710:	b084      	sub	sp, #16
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
 800b716:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d101      	bne.n	800b726 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b722:	2302      	movs	r3, #2
 800b724:	e02d      	b.n	800b782 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2201      	movs	r2, #1
 800b72a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2224      	movs	r2, #36	@ 0x24
 800b732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f022 0201 	bic.w	r2, r2, #1
 800b74c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	683a      	ldr	r2, [r7, #0]
 800b75e:	430a      	orrs	r2, r1
 800b760:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f812 	bl	800b78c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2220      	movs	r2, #32
 800b774:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2200      	movs	r2, #0
 800b77c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
	...

0800b78c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d108      	bne.n	800b7ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b7ac:	e031      	b.n	800b812 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b7ae:	2308      	movs	r3, #8
 800b7b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b7b2:	2308      	movs	r3, #8
 800b7b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	0e5b      	lsrs	r3, r3, #25
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	f003 0307 	and.w	r3, r3, #7
 800b7c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	0f5b      	lsrs	r3, r3, #29
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f003 0307 	and.w	r3, r3, #7
 800b7d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7d6:	7bbb      	ldrb	r3, [r7, #14]
 800b7d8:	7b3a      	ldrb	r2, [r7, #12]
 800b7da:	4910      	ldr	r1, [pc, #64]	@ (800b81c <UARTEx_SetNbDataToProcess+0x90>)
 800b7dc:	5c8a      	ldrb	r2, [r1, r2]
 800b7de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b7e2:	7b3a      	ldrb	r2, [r7, #12]
 800b7e4:	490e      	ldr	r1, [pc, #56]	@ (800b820 <UARTEx_SetNbDataToProcess+0x94>)
 800b7e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b7e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7f4:	7bfb      	ldrb	r3, [r7, #15]
 800b7f6:	7b7a      	ldrb	r2, [r7, #13]
 800b7f8:	4908      	ldr	r1, [pc, #32]	@ (800b81c <UARTEx_SetNbDataToProcess+0x90>)
 800b7fa:	5c8a      	ldrb	r2, [r1, r2]
 800b7fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b800:	7b7a      	ldrb	r2, [r7, #13]
 800b802:	4907      	ldr	r1, [pc, #28]	@ (800b820 <UARTEx_SetNbDataToProcess+0x94>)
 800b804:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b806:	fb93 f3f2 	sdiv	r3, r3, r2
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b812:	bf00      	nop
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	bc80      	pop	{r7}
 800b81a:	4770      	bx	lr
 800b81c:	0800f1cc 	.word	0x0800f1cc
 800b820:	0800f1d4 	.word	0x0800f1d4

0800b824 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800b824:	b480      	push	{r7}
 800b826:	b085      	sub	sp, #20
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	460b      	mov	r3, r1
 800b82e:	70fb      	strb	r3, [r7, #3]
 800b830:	4613      	mov	r3, r2
 800b832:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800b838:	e004      	b.n	800b844 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	1c5a      	adds	r2, r3, #1
 800b83e:	60fa      	str	r2, [r7, #12]
 800b840:	78fa      	ldrb	r2, [r7, #3]
 800b842:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800b844:	883b      	ldrh	r3, [r7, #0]
 800b846:	1e5a      	subs	r2, r3, #1
 800b848:	803a      	strh	r2, [r7, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1f5      	bne.n	800b83a <UTIL_MEM_set_8+0x16>
  }
}
 800b84e:	bf00      	nop
 800b850:	bf00      	nop
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	bc80      	pop	{r7}
 800b858:	4770      	bx	lr

0800b85a <__cvt>:
 800b85a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	2b00      	cmp	r3, #0
 800b862:	461d      	mov	r5, r3
 800b864:	4614      	mov	r4, r2
 800b866:	bfbc      	itt	lt
 800b868:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800b86c:	4614      	movlt	r4, r2
 800b86e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b870:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800b872:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800b876:	bfb6      	itet	lt
 800b878:	461d      	movlt	r5, r3
 800b87a:	2300      	movge	r3, #0
 800b87c:	232d      	movlt	r3, #45	@ 0x2d
 800b87e:	7013      	strb	r3, [r2, #0]
 800b880:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b882:	f023 0820 	bic.w	r8, r3, #32
 800b886:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b88a:	d005      	beq.n	800b898 <__cvt+0x3e>
 800b88c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b890:	d100      	bne.n	800b894 <__cvt+0x3a>
 800b892:	3601      	adds	r6, #1
 800b894:	2302      	movs	r3, #2
 800b896:	e000      	b.n	800b89a <__cvt+0x40>
 800b898:	2303      	movs	r3, #3
 800b89a:	aa07      	add	r2, sp, #28
 800b89c:	9204      	str	r2, [sp, #16]
 800b89e:	aa06      	add	r2, sp, #24
 800b8a0:	e9cd a202 	strd	sl, r2, [sp, #8]
 800b8a4:	e9cd 3600 	strd	r3, r6, [sp]
 800b8a8:	4622      	mov	r2, r4
 800b8aa:	462b      	mov	r3, r5
 800b8ac:	f000 fea4 	bl	800c5f8 <_dtoa_r>
 800b8b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b8b4:	4607      	mov	r7, r0
 800b8b6:	d119      	bne.n	800b8ec <__cvt+0x92>
 800b8b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8ba:	07db      	lsls	r3, r3, #31
 800b8bc:	d50e      	bpl.n	800b8dc <__cvt+0x82>
 800b8be:	eb00 0906 	add.w	r9, r0, r6
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	4620      	mov	r0, r4
 800b8c8:	4629      	mov	r1, r5
 800b8ca:	f7f5 f8d5 	bl	8000a78 <__aeabi_dcmpeq>
 800b8ce:	b108      	cbz	r0, 800b8d4 <__cvt+0x7a>
 800b8d0:	f8cd 901c 	str.w	r9, [sp, #28]
 800b8d4:	2230      	movs	r2, #48	@ 0x30
 800b8d6:	9b07      	ldr	r3, [sp, #28]
 800b8d8:	454b      	cmp	r3, r9
 800b8da:	d31e      	bcc.n	800b91a <__cvt+0xc0>
 800b8dc:	9b07      	ldr	r3, [sp, #28]
 800b8de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800b8e0:	1bdb      	subs	r3, r3, r7
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	6013      	str	r3, [r2, #0]
 800b8e6:	b008      	add	sp, #32
 800b8e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b8f0:	eb00 0906 	add.w	r9, r0, r6
 800b8f4:	d1e5      	bne.n	800b8c2 <__cvt+0x68>
 800b8f6:	7803      	ldrb	r3, [r0, #0]
 800b8f8:	2b30      	cmp	r3, #48	@ 0x30
 800b8fa:	d10a      	bne.n	800b912 <__cvt+0xb8>
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	2300      	movs	r3, #0
 800b900:	4620      	mov	r0, r4
 800b902:	4629      	mov	r1, r5
 800b904:	f7f5 f8b8 	bl	8000a78 <__aeabi_dcmpeq>
 800b908:	b918      	cbnz	r0, 800b912 <__cvt+0xb8>
 800b90a:	f1c6 0601 	rsb	r6, r6, #1
 800b90e:	f8ca 6000 	str.w	r6, [sl]
 800b912:	f8da 3000 	ldr.w	r3, [sl]
 800b916:	4499      	add	r9, r3
 800b918:	e7d3      	b.n	800b8c2 <__cvt+0x68>
 800b91a:	1c59      	adds	r1, r3, #1
 800b91c:	9107      	str	r1, [sp, #28]
 800b91e:	701a      	strb	r2, [r3, #0]
 800b920:	e7d9      	b.n	800b8d6 <__cvt+0x7c>

0800b922 <__exponent>:
 800b922:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b924:	2900      	cmp	r1, #0
 800b926:	bfba      	itte	lt
 800b928:	4249      	neglt	r1, r1
 800b92a:	232d      	movlt	r3, #45	@ 0x2d
 800b92c:	232b      	movge	r3, #43	@ 0x2b
 800b92e:	2909      	cmp	r1, #9
 800b930:	7002      	strb	r2, [r0, #0]
 800b932:	7043      	strb	r3, [r0, #1]
 800b934:	dd29      	ble.n	800b98a <__exponent+0x68>
 800b936:	f10d 0307 	add.w	r3, sp, #7
 800b93a:	461d      	mov	r5, r3
 800b93c:	270a      	movs	r7, #10
 800b93e:	461a      	mov	r2, r3
 800b940:	fbb1 f6f7 	udiv	r6, r1, r7
 800b944:	fb07 1416 	mls	r4, r7, r6, r1
 800b948:	3430      	adds	r4, #48	@ 0x30
 800b94a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b94e:	460c      	mov	r4, r1
 800b950:	2c63      	cmp	r4, #99	@ 0x63
 800b952:	f103 33ff 	add.w	r3, r3, #4294967295
 800b956:	4631      	mov	r1, r6
 800b958:	dcf1      	bgt.n	800b93e <__exponent+0x1c>
 800b95a:	3130      	adds	r1, #48	@ 0x30
 800b95c:	1e94      	subs	r4, r2, #2
 800b95e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b962:	1c41      	adds	r1, r0, #1
 800b964:	4623      	mov	r3, r4
 800b966:	42ab      	cmp	r3, r5
 800b968:	d30a      	bcc.n	800b980 <__exponent+0x5e>
 800b96a:	f10d 0309 	add.w	r3, sp, #9
 800b96e:	1a9b      	subs	r3, r3, r2
 800b970:	42ac      	cmp	r4, r5
 800b972:	bf88      	it	hi
 800b974:	2300      	movhi	r3, #0
 800b976:	3302      	adds	r3, #2
 800b978:	4403      	add	r3, r0
 800b97a:	1a18      	subs	r0, r3, r0
 800b97c:	b003      	add	sp, #12
 800b97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b980:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b984:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b988:	e7ed      	b.n	800b966 <__exponent+0x44>
 800b98a:	2330      	movs	r3, #48	@ 0x30
 800b98c:	3130      	adds	r1, #48	@ 0x30
 800b98e:	7083      	strb	r3, [r0, #2]
 800b990:	70c1      	strb	r1, [r0, #3]
 800b992:	1d03      	adds	r3, r0, #4
 800b994:	e7f1      	b.n	800b97a <__exponent+0x58>
	...

0800b998 <_printf_float>:
 800b998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b99c:	b091      	sub	sp, #68	@ 0x44
 800b99e:	460c      	mov	r4, r1
 800b9a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800b9a4:	4616      	mov	r6, r2
 800b9a6:	461f      	mov	r7, r3
 800b9a8:	4605      	mov	r5, r0
 800b9aa:	f000 fd23 	bl	800c3f4 <_localeconv_r>
 800b9ae:	6803      	ldr	r3, [r0, #0]
 800b9b0:	9308      	str	r3, [sp, #32]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7f4 fc34 	bl	8000220 <strlen>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	930e      	str	r3, [sp, #56]	@ 0x38
 800b9bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b9c0:	9009      	str	r0, [sp, #36]	@ 0x24
 800b9c2:	3307      	adds	r3, #7
 800b9c4:	f023 0307 	bic.w	r3, r3, #7
 800b9c8:	f103 0208 	add.w	r2, r3, #8
 800b9cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b9d0:	f8d4 b000 	ldr.w	fp, [r4]
 800b9d4:	f8c8 2000 	str.w	r2, [r8]
 800b9d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b9e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9e2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800b9e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b9ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b9ee:	4b9d      	ldr	r3, [pc, #628]	@ (800bc64 <_printf_float+0x2cc>)
 800b9f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9f4:	f7f5 f872 	bl	8000adc <__aeabi_dcmpun>
 800b9f8:	bb70      	cbnz	r0, 800ba58 <_printf_float+0xc0>
 800b9fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800b9fe:	4b99      	ldr	r3, [pc, #612]	@ (800bc64 <_printf_float+0x2cc>)
 800ba00:	f04f 32ff 	mov.w	r2, #4294967295
 800ba04:	f7f5 f84c 	bl	8000aa0 <__aeabi_dcmple>
 800ba08:	bb30      	cbnz	r0, 800ba58 <_printf_float+0xc0>
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	4640      	mov	r0, r8
 800ba10:	4649      	mov	r1, r9
 800ba12:	f7f5 f83b 	bl	8000a8c <__aeabi_dcmplt>
 800ba16:	b110      	cbz	r0, 800ba1e <_printf_float+0x86>
 800ba18:	232d      	movs	r3, #45	@ 0x2d
 800ba1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba1e:	4a92      	ldr	r2, [pc, #584]	@ (800bc68 <_printf_float+0x2d0>)
 800ba20:	4b92      	ldr	r3, [pc, #584]	@ (800bc6c <_printf_float+0x2d4>)
 800ba22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ba26:	bf94      	ite	ls
 800ba28:	4690      	movls	r8, r2
 800ba2a:	4698      	movhi	r8, r3
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	6123      	str	r3, [r4, #16]
 800ba30:	f02b 0304 	bic.w	r3, fp, #4
 800ba34:	6023      	str	r3, [r4, #0]
 800ba36:	f04f 0900 	mov.w	r9, #0
 800ba3a:	9700      	str	r7, [sp, #0]
 800ba3c:	4633      	mov	r3, r6
 800ba3e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ba40:	4621      	mov	r1, r4
 800ba42:	4628      	mov	r0, r5
 800ba44:	f000 f9d4 	bl	800bdf0 <_printf_common>
 800ba48:	3001      	adds	r0, #1
 800ba4a:	f040 808f 	bne.w	800bb6c <_printf_float+0x1d4>
 800ba4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ba52:	b011      	add	sp, #68	@ 0x44
 800ba54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba58:	4642      	mov	r2, r8
 800ba5a:	464b      	mov	r3, r9
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	4649      	mov	r1, r9
 800ba60:	f7f5 f83c 	bl	8000adc <__aeabi_dcmpun>
 800ba64:	b140      	cbz	r0, 800ba78 <_printf_float+0xe0>
 800ba66:	464b      	mov	r3, r9
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	bfbc      	itt	lt
 800ba6c:	232d      	movlt	r3, #45	@ 0x2d
 800ba6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ba72:	4a7f      	ldr	r2, [pc, #508]	@ (800bc70 <_printf_float+0x2d8>)
 800ba74:	4b7f      	ldr	r3, [pc, #508]	@ (800bc74 <_printf_float+0x2dc>)
 800ba76:	e7d4      	b.n	800ba22 <_printf_float+0x8a>
 800ba78:	6863      	ldr	r3, [r4, #4]
 800ba7a:	1c5a      	adds	r2, r3, #1
 800ba7c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800ba80:	d13f      	bne.n	800bb02 <_printf_float+0x16a>
 800ba82:	2306      	movs	r3, #6
 800ba84:	6063      	str	r3, [r4, #4]
 800ba86:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	9206      	str	r2, [sp, #24]
 800ba90:	aa0e      	add	r2, sp, #56	@ 0x38
 800ba92:	e9cd a204 	strd	sl, r2, [sp, #16]
 800ba96:	aa0d      	add	r2, sp, #52	@ 0x34
 800ba98:	9203      	str	r2, [sp, #12]
 800ba9a:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800ba9e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800baa2:	6863      	ldr	r3, [r4, #4]
 800baa4:	9300      	str	r3, [sp, #0]
 800baa6:	4642      	mov	r2, r8
 800baa8:	464b      	mov	r3, r9
 800baaa:	4628      	mov	r0, r5
 800baac:	910a      	str	r1, [sp, #40]	@ 0x28
 800baae:	f7ff fed4 	bl	800b85a <__cvt>
 800bab2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bab4:	2947      	cmp	r1, #71	@ 0x47
 800bab6:	4680      	mov	r8, r0
 800bab8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800baba:	d128      	bne.n	800bb0e <_printf_float+0x176>
 800babc:	1cc8      	adds	r0, r1, #3
 800babe:	db02      	blt.n	800bac6 <_printf_float+0x12e>
 800bac0:	6863      	ldr	r3, [r4, #4]
 800bac2:	4299      	cmp	r1, r3
 800bac4:	dd40      	ble.n	800bb48 <_printf_float+0x1b0>
 800bac6:	f1aa 0a02 	sub.w	sl, sl, #2
 800baca:	fa5f fa8a 	uxtb.w	sl, sl
 800bace:	3901      	subs	r1, #1
 800bad0:	4652      	mov	r2, sl
 800bad2:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bad6:	910d      	str	r1, [sp, #52]	@ 0x34
 800bad8:	f7ff ff23 	bl	800b922 <__exponent>
 800badc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bade:	1813      	adds	r3, r2, r0
 800bae0:	2a01      	cmp	r2, #1
 800bae2:	4681      	mov	r9, r0
 800bae4:	6123      	str	r3, [r4, #16]
 800bae6:	dc02      	bgt.n	800baee <_printf_float+0x156>
 800bae8:	6822      	ldr	r2, [r4, #0]
 800baea:	07d2      	lsls	r2, r2, #31
 800baec:	d501      	bpl.n	800baf2 <_printf_float+0x15a>
 800baee:	3301      	adds	r3, #1
 800baf0:	6123      	str	r3, [r4, #16]
 800baf2:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d09f      	beq.n	800ba3a <_printf_float+0xa2>
 800bafa:	232d      	movs	r3, #45	@ 0x2d
 800bafc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb00:	e79b      	b.n	800ba3a <_printf_float+0xa2>
 800bb02:	2947      	cmp	r1, #71	@ 0x47
 800bb04:	d1bf      	bne.n	800ba86 <_printf_float+0xee>
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1bd      	bne.n	800ba86 <_printf_float+0xee>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e7ba      	b.n	800ba84 <_printf_float+0xec>
 800bb0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb12:	d9dc      	bls.n	800bace <_printf_float+0x136>
 800bb14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bb18:	d118      	bne.n	800bb4c <_printf_float+0x1b4>
 800bb1a:	2900      	cmp	r1, #0
 800bb1c:	6863      	ldr	r3, [r4, #4]
 800bb1e:	dd0b      	ble.n	800bb38 <_printf_float+0x1a0>
 800bb20:	6121      	str	r1, [r4, #16]
 800bb22:	b913      	cbnz	r3, 800bb2a <_printf_float+0x192>
 800bb24:	6822      	ldr	r2, [r4, #0]
 800bb26:	07d0      	lsls	r0, r2, #31
 800bb28:	d502      	bpl.n	800bb30 <_printf_float+0x198>
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	440b      	add	r3, r1
 800bb2e:	6123      	str	r3, [r4, #16]
 800bb30:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bb32:	f04f 0900 	mov.w	r9, #0
 800bb36:	e7dc      	b.n	800baf2 <_printf_float+0x15a>
 800bb38:	b913      	cbnz	r3, 800bb40 <_printf_float+0x1a8>
 800bb3a:	6822      	ldr	r2, [r4, #0]
 800bb3c:	07d2      	lsls	r2, r2, #31
 800bb3e:	d501      	bpl.n	800bb44 <_printf_float+0x1ac>
 800bb40:	3302      	adds	r3, #2
 800bb42:	e7f4      	b.n	800bb2e <_printf_float+0x196>
 800bb44:	2301      	movs	r3, #1
 800bb46:	e7f2      	b.n	800bb2e <_printf_float+0x196>
 800bb48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bb4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb4e:	4299      	cmp	r1, r3
 800bb50:	db05      	blt.n	800bb5e <_printf_float+0x1c6>
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	6121      	str	r1, [r4, #16]
 800bb56:	07d8      	lsls	r0, r3, #31
 800bb58:	d5ea      	bpl.n	800bb30 <_printf_float+0x198>
 800bb5a:	1c4b      	adds	r3, r1, #1
 800bb5c:	e7e7      	b.n	800bb2e <_printf_float+0x196>
 800bb5e:	2900      	cmp	r1, #0
 800bb60:	bfd4      	ite	le
 800bb62:	f1c1 0202 	rsble	r2, r1, #2
 800bb66:	2201      	movgt	r2, #1
 800bb68:	4413      	add	r3, r2
 800bb6a:	e7e0      	b.n	800bb2e <_printf_float+0x196>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	055a      	lsls	r2, r3, #21
 800bb70:	d407      	bmi.n	800bb82 <_printf_float+0x1ea>
 800bb72:	6923      	ldr	r3, [r4, #16]
 800bb74:	4642      	mov	r2, r8
 800bb76:	4631      	mov	r1, r6
 800bb78:	4628      	mov	r0, r5
 800bb7a:	47b8      	blx	r7
 800bb7c:	3001      	adds	r0, #1
 800bb7e:	d12b      	bne.n	800bbd8 <_printf_float+0x240>
 800bb80:	e765      	b.n	800ba4e <_printf_float+0xb6>
 800bb82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bb86:	f240 80dd 	bls.w	800bd44 <_printf_float+0x3ac>
 800bb8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bb8e:	2200      	movs	r2, #0
 800bb90:	2300      	movs	r3, #0
 800bb92:	f7f4 ff71 	bl	8000a78 <__aeabi_dcmpeq>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	d033      	beq.n	800bc02 <_printf_float+0x26a>
 800bb9a:	4a37      	ldr	r2, [pc, #220]	@ (800bc78 <_printf_float+0x2e0>)
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	4631      	mov	r1, r6
 800bba0:	4628      	mov	r0, r5
 800bba2:	47b8      	blx	r7
 800bba4:	3001      	adds	r0, #1
 800bba6:	f43f af52 	beq.w	800ba4e <_printf_float+0xb6>
 800bbaa:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800bbae:	4543      	cmp	r3, r8
 800bbb0:	db02      	blt.n	800bbb8 <_printf_float+0x220>
 800bbb2:	6823      	ldr	r3, [r4, #0]
 800bbb4:	07d8      	lsls	r0, r3, #31
 800bbb6:	d50f      	bpl.n	800bbd8 <_printf_float+0x240>
 800bbb8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	47b8      	blx	r7
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	f43f af43 	beq.w	800ba4e <_printf_float+0xb6>
 800bbc8:	f04f 0900 	mov.w	r9, #0
 800bbcc:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbd0:	f104 0a1a 	add.w	sl, r4, #26
 800bbd4:	45c8      	cmp	r8, r9
 800bbd6:	dc09      	bgt.n	800bbec <_printf_float+0x254>
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	079b      	lsls	r3, r3, #30
 800bbdc:	f100 8103 	bmi.w	800bde6 <_printf_float+0x44e>
 800bbe0:	68e0      	ldr	r0, [r4, #12]
 800bbe2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbe4:	4298      	cmp	r0, r3
 800bbe6:	bfb8      	it	lt
 800bbe8:	4618      	movlt	r0, r3
 800bbea:	e732      	b.n	800ba52 <_printf_float+0xba>
 800bbec:	2301      	movs	r3, #1
 800bbee:	4652      	mov	r2, sl
 800bbf0:	4631      	mov	r1, r6
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	47b8      	blx	r7
 800bbf6:	3001      	adds	r0, #1
 800bbf8:	f43f af29 	beq.w	800ba4e <_printf_float+0xb6>
 800bbfc:	f109 0901 	add.w	r9, r9, #1
 800bc00:	e7e8      	b.n	800bbd4 <_printf_float+0x23c>
 800bc02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	dc39      	bgt.n	800bc7c <_printf_float+0x2e4>
 800bc08:	4a1b      	ldr	r2, [pc, #108]	@ (800bc78 <_printf_float+0x2e0>)
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4628      	mov	r0, r5
 800bc10:	47b8      	blx	r7
 800bc12:	3001      	adds	r0, #1
 800bc14:	f43f af1b 	beq.w	800ba4e <_printf_float+0xb6>
 800bc18:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800bc1c:	ea59 0303 	orrs.w	r3, r9, r3
 800bc20:	d102      	bne.n	800bc28 <_printf_float+0x290>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	07d9      	lsls	r1, r3, #31
 800bc26:	d5d7      	bpl.n	800bbd8 <_printf_float+0x240>
 800bc28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4628      	mov	r0, r5
 800bc30:	47b8      	blx	r7
 800bc32:	3001      	adds	r0, #1
 800bc34:	f43f af0b 	beq.w	800ba4e <_printf_float+0xb6>
 800bc38:	f04f 0a00 	mov.w	sl, #0
 800bc3c:	f104 0b1a 	add.w	fp, r4, #26
 800bc40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc42:	425b      	negs	r3, r3
 800bc44:	4553      	cmp	r3, sl
 800bc46:	dc01      	bgt.n	800bc4c <_printf_float+0x2b4>
 800bc48:	464b      	mov	r3, r9
 800bc4a:	e793      	b.n	800bb74 <_printf_float+0x1dc>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	465a      	mov	r2, fp
 800bc50:	4631      	mov	r1, r6
 800bc52:	4628      	mov	r0, r5
 800bc54:	47b8      	blx	r7
 800bc56:	3001      	adds	r0, #1
 800bc58:	f43f aef9 	beq.w	800ba4e <_printf_float+0xb6>
 800bc5c:	f10a 0a01 	add.w	sl, sl, #1
 800bc60:	e7ee      	b.n	800bc40 <_printf_float+0x2a8>
 800bc62:	bf00      	nop
 800bc64:	7fefffff 	.word	0x7fefffff
 800bc68:	0800f1dc 	.word	0x0800f1dc
 800bc6c:	0800f1e0 	.word	0x0800f1e0
 800bc70:	0800f1e4 	.word	0x0800f1e4
 800bc74:	0800f1e8 	.word	0x0800f1e8
 800bc78:	0800f1ec 	.word	0x0800f1ec
 800bc7c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc7e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bc82:	4553      	cmp	r3, sl
 800bc84:	bfa8      	it	ge
 800bc86:	4653      	movge	r3, sl
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	4699      	mov	r9, r3
 800bc8c:	dc36      	bgt.n	800bcfc <_printf_float+0x364>
 800bc8e:	f04f 0b00 	mov.w	fp, #0
 800bc92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc96:	f104 021a 	add.w	r2, r4, #26
 800bc9a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800bc9c:	930a      	str	r3, [sp, #40]	@ 0x28
 800bc9e:	eba3 0309 	sub.w	r3, r3, r9
 800bca2:	455b      	cmp	r3, fp
 800bca4:	dc31      	bgt.n	800bd0a <_printf_float+0x372>
 800bca6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bca8:	459a      	cmp	sl, r3
 800bcaa:	dc3a      	bgt.n	800bd22 <_printf_float+0x38a>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	07da      	lsls	r2, r3, #31
 800bcb0:	d437      	bmi.n	800bd22 <_printf_float+0x38a>
 800bcb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcb4:	ebaa 0903 	sub.w	r9, sl, r3
 800bcb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcba:	ebaa 0303 	sub.w	r3, sl, r3
 800bcbe:	4599      	cmp	r9, r3
 800bcc0:	bfa8      	it	ge
 800bcc2:	4699      	movge	r9, r3
 800bcc4:	f1b9 0f00 	cmp.w	r9, #0
 800bcc8:	dc33      	bgt.n	800bd32 <_printf_float+0x39a>
 800bcca:	f04f 0800 	mov.w	r8, #0
 800bcce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcd2:	f104 0b1a 	add.w	fp, r4, #26
 800bcd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcd8:	ebaa 0303 	sub.w	r3, sl, r3
 800bcdc:	eba3 0309 	sub.w	r3, r3, r9
 800bce0:	4543      	cmp	r3, r8
 800bce2:	f77f af79 	ble.w	800bbd8 <_printf_float+0x240>
 800bce6:	2301      	movs	r3, #1
 800bce8:	465a      	mov	r2, fp
 800bcea:	4631      	mov	r1, r6
 800bcec:	4628      	mov	r0, r5
 800bcee:	47b8      	blx	r7
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	f43f aeac 	beq.w	800ba4e <_printf_float+0xb6>
 800bcf6:	f108 0801 	add.w	r8, r8, #1
 800bcfa:	e7ec      	b.n	800bcd6 <_printf_float+0x33e>
 800bcfc:	4642      	mov	r2, r8
 800bcfe:	4631      	mov	r1, r6
 800bd00:	4628      	mov	r0, r5
 800bd02:	47b8      	blx	r7
 800bd04:	3001      	adds	r0, #1
 800bd06:	d1c2      	bne.n	800bc8e <_printf_float+0x2f6>
 800bd08:	e6a1      	b.n	800ba4e <_printf_float+0xb6>
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	4628      	mov	r0, r5
 800bd10:	920a      	str	r2, [sp, #40]	@ 0x28
 800bd12:	47b8      	blx	r7
 800bd14:	3001      	adds	r0, #1
 800bd16:	f43f ae9a 	beq.w	800ba4e <_printf_float+0xb6>
 800bd1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd1c:	f10b 0b01 	add.w	fp, fp, #1
 800bd20:	e7bb      	b.n	800bc9a <_printf_float+0x302>
 800bd22:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd26:	4631      	mov	r1, r6
 800bd28:	4628      	mov	r0, r5
 800bd2a:	47b8      	blx	r7
 800bd2c:	3001      	adds	r0, #1
 800bd2e:	d1c0      	bne.n	800bcb2 <_printf_float+0x31a>
 800bd30:	e68d      	b.n	800ba4e <_printf_float+0xb6>
 800bd32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd34:	464b      	mov	r3, r9
 800bd36:	4442      	add	r2, r8
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	47b8      	blx	r7
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d1c3      	bne.n	800bcca <_printf_float+0x332>
 800bd42:	e684      	b.n	800ba4e <_printf_float+0xb6>
 800bd44:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800bd48:	f1ba 0f01 	cmp.w	sl, #1
 800bd4c:	dc01      	bgt.n	800bd52 <_printf_float+0x3ba>
 800bd4e:	07db      	lsls	r3, r3, #31
 800bd50:	d536      	bpl.n	800bdc0 <_printf_float+0x428>
 800bd52:	2301      	movs	r3, #1
 800bd54:	4642      	mov	r2, r8
 800bd56:	4631      	mov	r1, r6
 800bd58:	4628      	mov	r0, r5
 800bd5a:	47b8      	blx	r7
 800bd5c:	3001      	adds	r0, #1
 800bd5e:	f43f ae76 	beq.w	800ba4e <_printf_float+0xb6>
 800bd62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd66:	4631      	mov	r1, r6
 800bd68:	4628      	mov	r0, r5
 800bd6a:	47b8      	blx	r7
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	f43f ae6e 	beq.w	800ba4e <_printf_float+0xb6>
 800bd72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bd76:	2200      	movs	r2, #0
 800bd78:	2300      	movs	r3, #0
 800bd7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bd7e:	f7f4 fe7b 	bl	8000a78 <__aeabi_dcmpeq>
 800bd82:	b9c0      	cbnz	r0, 800bdb6 <_printf_float+0x41e>
 800bd84:	4653      	mov	r3, sl
 800bd86:	f108 0201 	add.w	r2, r8, #1
 800bd8a:	4631      	mov	r1, r6
 800bd8c:	4628      	mov	r0, r5
 800bd8e:	47b8      	blx	r7
 800bd90:	3001      	adds	r0, #1
 800bd92:	d10c      	bne.n	800bdae <_printf_float+0x416>
 800bd94:	e65b      	b.n	800ba4e <_printf_float+0xb6>
 800bd96:	2301      	movs	r3, #1
 800bd98:	465a      	mov	r2, fp
 800bd9a:	4631      	mov	r1, r6
 800bd9c:	4628      	mov	r0, r5
 800bd9e:	47b8      	blx	r7
 800bda0:	3001      	adds	r0, #1
 800bda2:	f43f ae54 	beq.w	800ba4e <_printf_float+0xb6>
 800bda6:	f108 0801 	add.w	r8, r8, #1
 800bdaa:	45d0      	cmp	r8, sl
 800bdac:	dbf3      	blt.n	800bd96 <_printf_float+0x3fe>
 800bdae:	464b      	mov	r3, r9
 800bdb0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800bdb4:	e6df      	b.n	800bb76 <_printf_float+0x1de>
 800bdb6:	f04f 0800 	mov.w	r8, #0
 800bdba:	f104 0b1a 	add.w	fp, r4, #26
 800bdbe:	e7f4      	b.n	800bdaa <_printf_float+0x412>
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	4642      	mov	r2, r8
 800bdc4:	e7e1      	b.n	800bd8a <_printf_float+0x3f2>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	464a      	mov	r2, r9
 800bdca:	4631      	mov	r1, r6
 800bdcc:	4628      	mov	r0, r5
 800bdce:	47b8      	blx	r7
 800bdd0:	3001      	adds	r0, #1
 800bdd2:	f43f ae3c 	beq.w	800ba4e <_printf_float+0xb6>
 800bdd6:	f108 0801 	add.w	r8, r8, #1
 800bdda:	68e3      	ldr	r3, [r4, #12]
 800bddc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800bdde:	1a5b      	subs	r3, r3, r1
 800bde0:	4543      	cmp	r3, r8
 800bde2:	dcf0      	bgt.n	800bdc6 <_printf_float+0x42e>
 800bde4:	e6fc      	b.n	800bbe0 <_printf_float+0x248>
 800bde6:	f04f 0800 	mov.w	r8, #0
 800bdea:	f104 0919 	add.w	r9, r4, #25
 800bdee:	e7f4      	b.n	800bdda <_printf_float+0x442>

0800bdf0 <_printf_common>:
 800bdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf4:	4616      	mov	r6, r2
 800bdf6:	4698      	mov	r8, r3
 800bdf8:	688a      	ldr	r2, [r1, #8]
 800bdfa:	690b      	ldr	r3, [r1, #16]
 800bdfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800be00:	4293      	cmp	r3, r2
 800be02:	bfb8      	it	lt
 800be04:	4613      	movlt	r3, r2
 800be06:	6033      	str	r3, [r6, #0]
 800be08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800be0c:	4607      	mov	r7, r0
 800be0e:	460c      	mov	r4, r1
 800be10:	b10a      	cbz	r2, 800be16 <_printf_common+0x26>
 800be12:	3301      	adds	r3, #1
 800be14:	6033      	str	r3, [r6, #0]
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	0699      	lsls	r1, r3, #26
 800be1a:	bf42      	ittt	mi
 800be1c:	6833      	ldrmi	r3, [r6, #0]
 800be1e:	3302      	addmi	r3, #2
 800be20:	6033      	strmi	r3, [r6, #0]
 800be22:	6825      	ldr	r5, [r4, #0]
 800be24:	f015 0506 	ands.w	r5, r5, #6
 800be28:	d106      	bne.n	800be38 <_printf_common+0x48>
 800be2a:	f104 0a19 	add.w	sl, r4, #25
 800be2e:	68e3      	ldr	r3, [r4, #12]
 800be30:	6832      	ldr	r2, [r6, #0]
 800be32:	1a9b      	subs	r3, r3, r2
 800be34:	42ab      	cmp	r3, r5
 800be36:	dc26      	bgt.n	800be86 <_printf_common+0x96>
 800be38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800be3c:	6822      	ldr	r2, [r4, #0]
 800be3e:	3b00      	subs	r3, #0
 800be40:	bf18      	it	ne
 800be42:	2301      	movne	r3, #1
 800be44:	0692      	lsls	r2, r2, #26
 800be46:	d42b      	bmi.n	800bea0 <_printf_common+0xb0>
 800be48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800be4c:	4641      	mov	r1, r8
 800be4e:	4638      	mov	r0, r7
 800be50:	47c8      	blx	r9
 800be52:	3001      	adds	r0, #1
 800be54:	d01e      	beq.n	800be94 <_printf_common+0xa4>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	6922      	ldr	r2, [r4, #16]
 800be5a:	f003 0306 	and.w	r3, r3, #6
 800be5e:	2b04      	cmp	r3, #4
 800be60:	bf02      	ittt	eq
 800be62:	68e5      	ldreq	r5, [r4, #12]
 800be64:	6833      	ldreq	r3, [r6, #0]
 800be66:	1aed      	subeq	r5, r5, r3
 800be68:	68a3      	ldr	r3, [r4, #8]
 800be6a:	bf0c      	ite	eq
 800be6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be70:	2500      	movne	r5, #0
 800be72:	4293      	cmp	r3, r2
 800be74:	bfc4      	itt	gt
 800be76:	1a9b      	subgt	r3, r3, r2
 800be78:	18ed      	addgt	r5, r5, r3
 800be7a:	2600      	movs	r6, #0
 800be7c:	341a      	adds	r4, #26
 800be7e:	42b5      	cmp	r5, r6
 800be80:	d11a      	bne.n	800beb8 <_printf_common+0xc8>
 800be82:	2000      	movs	r0, #0
 800be84:	e008      	b.n	800be98 <_printf_common+0xa8>
 800be86:	2301      	movs	r3, #1
 800be88:	4652      	mov	r2, sl
 800be8a:	4641      	mov	r1, r8
 800be8c:	4638      	mov	r0, r7
 800be8e:	47c8      	blx	r9
 800be90:	3001      	adds	r0, #1
 800be92:	d103      	bne.n	800be9c <_printf_common+0xac>
 800be94:	f04f 30ff 	mov.w	r0, #4294967295
 800be98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be9c:	3501      	adds	r5, #1
 800be9e:	e7c6      	b.n	800be2e <_printf_common+0x3e>
 800bea0:	18e1      	adds	r1, r4, r3
 800bea2:	1c5a      	adds	r2, r3, #1
 800bea4:	2030      	movs	r0, #48	@ 0x30
 800bea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800beaa:	4422      	add	r2, r4
 800beac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800beb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800beb4:	3302      	adds	r3, #2
 800beb6:	e7c7      	b.n	800be48 <_printf_common+0x58>
 800beb8:	2301      	movs	r3, #1
 800beba:	4622      	mov	r2, r4
 800bebc:	4641      	mov	r1, r8
 800bebe:	4638      	mov	r0, r7
 800bec0:	47c8      	blx	r9
 800bec2:	3001      	adds	r0, #1
 800bec4:	d0e6      	beq.n	800be94 <_printf_common+0xa4>
 800bec6:	3601      	adds	r6, #1
 800bec8:	e7d9      	b.n	800be7e <_printf_common+0x8e>
	...

0800becc <_printf_i>:
 800becc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bed0:	7e0f      	ldrb	r7, [r1, #24]
 800bed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bed4:	2f78      	cmp	r7, #120	@ 0x78
 800bed6:	4691      	mov	r9, r2
 800bed8:	4680      	mov	r8, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	469a      	mov	sl, r3
 800bede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bee2:	d807      	bhi.n	800bef4 <_printf_i+0x28>
 800bee4:	2f62      	cmp	r7, #98	@ 0x62
 800bee6:	d80a      	bhi.n	800befe <_printf_i+0x32>
 800bee8:	2f00      	cmp	r7, #0
 800beea:	f000 80d2 	beq.w	800c092 <_printf_i+0x1c6>
 800beee:	2f58      	cmp	r7, #88	@ 0x58
 800bef0:	f000 80b9 	beq.w	800c066 <_printf_i+0x19a>
 800bef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800befc:	e03a      	b.n	800bf74 <_printf_i+0xa8>
 800befe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bf02:	2b15      	cmp	r3, #21
 800bf04:	d8f6      	bhi.n	800bef4 <_printf_i+0x28>
 800bf06:	a101      	add	r1, pc, #4	@ (adr r1, 800bf0c <_printf_i+0x40>)
 800bf08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf0c:	0800bf65 	.word	0x0800bf65
 800bf10:	0800bf79 	.word	0x0800bf79
 800bf14:	0800bef5 	.word	0x0800bef5
 800bf18:	0800bef5 	.word	0x0800bef5
 800bf1c:	0800bef5 	.word	0x0800bef5
 800bf20:	0800bef5 	.word	0x0800bef5
 800bf24:	0800bf79 	.word	0x0800bf79
 800bf28:	0800bef5 	.word	0x0800bef5
 800bf2c:	0800bef5 	.word	0x0800bef5
 800bf30:	0800bef5 	.word	0x0800bef5
 800bf34:	0800bef5 	.word	0x0800bef5
 800bf38:	0800c079 	.word	0x0800c079
 800bf3c:	0800bfa3 	.word	0x0800bfa3
 800bf40:	0800c033 	.word	0x0800c033
 800bf44:	0800bef5 	.word	0x0800bef5
 800bf48:	0800bef5 	.word	0x0800bef5
 800bf4c:	0800c09b 	.word	0x0800c09b
 800bf50:	0800bef5 	.word	0x0800bef5
 800bf54:	0800bfa3 	.word	0x0800bfa3
 800bf58:	0800bef5 	.word	0x0800bef5
 800bf5c:	0800bef5 	.word	0x0800bef5
 800bf60:	0800c03b 	.word	0x0800c03b
 800bf64:	6833      	ldr	r3, [r6, #0]
 800bf66:	1d1a      	adds	r2, r3, #4
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	6032      	str	r2, [r6, #0]
 800bf6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf74:	2301      	movs	r3, #1
 800bf76:	e09d      	b.n	800c0b4 <_printf_i+0x1e8>
 800bf78:	6833      	ldr	r3, [r6, #0]
 800bf7a:	6820      	ldr	r0, [r4, #0]
 800bf7c:	1d19      	adds	r1, r3, #4
 800bf7e:	6031      	str	r1, [r6, #0]
 800bf80:	0606      	lsls	r6, r0, #24
 800bf82:	d501      	bpl.n	800bf88 <_printf_i+0xbc>
 800bf84:	681d      	ldr	r5, [r3, #0]
 800bf86:	e003      	b.n	800bf90 <_printf_i+0xc4>
 800bf88:	0645      	lsls	r5, r0, #25
 800bf8a:	d5fb      	bpl.n	800bf84 <_printf_i+0xb8>
 800bf8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf90:	2d00      	cmp	r5, #0
 800bf92:	da03      	bge.n	800bf9c <_printf_i+0xd0>
 800bf94:	232d      	movs	r3, #45	@ 0x2d
 800bf96:	426d      	negs	r5, r5
 800bf98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf9c:	4859      	ldr	r0, [pc, #356]	@ (800c104 <_printf_i+0x238>)
 800bf9e:	230a      	movs	r3, #10
 800bfa0:	e011      	b.n	800bfc6 <_printf_i+0xfa>
 800bfa2:	6821      	ldr	r1, [r4, #0]
 800bfa4:	6833      	ldr	r3, [r6, #0]
 800bfa6:	0608      	lsls	r0, r1, #24
 800bfa8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bfac:	d402      	bmi.n	800bfb4 <_printf_i+0xe8>
 800bfae:	0649      	lsls	r1, r1, #25
 800bfb0:	bf48      	it	mi
 800bfb2:	b2ad      	uxthmi	r5, r5
 800bfb4:	2f6f      	cmp	r7, #111	@ 0x6f
 800bfb6:	4853      	ldr	r0, [pc, #332]	@ (800c104 <_printf_i+0x238>)
 800bfb8:	6033      	str	r3, [r6, #0]
 800bfba:	bf14      	ite	ne
 800bfbc:	230a      	movne	r3, #10
 800bfbe:	2308      	moveq	r3, #8
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bfc6:	6866      	ldr	r6, [r4, #4]
 800bfc8:	60a6      	str	r6, [r4, #8]
 800bfca:	2e00      	cmp	r6, #0
 800bfcc:	bfa2      	ittt	ge
 800bfce:	6821      	ldrge	r1, [r4, #0]
 800bfd0:	f021 0104 	bicge.w	r1, r1, #4
 800bfd4:	6021      	strge	r1, [r4, #0]
 800bfd6:	b90d      	cbnz	r5, 800bfdc <_printf_i+0x110>
 800bfd8:	2e00      	cmp	r6, #0
 800bfda:	d04b      	beq.n	800c074 <_printf_i+0x1a8>
 800bfdc:	4616      	mov	r6, r2
 800bfde:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfe2:	fb03 5711 	mls	r7, r3, r1, r5
 800bfe6:	5dc7      	ldrb	r7, [r0, r7]
 800bfe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfec:	462f      	mov	r7, r5
 800bfee:	42bb      	cmp	r3, r7
 800bff0:	460d      	mov	r5, r1
 800bff2:	d9f4      	bls.n	800bfde <_printf_i+0x112>
 800bff4:	2b08      	cmp	r3, #8
 800bff6:	d10b      	bne.n	800c010 <_printf_i+0x144>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	07df      	lsls	r7, r3, #31
 800bffc:	d508      	bpl.n	800c010 <_printf_i+0x144>
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	6861      	ldr	r1, [r4, #4]
 800c002:	4299      	cmp	r1, r3
 800c004:	bfde      	ittt	le
 800c006:	2330      	movle	r3, #48	@ 0x30
 800c008:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c00c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c010:	1b92      	subs	r2, r2, r6
 800c012:	6122      	str	r2, [r4, #16]
 800c014:	f8cd a000 	str.w	sl, [sp]
 800c018:	464b      	mov	r3, r9
 800c01a:	aa03      	add	r2, sp, #12
 800c01c:	4621      	mov	r1, r4
 800c01e:	4640      	mov	r0, r8
 800c020:	f7ff fee6 	bl	800bdf0 <_printf_common>
 800c024:	3001      	adds	r0, #1
 800c026:	d14a      	bne.n	800c0be <_printf_i+0x1f2>
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	b004      	add	sp, #16
 800c02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	f043 0320 	orr.w	r3, r3, #32
 800c038:	6023      	str	r3, [r4, #0]
 800c03a:	4833      	ldr	r0, [pc, #204]	@ (800c108 <_printf_i+0x23c>)
 800c03c:	2778      	movs	r7, #120	@ 0x78
 800c03e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c042:	6823      	ldr	r3, [r4, #0]
 800c044:	6831      	ldr	r1, [r6, #0]
 800c046:	061f      	lsls	r7, r3, #24
 800c048:	f851 5b04 	ldr.w	r5, [r1], #4
 800c04c:	d402      	bmi.n	800c054 <_printf_i+0x188>
 800c04e:	065f      	lsls	r7, r3, #25
 800c050:	bf48      	it	mi
 800c052:	b2ad      	uxthmi	r5, r5
 800c054:	6031      	str	r1, [r6, #0]
 800c056:	07d9      	lsls	r1, r3, #31
 800c058:	bf44      	itt	mi
 800c05a:	f043 0320 	orrmi.w	r3, r3, #32
 800c05e:	6023      	strmi	r3, [r4, #0]
 800c060:	b11d      	cbz	r5, 800c06a <_printf_i+0x19e>
 800c062:	2310      	movs	r3, #16
 800c064:	e7ac      	b.n	800bfc0 <_printf_i+0xf4>
 800c066:	4827      	ldr	r0, [pc, #156]	@ (800c104 <_printf_i+0x238>)
 800c068:	e7e9      	b.n	800c03e <_printf_i+0x172>
 800c06a:	6823      	ldr	r3, [r4, #0]
 800c06c:	f023 0320 	bic.w	r3, r3, #32
 800c070:	6023      	str	r3, [r4, #0]
 800c072:	e7f6      	b.n	800c062 <_printf_i+0x196>
 800c074:	4616      	mov	r6, r2
 800c076:	e7bd      	b.n	800bff4 <_printf_i+0x128>
 800c078:	6833      	ldr	r3, [r6, #0]
 800c07a:	6825      	ldr	r5, [r4, #0]
 800c07c:	6961      	ldr	r1, [r4, #20]
 800c07e:	1d18      	adds	r0, r3, #4
 800c080:	6030      	str	r0, [r6, #0]
 800c082:	062e      	lsls	r6, r5, #24
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	d501      	bpl.n	800c08c <_printf_i+0x1c0>
 800c088:	6019      	str	r1, [r3, #0]
 800c08a:	e002      	b.n	800c092 <_printf_i+0x1c6>
 800c08c:	0668      	lsls	r0, r5, #25
 800c08e:	d5fb      	bpl.n	800c088 <_printf_i+0x1bc>
 800c090:	8019      	strh	r1, [r3, #0]
 800c092:	2300      	movs	r3, #0
 800c094:	6123      	str	r3, [r4, #16]
 800c096:	4616      	mov	r6, r2
 800c098:	e7bc      	b.n	800c014 <_printf_i+0x148>
 800c09a:	6833      	ldr	r3, [r6, #0]
 800c09c:	1d1a      	adds	r2, r3, #4
 800c09e:	6032      	str	r2, [r6, #0]
 800c0a0:	681e      	ldr	r6, [r3, #0]
 800c0a2:	6862      	ldr	r2, [r4, #4]
 800c0a4:	2100      	movs	r1, #0
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f7f4 f86a 	bl	8000180 <memchr>
 800c0ac:	b108      	cbz	r0, 800c0b2 <_printf_i+0x1e6>
 800c0ae:	1b80      	subs	r0, r0, r6
 800c0b0:	6060      	str	r0, [r4, #4]
 800c0b2:	6863      	ldr	r3, [r4, #4]
 800c0b4:	6123      	str	r3, [r4, #16]
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0bc:	e7aa      	b.n	800c014 <_printf_i+0x148>
 800c0be:	6923      	ldr	r3, [r4, #16]
 800c0c0:	4632      	mov	r2, r6
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	4640      	mov	r0, r8
 800c0c6:	47d0      	blx	sl
 800c0c8:	3001      	adds	r0, #1
 800c0ca:	d0ad      	beq.n	800c028 <_printf_i+0x15c>
 800c0cc:	6823      	ldr	r3, [r4, #0]
 800c0ce:	079b      	lsls	r3, r3, #30
 800c0d0:	d413      	bmi.n	800c0fa <_printf_i+0x22e>
 800c0d2:	68e0      	ldr	r0, [r4, #12]
 800c0d4:	9b03      	ldr	r3, [sp, #12]
 800c0d6:	4298      	cmp	r0, r3
 800c0d8:	bfb8      	it	lt
 800c0da:	4618      	movlt	r0, r3
 800c0dc:	e7a6      	b.n	800c02c <_printf_i+0x160>
 800c0de:	2301      	movs	r3, #1
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	4649      	mov	r1, r9
 800c0e4:	4640      	mov	r0, r8
 800c0e6:	47d0      	blx	sl
 800c0e8:	3001      	adds	r0, #1
 800c0ea:	d09d      	beq.n	800c028 <_printf_i+0x15c>
 800c0ec:	3501      	adds	r5, #1
 800c0ee:	68e3      	ldr	r3, [r4, #12]
 800c0f0:	9903      	ldr	r1, [sp, #12]
 800c0f2:	1a5b      	subs	r3, r3, r1
 800c0f4:	42ab      	cmp	r3, r5
 800c0f6:	dcf2      	bgt.n	800c0de <_printf_i+0x212>
 800c0f8:	e7eb      	b.n	800c0d2 <_printf_i+0x206>
 800c0fa:	2500      	movs	r5, #0
 800c0fc:	f104 0619 	add.w	r6, r4, #25
 800c100:	e7f5      	b.n	800c0ee <_printf_i+0x222>
 800c102:	bf00      	nop
 800c104:	0800f1ee 	.word	0x0800f1ee
 800c108:	0800f1ff 	.word	0x0800f1ff

0800c10c <std>:
 800c10c:	2300      	movs	r3, #0
 800c10e:	b510      	push	{r4, lr}
 800c110:	4604      	mov	r4, r0
 800c112:	e9c0 3300 	strd	r3, r3, [r0]
 800c116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c11a:	6083      	str	r3, [r0, #8]
 800c11c:	8181      	strh	r1, [r0, #12]
 800c11e:	6643      	str	r3, [r0, #100]	@ 0x64
 800c120:	81c2      	strh	r2, [r0, #14]
 800c122:	6183      	str	r3, [r0, #24]
 800c124:	4619      	mov	r1, r3
 800c126:	2208      	movs	r2, #8
 800c128:	305c      	adds	r0, #92	@ 0x5c
 800c12a:	f000 f948 	bl	800c3be <memset>
 800c12e:	4b0d      	ldr	r3, [pc, #52]	@ (800c164 <std+0x58>)
 800c130:	6263      	str	r3, [r4, #36]	@ 0x24
 800c132:	4b0d      	ldr	r3, [pc, #52]	@ (800c168 <std+0x5c>)
 800c134:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c136:	4b0d      	ldr	r3, [pc, #52]	@ (800c16c <std+0x60>)
 800c138:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c13a:	4b0d      	ldr	r3, [pc, #52]	@ (800c170 <std+0x64>)
 800c13c:	6323      	str	r3, [r4, #48]	@ 0x30
 800c13e:	4b0d      	ldr	r3, [pc, #52]	@ (800c174 <std+0x68>)
 800c140:	6224      	str	r4, [r4, #32]
 800c142:	429c      	cmp	r4, r3
 800c144:	d006      	beq.n	800c154 <std+0x48>
 800c146:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c14a:	4294      	cmp	r4, r2
 800c14c:	d002      	beq.n	800c154 <std+0x48>
 800c14e:	33d0      	adds	r3, #208	@ 0xd0
 800c150:	429c      	cmp	r4, r3
 800c152:	d105      	bne.n	800c160 <std+0x54>
 800c154:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c15c:	f000 b9be 	b.w	800c4dc <__retarget_lock_init_recursive>
 800c160:	bd10      	pop	{r4, pc}
 800c162:	bf00      	nop
 800c164:	0800c339 	.word	0x0800c339
 800c168:	0800c35b 	.word	0x0800c35b
 800c16c:	0800c393 	.word	0x0800c393
 800c170:	0800c3b7 	.word	0x0800c3b7
 800c174:	20000b24 	.word	0x20000b24

0800c178 <stdio_exit_handler>:
 800c178:	4a02      	ldr	r2, [pc, #8]	@ (800c184 <stdio_exit_handler+0xc>)
 800c17a:	4903      	ldr	r1, [pc, #12]	@ (800c188 <stdio_exit_handler+0x10>)
 800c17c:	4803      	ldr	r0, [pc, #12]	@ (800c18c <stdio_exit_handler+0x14>)
 800c17e:	f000 b869 	b.w	800c254 <_fwalk_sglue>
 800c182:	bf00      	nop
 800c184:	2000002c 	.word	0x2000002c
 800c188:	0800de39 	.word	0x0800de39
 800c18c:	2000003c 	.word	0x2000003c

0800c190 <cleanup_stdio>:
 800c190:	6841      	ldr	r1, [r0, #4]
 800c192:	4b0c      	ldr	r3, [pc, #48]	@ (800c1c4 <cleanup_stdio+0x34>)
 800c194:	4299      	cmp	r1, r3
 800c196:	b510      	push	{r4, lr}
 800c198:	4604      	mov	r4, r0
 800c19a:	d001      	beq.n	800c1a0 <cleanup_stdio+0x10>
 800c19c:	f001 fe4c 	bl	800de38 <_fflush_r>
 800c1a0:	68a1      	ldr	r1, [r4, #8]
 800c1a2:	4b09      	ldr	r3, [pc, #36]	@ (800c1c8 <cleanup_stdio+0x38>)
 800c1a4:	4299      	cmp	r1, r3
 800c1a6:	d002      	beq.n	800c1ae <cleanup_stdio+0x1e>
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f001 fe45 	bl	800de38 <_fflush_r>
 800c1ae:	68e1      	ldr	r1, [r4, #12]
 800c1b0:	4b06      	ldr	r3, [pc, #24]	@ (800c1cc <cleanup_stdio+0x3c>)
 800c1b2:	4299      	cmp	r1, r3
 800c1b4:	d004      	beq.n	800c1c0 <cleanup_stdio+0x30>
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1bc:	f001 be3c 	b.w	800de38 <_fflush_r>
 800c1c0:	bd10      	pop	{r4, pc}
 800c1c2:	bf00      	nop
 800c1c4:	20000b24 	.word	0x20000b24
 800c1c8:	20000b8c 	.word	0x20000b8c
 800c1cc:	20000bf4 	.word	0x20000bf4

0800c1d0 <global_stdio_init.part.0>:
 800c1d0:	b510      	push	{r4, lr}
 800c1d2:	4b0b      	ldr	r3, [pc, #44]	@ (800c200 <global_stdio_init.part.0+0x30>)
 800c1d4:	4c0b      	ldr	r4, [pc, #44]	@ (800c204 <global_stdio_init.part.0+0x34>)
 800c1d6:	4a0c      	ldr	r2, [pc, #48]	@ (800c208 <global_stdio_init.part.0+0x38>)
 800c1d8:	601a      	str	r2, [r3, #0]
 800c1da:	4620      	mov	r0, r4
 800c1dc:	2200      	movs	r2, #0
 800c1de:	2104      	movs	r1, #4
 800c1e0:	f7ff ff94 	bl	800c10c <std>
 800c1e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	2109      	movs	r1, #9
 800c1ec:	f7ff ff8e 	bl	800c10c <std>
 800c1f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c1f4:	2202      	movs	r2, #2
 800c1f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c1fa:	2112      	movs	r1, #18
 800c1fc:	f7ff bf86 	b.w	800c10c <std>
 800c200:	20000c5c 	.word	0x20000c5c
 800c204:	20000b24 	.word	0x20000b24
 800c208:	0800c179 	.word	0x0800c179

0800c20c <__sfp_lock_acquire>:
 800c20c:	4801      	ldr	r0, [pc, #4]	@ (800c214 <__sfp_lock_acquire+0x8>)
 800c20e:	f000 b966 	b.w	800c4de <__retarget_lock_acquire_recursive>
 800c212:	bf00      	nop
 800c214:	20000c65 	.word	0x20000c65

0800c218 <__sfp_lock_release>:
 800c218:	4801      	ldr	r0, [pc, #4]	@ (800c220 <__sfp_lock_release+0x8>)
 800c21a:	f000 b961 	b.w	800c4e0 <__retarget_lock_release_recursive>
 800c21e:	bf00      	nop
 800c220:	20000c65 	.word	0x20000c65

0800c224 <__sinit>:
 800c224:	b510      	push	{r4, lr}
 800c226:	4604      	mov	r4, r0
 800c228:	f7ff fff0 	bl	800c20c <__sfp_lock_acquire>
 800c22c:	6a23      	ldr	r3, [r4, #32]
 800c22e:	b11b      	cbz	r3, 800c238 <__sinit+0x14>
 800c230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c234:	f7ff bff0 	b.w	800c218 <__sfp_lock_release>
 800c238:	4b04      	ldr	r3, [pc, #16]	@ (800c24c <__sinit+0x28>)
 800c23a:	6223      	str	r3, [r4, #32]
 800c23c:	4b04      	ldr	r3, [pc, #16]	@ (800c250 <__sinit+0x2c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d1f5      	bne.n	800c230 <__sinit+0xc>
 800c244:	f7ff ffc4 	bl	800c1d0 <global_stdio_init.part.0>
 800c248:	e7f2      	b.n	800c230 <__sinit+0xc>
 800c24a:	bf00      	nop
 800c24c:	0800c191 	.word	0x0800c191
 800c250:	20000c5c 	.word	0x20000c5c

0800c254 <_fwalk_sglue>:
 800c254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c258:	4607      	mov	r7, r0
 800c25a:	4688      	mov	r8, r1
 800c25c:	4614      	mov	r4, r2
 800c25e:	2600      	movs	r6, #0
 800c260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c264:	f1b9 0901 	subs.w	r9, r9, #1
 800c268:	d505      	bpl.n	800c276 <_fwalk_sglue+0x22>
 800c26a:	6824      	ldr	r4, [r4, #0]
 800c26c:	2c00      	cmp	r4, #0
 800c26e:	d1f7      	bne.n	800c260 <_fwalk_sglue+0xc>
 800c270:	4630      	mov	r0, r6
 800c272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c276:	89ab      	ldrh	r3, [r5, #12]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d907      	bls.n	800c28c <_fwalk_sglue+0x38>
 800c27c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c280:	3301      	adds	r3, #1
 800c282:	d003      	beq.n	800c28c <_fwalk_sglue+0x38>
 800c284:	4629      	mov	r1, r5
 800c286:	4638      	mov	r0, r7
 800c288:	47c0      	blx	r8
 800c28a:	4306      	orrs	r6, r0
 800c28c:	3568      	adds	r5, #104	@ 0x68
 800c28e:	e7e9      	b.n	800c264 <_fwalk_sglue+0x10>

0800c290 <sniprintf>:
 800c290:	b40c      	push	{r2, r3}
 800c292:	b530      	push	{r4, r5, lr}
 800c294:	4b17      	ldr	r3, [pc, #92]	@ (800c2f4 <sniprintf+0x64>)
 800c296:	1e0c      	subs	r4, r1, #0
 800c298:	681d      	ldr	r5, [r3, #0]
 800c29a:	b09d      	sub	sp, #116	@ 0x74
 800c29c:	da08      	bge.n	800c2b0 <sniprintf+0x20>
 800c29e:	238b      	movs	r3, #139	@ 0x8b
 800c2a0:	602b      	str	r3, [r5, #0]
 800c2a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c2a6:	b01d      	add	sp, #116	@ 0x74
 800c2a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c2ac:	b002      	add	sp, #8
 800c2ae:	4770      	bx	lr
 800c2b0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c2b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c2b8:	bf14      	ite	ne
 800c2ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c2be:	4623      	moveq	r3, r4
 800c2c0:	9304      	str	r3, [sp, #16]
 800c2c2:	9307      	str	r3, [sp, #28]
 800c2c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c2c8:	9002      	str	r0, [sp, #8]
 800c2ca:	9006      	str	r0, [sp, #24]
 800c2cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c2d0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c2d2:	ab21      	add	r3, sp, #132	@ 0x84
 800c2d4:	a902      	add	r1, sp, #8
 800c2d6:	4628      	mov	r0, r5
 800c2d8:	9301      	str	r3, [sp, #4]
 800c2da:	f001 fc31 	bl	800db40 <_svfiprintf_r>
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	bfbc      	itt	lt
 800c2e2:	238b      	movlt	r3, #139	@ 0x8b
 800c2e4:	602b      	strlt	r3, [r5, #0]
 800c2e6:	2c00      	cmp	r4, #0
 800c2e8:	d0dd      	beq.n	800c2a6 <sniprintf+0x16>
 800c2ea:	9b02      	ldr	r3, [sp, #8]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	701a      	strb	r2, [r3, #0]
 800c2f0:	e7d9      	b.n	800c2a6 <sniprintf+0x16>
 800c2f2:	bf00      	nop
 800c2f4:	20000038 	.word	0x20000038

0800c2f8 <siprintf>:
 800c2f8:	b40e      	push	{r1, r2, r3}
 800c2fa:	b500      	push	{lr}
 800c2fc:	b09c      	sub	sp, #112	@ 0x70
 800c2fe:	ab1d      	add	r3, sp, #116	@ 0x74
 800c300:	9002      	str	r0, [sp, #8]
 800c302:	9006      	str	r0, [sp, #24]
 800c304:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c308:	4809      	ldr	r0, [pc, #36]	@ (800c330 <siprintf+0x38>)
 800c30a:	9107      	str	r1, [sp, #28]
 800c30c:	9104      	str	r1, [sp, #16]
 800c30e:	4909      	ldr	r1, [pc, #36]	@ (800c334 <siprintf+0x3c>)
 800c310:	f853 2b04 	ldr.w	r2, [r3], #4
 800c314:	9105      	str	r1, [sp, #20]
 800c316:	6800      	ldr	r0, [r0, #0]
 800c318:	9301      	str	r3, [sp, #4]
 800c31a:	a902      	add	r1, sp, #8
 800c31c:	f001 fc10 	bl	800db40 <_svfiprintf_r>
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	2200      	movs	r2, #0
 800c324:	701a      	strb	r2, [r3, #0]
 800c326:	b01c      	add	sp, #112	@ 0x70
 800c328:	f85d eb04 	ldr.w	lr, [sp], #4
 800c32c:	b003      	add	sp, #12
 800c32e:	4770      	bx	lr
 800c330:	20000038 	.word	0x20000038
 800c334:	ffff0208 	.word	0xffff0208

0800c338 <__sread>:
 800c338:	b510      	push	{r4, lr}
 800c33a:	460c      	mov	r4, r1
 800c33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c340:	f000 f87e 	bl	800c440 <_read_r>
 800c344:	2800      	cmp	r0, #0
 800c346:	bfab      	itete	ge
 800c348:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c34a:	89a3      	ldrhlt	r3, [r4, #12]
 800c34c:	181b      	addge	r3, r3, r0
 800c34e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c352:	bfac      	ite	ge
 800c354:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c356:	81a3      	strhlt	r3, [r4, #12]
 800c358:	bd10      	pop	{r4, pc}

0800c35a <__swrite>:
 800c35a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c35e:	461f      	mov	r7, r3
 800c360:	898b      	ldrh	r3, [r1, #12]
 800c362:	05db      	lsls	r3, r3, #23
 800c364:	4605      	mov	r5, r0
 800c366:	460c      	mov	r4, r1
 800c368:	4616      	mov	r6, r2
 800c36a:	d505      	bpl.n	800c378 <__swrite+0x1e>
 800c36c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c370:	2302      	movs	r3, #2
 800c372:	2200      	movs	r2, #0
 800c374:	f000 f852 	bl	800c41c <_lseek_r>
 800c378:	89a3      	ldrh	r3, [r4, #12]
 800c37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c37e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c382:	81a3      	strh	r3, [r4, #12]
 800c384:	4632      	mov	r2, r6
 800c386:	463b      	mov	r3, r7
 800c388:	4628      	mov	r0, r5
 800c38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c38e:	f000 b869 	b.w	800c464 <_write_r>

0800c392 <__sseek>:
 800c392:	b510      	push	{r4, lr}
 800c394:	460c      	mov	r4, r1
 800c396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c39a:	f000 f83f 	bl	800c41c <_lseek_r>
 800c39e:	1c43      	adds	r3, r0, #1
 800c3a0:	89a3      	ldrh	r3, [r4, #12]
 800c3a2:	bf15      	itete	ne
 800c3a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c3a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c3aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c3ae:	81a3      	strheq	r3, [r4, #12]
 800c3b0:	bf18      	it	ne
 800c3b2:	81a3      	strhne	r3, [r4, #12]
 800c3b4:	bd10      	pop	{r4, pc}

0800c3b6 <__sclose>:
 800c3b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c3ba:	f000 b81f 	b.w	800c3fc <_close_r>

0800c3be <memset>:
 800c3be:	4402      	add	r2, r0
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d100      	bne.n	800c3c8 <memset+0xa>
 800c3c6:	4770      	bx	lr
 800c3c8:	f803 1b01 	strb.w	r1, [r3], #1
 800c3cc:	e7f9      	b.n	800c3c2 <memset+0x4>

0800c3ce <strncmp>:
 800c3ce:	b510      	push	{r4, lr}
 800c3d0:	b16a      	cbz	r2, 800c3ee <strncmp+0x20>
 800c3d2:	3901      	subs	r1, #1
 800c3d4:	1884      	adds	r4, r0, r2
 800c3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d103      	bne.n	800c3ea <strncmp+0x1c>
 800c3e2:	42a0      	cmp	r0, r4
 800c3e4:	d001      	beq.n	800c3ea <strncmp+0x1c>
 800c3e6:	2a00      	cmp	r2, #0
 800c3e8:	d1f5      	bne.n	800c3d6 <strncmp+0x8>
 800c3ea:	1ad0      	subs	r0, r2, r3
 800c3ec:	bd10      	pop	{r4, pc}
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	e7fc      	b.n	800c3ec <strncmp+0x1e>
	...

0800c3f4 <_localeconv_r>:
 800c3f4:	4800      	ldr	r0, [pc, #0]	@ (800c3f8 <_localeconv_r+0x4>)
 800c3f6:	4770      	bx	lr
 800c3f8:	20000178 	.word	0x20000178

0800c3fc <_close_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4d06      	ldr	r5, [pc, #24]	@ (800c418 <_close_r+0x1c>)
 800c400:	2300      	movs	r3, #0
 800c402:	4604      	mov	r4, r0
 800c404:	4608      	mov	r0, r1
 800c406:	602b      	str	r3, [r5, #0]
 800c408:	f7f7 ff5c 	bl	80042c4 <_close>
 800c40c:	1c43      	adds	r3, r0, #1
 800c40e:	d102      	bne.n	800c416 <_close_r+0x1a>
 800c410:	682b      	ldr	r3, [r5, #0]
 800c412:	b103      	cbz	r3, 800c416 <_close_r+0x1a>
 800c414:	6023      	str	r3, [r4, #0]
 800c416:	bd38      	pop	{r3, r4, r5, pc}
 800c418:	20000c60 	.word	0x20000c60

0800c41c <_lseek_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4d07      	ldr	r5, [pc, #28]	@ (800c43c <_lseek_r+0x20>)
 800c420:	4604      	mov	r4, r0
 800c422:	4608      	mov	r0, r1
 800c424:	4611      	mov	r1, r2
 800c426:	2200      	movs	r2, #0
 800c428:	602a      	str	r2, [r5, #0]
 800c42a:	461a      	mov	r2, r3
 800c42c:	f7f7 ff6e 	bl	800430c <_lseek>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d102      	bne.n	800c43a <_lseek_r+0x1e>
 800c434:	682b      	ldr	r3, [r5, #0]
 800c436:	b103      	cbz	r3, 800c43a <_lseek_r+0x1e>
 800c438:	6023      	str	r3, [r4, #0]
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
 800c43c:	20000c60 	.word	0x20000c60

0800c440 <_read_r>:
 800c440:	b538      	push	{r3, r4, r5, lr}
 800c442:	4d07      	ldr	r5, [pc, #28]	@ (800c460 <_read_r+0x20>)
 800c444:	4604      	mov	r4, r0
 800c446:	4608      	mov	r0, r1
 800c448:	4611      	mov	r1, r2
 800c44a:	2200      	movs	r2, #0
 800c44c:	602a      	str	r2, [r5, #0]
 800c44e:	461a      	mov	r2, r3
 800c450:	f7f7 feff 	bl	8004252 <_read>
 800c454:	1c43      	adds	r3, r0, #1
 800c456:	d102      	bne.n	800c45e <_read_r+0x1e>
 800c458:	682b      	ldr	r3, [r5, #0]
 800c45a:	b103      	cbz	r3, 800c45e <_read_r+0x1e>
 800c45c:	6023      	str	r3, [r4, #0]
 800c45e:	bd38      	pop	{r3, r4, r5, pc}
 800c460:	20000c60 	.word	0x20000c60

0800c464 <_write_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	4d07      	ldr	r5, [pc, #28]	@ (800c484 <_write_r+0x20>)
 800c468:	4604      	mov	r4, r0
 800c46a:	4608      	mov	r0, r1
 800c46c:	4611      	mov	r1, r2
 800c46e:	2200      	movs	r2, #0
 800c470:	602a      	str	r2, [r5, #0]
 800c472:	461a      	mov	r2, r3
 800c474:	f7f7 ff0a 	bl	800428c <_write>
 800c478:	1c43      	adds	r3, r0, #1
 800c47a:	d102      	bne.n	800c482 <_write_r+0x1e>
 800c47c:	682b      	ldr	r3, [r5, #0]
 800c47e:	b103      	cbz	r3, 800c482 <_write_r+0x1e>
 800c480:	6023      	str	r3, [r4, #0]
 800c482:	bd38      	pop	{r3, r4, r5, pc}
 800c484:	20000c60 	.word	0x20000c60

0800c488 <__errno>:
 800c488:	4b01      	ldr	r3, [pc, #4]	@ (800c490 <__errno+0x8>)
 800c48a:	6818      	ldr	r0, [r3, #0]
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	20000038 	.word	0x20000038

0800c494 <__libc_init_array>:
 800c494:	b570      	push	{r4, r5, r6, lr}
 800c496:	4d0d      	ldr	r5, [pc, #52]	@ (800c4cc <__libc_init_array+0x38>)
 800c498:	4c0d      	ldr	r4, [pc, #52]	@ (800c4d0 <__libc_init_array+0x3c>)
 800c49a:	1b64      	subs	r4, r4, r5
 800c49c:	10a4      	asrs	r4, r4, #2
 800c49e:	2600      	movs	r6, #0
 800c4a0:	42a6      	cmp	r6, r4
 800c4a2:	d109      	bne.n	800c4b8 <__libc_init_array+0x24>
 800c4a4:	4d0b      	ldr	r5, [pc, #44]	@ (800c4d4 <__libc_init_array+0x40>)
 800c4a6:	4c0c      	ldr	r4, [pc, #48]	@ (800c4d8 <__libc_init_array+0x44>)
 800c4a8:	f002 f862 	bl	800e570 <_init>
 800c4ac:	1b64      	subs	r4, r4, r5
 800c4ae:	10a4      	asrs	r4, r4, #2
 800c4b0:	2600      	movs	r6, #0
 800c4b2:	42a6      	cmp	r6, r4
 800c4b4:	d105      	bne.n	800c4c2 <__libc_init_array+0x2e>
 800c4b6:	bd70      	pop	{r4, r5, r6, pc}
 800c4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4bc:	4798      	blx	r3
 800c4be:	3601      	adds	r6, #1
 800c4c0:	e7ee      	b.n	800c4a0 <__libc_init_array+0xc>
 800c4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4c6:	4798      	blx	r3
 800c4c8:	3601      	adds	r6, #1
 800c4ca:	e7f2      	b.n	800c4b2 <__libc_init_array+0x1e>
 800c4cc:	0800f558 	.word	0x0800f558
 800c4d0:	0800f558 	.word	0x0800f558
 800c4d4:	0800f558 	.word	0x0800f558
 800c4d8:	0800f55c 	.word	0x0800f55c

0800c4dc <__retarget_lock_init_recursive>:
 800c4dc:	4770      	bx	lr

0800c4de <__retarget_lock_acquire_recursive>:
 800c4de:	4770      	bx	lr

0800c4e0 <__retarget_lock_release_recursive>:
 800c4e0:	4770      	bx	lr

0800c4e2 <quorem>:
 800c4e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e6:	6903      	ldr	r3, [r0, #16]
 800c4e8:	690c      	ldr	r4, [r1, #16]
 800c4ea:	42a3      	cmp	r3, r4
 800c4ec:	4607      	mov	r7, r0
 800c4ee:	db7e      	blt.n	800c5ee <quorem+0x10c>
 800c4f0:	3c01      	subs	r4, #1
 800c4f2:	f101 0814 	add.w	r8, r1, #20
 800c4f6:	00a3      	lsls	r3, r4, #2
 800c4f8:	f100 0514 	add.w	r5, r0, #20
 800c4fc:	9300      	str	r3, [sp, #0]
 800c4fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c502:	9301      	str	r3, [sp, #4]
 800c504:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c508:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c50c:	3301      	adds	r3, #1
 800c50e:	429a      	cmp	r2, r3
 800c510:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c514:	fbb2 f6f3 	udiv	r6, r2, r3
 800c518:	d32e      	bcc.n	800c578 <quorem+0x96>
 800c51a:	f04f 0a00 	mov.w	sl, #0
 800c51e:	46c4      	mov	ip, r8
 800c520:	46ae      	mov	lr, r5
 800c522:	46d3      	mov	fp, sl
 800c524:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c528:	b298      	uxth	r0, r3
 800c52a:	fb06 a000 	mla	r0, r6, r0, sl
 800c52e:	0c02      	lsrs	r2, r0, #16
 800c530:	0c1b      	lsrs	r3, r3, #16
 800c532:	fb06 2303 	mla	r3, r6, r3, r2
 800c536:	f8de 2000 	ldr.w	r2, [lr]
 800c53a:	b280      	uxth	r0, r0
 800c53c:	b292      	uxth	r2, r2
 800c53e:	1a12      	subs	r2, r2, r0
 800c540:	445a      	add	r2, fp
 800c542:	f8de 0000 	ldr.w	r0, [lr]
 800c546:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c550:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c554:	b292      	uxth	r2, r2
 800c556:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c55a:	45e1      	cmp	r9, ip
 800c55c:	f84e 2b04 	str.w	r2, [lr], #4
 800c560:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c564:	d2de      	bcs.n	800c524 <quorem+0x42>
 800c566:	9b00      	ldr	r3, [sp, #0]
 800c568:	58eb      	ldr	r3, [r5, r3]
 800c56a:	b92b      	cbnz	r3, 800c578 <quorem+0x96>
 800c56c:	9b01      	ldr	r3, [sp, #4]
 800c56e:	3b04      	subs	r3, #4
 800c570:	429d      	cmp	r5, r3
 800c572:	461a      	mov	r2, r3
 800c574:	d32f      	bcc.n	800c5d6 <quorem+0xf4>
 800c576:	613c      	str	r4, [r7, #16]
 800c578:	4638      	mov	r0, r7
 800c57a:	f001 f97f 	bl	800d87c <__mcmp>
 800c57e:	2800      	cmp	r0, #0
 800c580:	db25      	blt.n	800c5ce <quorem+0xec>
 800c582:	4629      	mov	r1, r5
 800c584:	2000      	movs	r0, #0
 800c586:	f858 2b04 	ldr.w	r2, [r8], #4
 800c58a:	f8d1 c000 	ldr.w	ip, [r1]
 800c58e:	fa1f fe82 	uxth.w	lr, r2
 800c592:	fa1f f38c 	uxth.w	r3, ip
 800c596:	eba3 030e 	sub.w	r3, r3, lr
 800c59a:	4403      	add	r3, r0
 800c59c:	0c12      	lsrs	r2, r2, #16
 800c59e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c5a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c5a6:	b29b      	uxth	r3, r3
 800c5a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5ac:	45c1      	cmp	r9, r8
 800c5ae:	f841 3b04 	str.w	r3, [r1], #4
 800c5b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c5b6:	d2e6      	bcs.n	800c586 <quorem+0xa4>
 800c5b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5c0:	b922      	cbnz	r2, 800c5cc <quorem+0xea>
 800c5c2:	3b04      	subs	r3, #4
 800c5c4:	429d      	cmp	r5, r3
 800c5c6:	461a      	mov	r2, r3
 800c5c8:	d30b      	bcc.n	800c5e2 <quorem+0x100>
 800c5ca:	613c      	str	r4, [r7, #16]
 800c5cc:	3601      	adds	r6, #1
 800c5ce:	4630      	mov	r0, r6
 800c5d0:	b003      	add	sp, #12
 800c5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5d6:	6812      	ldr	r2, [r2, #0]
 800c5d8:	3b04      	subs	r3, #4
 800c5da:	2a00      	cmp	r2, #0
 800c5dc:	d1cb      	bne.n	800c576 <quorem+0x94>
 800c5de:	3c01      	subs	r4, #1
 800c5e0:	e7c6      	b.n	800c570 <quorem+0x8e>
 800c5e2:	6812      	ldr	r2, [r2, #0]
 800c5e4:	3b04      	subs	r3, #4
 800c5e6:	2a00      	cmp	r2, #0
 800c5e8:	d1ef      	bne.n	800c5ca <quorem+0xe8>
 800c5ea:	3c01      	subs	r4, #1
 800c5ec:	e7ea      	b.n	800c5c4 <quorem+0xe2>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	e7ee      	b.n	800c5d0 <quorem+0xee>
 800c5f2:	0000      	movs	r0, r0
 800c5f4:	0000      	movs	r0, r0
	...

0800c5f8 <_dtoa_r>:
 800c5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5fc:	69c7      	ldr	r7, [r0, #28]
 800c5fe:	b097      	sub	sp, #92	@ 0x5c
 800c600:	4614      	mov	r4, r2
 800c602:	461d      	mov	r5, r3
 800c604:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c608:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800c60a:	4683      	mov	fp, r0
 800c60c:	b97f      	cbnz	r7, 800c62e <_dtoa_r+0x36>
 800c60e:	2010      	movs	r0, #16
 800c610:	f000 fe04 	bl	800d21c <malloc>
 800c614:	4602      	mov	r2, r0
 800c616:	f8cb 001c 	str.w	r0, [fp, #28]
 800c61a:	b920      	cbnz	r0, 800c626 <_dtoa_r+0x2e>
 800c61c:	4ba8      	ldr	r3, [pc, #672]	@ (800c8c0 <_dtoa_r+0x2c8>)
 800c61e:	21ef      	movs	r1, #239	@ 0xef
 800c620:	48a8      	ldr	r0, [pc, #672]	@ (800c8c4 <_dtoa_r+0x2cc>)
 800c622:	f001 fc69 	bl	800def8 <__assert_func>
 800c626:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c62a:	6007      	str	r7, [r0, #0]
 800c62c:	60c7      	str	r7, [r0, #12]
 800c62e:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c632:	6819      	ldr	r1, [r3, #0]
 800c634:	b159      	cbz	r1, 800c64e <_dtoa_r+0x56>
 800c636:	685a      	ldr	r2, [r3, #4]
 800c638:	604a      	str	r2, [r1, #4]
 800c63a:	2301      	movs	r3, #1
 800c63c:	4093      	lsls	r3, r2
 800c63e:	608b      	str	r3, [r1, #8]
 800c640:	4658      	mov	r0, fp
 800c642:	f000 fee1 	bl	800d408 <_Bfree>
 800c646:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c64a:	2200      	movs	r2, #0
 800c64c:	601a      	str	r2, [r3, #0]
 800c64e:	1e2b      	subs	r3, r5, #0
 800c650:	bfb9      	ittee	lt
 800c652:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c656:	9303      	strlt	r3, [sp, #12]
 800c658:	2300      	movge	r3, #0
 800c65a:	6033      	strge	r3, [r6, #0]
 800c65c:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c660:	4b99      	ldr	r3, [pc, #612]	@ (800c8c8 <_dtoa_r+0x2d0>)
 800c662:	bfbc      	itt	lt
 800c664:	2201      	movlt	r2, #1
 800c666:	6032      	strlt	r2, [r6, #0]
 800c668:	ea33 0308 	bics.w	r3, r3, r8
 800c66c:	d112      	bne.n	800c694 <_dtoa_r+0x9c>
 800c66e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c670:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c674:	6013      	str	r3, [r2, #0]
 800c676:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c67a:	4323      	orrs	r3, r4
 800c67c:	f000 8551 	beq.w	800d122 <_dtoa_r+0xb2a>
 800c680:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c682:	f8df a248 	ldr.w	sl, [pc, #584]	@ 800c8cc <_dtoa_r+0x2d4>
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 8553 	beq.w	800d132 <_dtoa_r+0xb3a>
 800c68c:	f10a 0303 	add.w	r3, sl, #3
 800c690:	f000 bd4d 	b.w	800d12e <_dtoa_r+0xb36>
 800c694:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c698:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800c69c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f7f4 f9e8 	bl	8000a78 <__aeabi_dcmpeq>
 800c6a8:	4607      	mov	r7, r0
 800c6aa:	b158      	cbz	r0, 800c6c4 <_dtoa_r+0xcc>
 800c6ac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800c6ae:	2301      	movs	r3, #1
 800c6b0:	6013      	str	r3, [r2, #0]
 800c6b2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c6b4:	b113      	cbz	r3, 800c6bc <_dtoa_r+0xc4>
 800c6b6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c6b8:	4b85      	ldr	r3, [pc, #532]	@ (800c8d0 <_dtoa_r+0x2d8>)
 800c6ba:	6013      	str	r3, [r2, #0]
 800c6bc:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800c8d4 <_dtoa_r+0x2dc>
 800c6c0:	f000 bd37 	b.w	800d132 <_dtoa_r+0xb3a>
 800c6c4:	ab14      	add	r3, sp, #80	@ 0x50
 800c6c6:	9301      	str	r3, [sp, #4]
 800c6c8:	ab15      	add	r3, sp, #84	@ 0x54
 800c6ca:	9300      	str	r3, [sp, #0]
 800c6cc:	4658      	mov	r0, fp
 800c6ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c6d2:	f001 f981 	bl	800d9d8 <__d2b>
 800c6d6:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800c6da:	4681      	mov	r9, r0
 800c6dc:	2e00      	cmp	r6, #0
 800c6de:	d076      	beq.n	800c7ce <_dtoa_r+0x1d6>
 800c6e0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6e2:	9712      	str	r7, [sp, #72]	@ 0x48
 800c6e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c6e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c6ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800c6f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800c6f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	4b76      	ldr	r3, [pc, #472]	@ (800c8d8 <_dtoa_r+0x2e0>)
 800c6fe:	f7f3 fd9b 	bl	8000238 <__aeabi_dsub>
 800c702:	a369      	add	r3, pc, #420	@ (adr r3, 800c8a8 <_dtoa_r+0x2b0>)
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	f7f3 ff4e 	bl	80005a8 <__aeabi_dmul>
 800c70c:	a368      	add	r3, pc, #416	@ (adr r3, 800c8b0 <_dtoa_r+0x2b8>)
 800c70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c712:	f7f3 fd93 	bl	800023c <__adddf3>
 800c716:	4604      	mov	r4, r0
 800c718:	4630      	mov	r0, r6
 800c71a:	460d      	mov	r5, r1
 800c71c:	f7f3 feda 	bl	80004d4 <__aeabi_i2d>
 800c720:	a365      	add	r3, pc, #404	@ (adr r3, 800c8b8 <_dtoa_r+0x2c0>)
 800c722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c726:	f7f3 ff3f 	bl	80005a8 <__aeabi_dmul>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4620      	mov	r0, r4
 800c730:	4629      	mov	r1, r5
 800c732:	f7f3 fd83 	bl	800023c <__adddf3>
 800c736:	4604      	mov	r4, r0
 800c738:	460d      	mov	r5, r1
 800c73a:	f7f4 f9e5 	bl	8000b08 <__aeabi_d2iz>
 800c73e:	2200      	movs	r2, #0
 800c740:	4607      	mov	r7, r0
 800c742:	2300      	movs	r3, #0
 800c744:	4620      	mov	r0, r4
 800c746:	4629      	mov	r1, r5
 800c748:	f7f4 f9a0 	bl	8000a8c <__aeabi_dcmplt>
 800c74c:	b140      	cbz	r0, 800c760 <_dtoa_r+0x168>
 800c74e:	4638      	mov	r0, r7
 800c750:	f7f3 fec0 	bl	80004d4 <__aeabi_i2d>
 800c754:	4622      	mov	r2, r4
 800c756:	462b      	mov	r3, r5
 800c758:	f7f4 f98e 	bl	8000a78 <__aeabi_dcmpeq>
 800c75c:	b900      	cbnz	r0, 800c760 <_dtoa_r+0x168>
 800c75e:	3f01      	subs	r7, #1
 800c760:	2f16      	cmp	r7, #22
 800c762:	d852      	bhi.n	800c80a <_dtoa_r+0x212>
 800c764:	4b5d      	ldr	r3, [pc, #372]	@ (800c8dc <_dtoa_r+0x2e4>)
 800c766:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c772:	f7f4 f98b 	bl	8000a8c <__aeabi_dcmplt>
 800c776:	2800      	cmp	r0, #0
 800c778:	d049      	beq.n	800c80e <_dtoa_r+0x216>
 800c77a:	3f01      	subs	r7, #1
 800c77c:	2300      	movs	r3, #0
 800c77e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c780:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c782:	1b9b      	subs	r3, r3, r6
 800c784:	1e5a      	subs	r2, r3, #1
 800c786:	bf44      	itt	mi
 800c788:	f1c3 0801 	rsbmi	r8, r3, #1
 800c78c:	2300      	movmi	r3, #0
 800c78e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c790:	bf54      	ite	pl
 800c792:	f04f 0800 	movpl.w	r8, #0
 800c796:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800c798:	2f00      	cmp	r7, #0
 800c79a:	db3a      	blt.n	800c812 <_dtoa_r+0x21a>
 800c79c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c79e:	970e      	str	r7, [sp, #56]	@ 0x38
 800c7a0:	443b      	add	r3, r7
 800c7a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c7a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c7aa:	2b09      	cmp	r3, #9
 800c7ac:	d865      	bhi.n	800c87a <_dtoa_r+0x282>
 800c7ae:	2b05      	cmp	r3, #5
 800c7b0:	bfc4      	itt	gt
 800c7b2:	3b04      	subgt	r3, #4
 800c7b4:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800c7b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c7b8:	f1a3 0302 	sub.w	r3, r3, #2
 800c7bc:	bfcc      	ite	gt
 800c7be:	2400      	movgt	r4, #0
 800c7c0:	2401      	movle	r4, #1
 800c7c2:	2b03      	cmp	r3, #3
 800c7c4:	d864      	bhi.n	800c890 <_dtoa_r+0x298>
 800c7c6:	e8df f003 	tbb	[pc, r3]
 800c7ca:	382b      	.short	0x382b
 800c7cc:	5636      	.short	0x5636
 800c7ce:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800c7d2:	441e      	add	r6, r3
 800c7d4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800c7d8:	2b20      	cmp	r3, #32
 800c7da:	bfc1      	itttt	gt
 800c7dc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800c7e0:	fa08 f803 	lslgt.w	r8, r8, r3
 800c7e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800c7e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800c7ec:	bfd6      	itet	le
 800c7ee:	f1c3 0320 	rsble	r3, r3, #32
 800c7f2:	ea48 0003 	orrgt.w	r0, r8, r3
 800c7f6:	fa04 f003 	lslle.w	r0, r4, r3
 800c7fa:	f7f3 fe5b 	bl	80004b4 <__aeabi_ui2d>
 800c7fe:	2201      	movs	r2, #1
 800c800:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800c804:	3e01      	subs	r6, #1
 800c806:	9212      	str	r2, [sp, #72]	@ 0x48
 800c808:	e776      	b.n	800c6f8 <_dtoa_r+0x100>
 800c80a:	2301      	movs	r3, #1
 800c80c:	e7b7      	b.n	800c77e <_dtoa_r+0x186>
 800c80e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c810:	e7b6      	b.n	800c780 <_dtoa_r+0x188>
 800c812:	427b      	negs	r3, r7
 800c814:	930a      	str	r3, [sp, #40]	@ 0x28
 800c816:	2300      	movs	r3, #0
 800c818:	eba8 0807 	sub.w	r8, r8, r7
 800c81c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c81e:	e7c3      	b.n	800c7a8 <_dtoa_r+0x1b0>
 800c820:	2300      	movs	r3, #0
 800c822:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c824:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c826:	2b00      	cmp	r3, #0
 800c828:	dc35      	bgt.n	800c896 <_dtoa_r+0x29e>
 800c82a:	2301      	movs	r3, #1
 800c82c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c830:	461a      	mov	r2, r3
 800c832:	9221      	str	r2, [sp, #132]	@ 0x84
 800c834:	e00b      	b.n	800c84e <_dtoa_r+0x256>
 800c836:	2301      	movs	r3, #1
 800c838:	e7f3      	b.n	800c822 <_dtoa_r+0x22a>
 800c83a:	2300      	movs	r3, #0
 800c83c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c83e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c840:	18fb      	adds	r3, r7, r3
 800c842:	9308      	str	r3, [sp, #32]
 800c844:	3301      	adds	r3, #1
 800c846:	2b01      	cmp	r3, #1
 800c848:	9307      	str	r3, [sp, #28]
 800c84a:	bfb8      	it	lt
 800c84c:	2301      	movlt	r3, #1
 800c84e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c852:	2100      	movs	r1, #0
 800c854:	2204      	movs	r2, #4
 800c856:	f102 0514 	add.w	r5, r2, #20
 800c85a:	429d      	cmp	r5, r3
 800c85c:	d91f      	bls.n	800c89e <_dtoa_r+0x2a6>
 800c85e:	6041      	str	r1, [r0, #4]
 800c860:	4658      	mov	r0, fp
 800c862:	f000 fd91 	bl	800d388 <_Balloc>
 800c866:	4682      	mov	sl, r0
 800c868:	2800      	cmp	r0, #0
 800c86a:	d13b      	bne.n	800c8e4 <_dtoa_r+0x2ec>
 800c86c:	4b1c      	ldr	r3, [pc, #112]	@ (800c8e0 <_dtoa_r+0x2e8>)
 800c86e:	4602      	mov	r2, r0
 800c870:	f240 11af 	movw	r1, #431	@ 0x1af
 800c874:	e6d4      	b.n	800c620 <_dtoa_r+0x28>
 800c876:	2301      	movs	r3, #1
 800c878:	e7e0      	b.n	800c83c <_dtoa_r+0x244>
 800c87a:	2401      	movs	r4, #1
 800c87c:	2300      	movs	r3, #0
 800c87e:	9320      	str	r3, [sp, #128]	@ 0x80
 800c880:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c882:	f04f 33ff 	mov.w	r3, #4294967295
 800c886:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c88a:	2200      	movs	r2, #0
 800c88c:	2312      	movs	r3, #18
 800c88e:	e7d0      	b.n	800c832 <_dtoa_r+0x23a>
 800c890:	2301      	movs	r3, #1
 800c892:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c894:	e7f5      	b.n	800c882 <_dtoa_r+0x28a>
 800c896:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c898:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800c89c:	e7d7      	b.n	800c84e <_dtoa_r+0x256>
 800c89e:	3101      	adds	r1, #1
 800c8a0:	0052      	lsls	r2, r2, #1
 800c8a2:	e7d8      	b.n	800c856 <_dtoa_r+0x25e>
 800c8a4:	f3af 8000 	nop.w
 800c8a8:	636f4361 	.word	0x636f4361
 800c8ac:	3fd287a7 	.word	0x3fd287a7
 800c8b0:	8b60c8b3 	.word	0x8b60c8b3
 800c8b4:	3fc68a28 	.word	0x3fc68a28
 800c8b8:	509f79fb 	.word	0x509f79fb
 800c8bc:	3fd34413 	.word	0x3fd34413
 800c8c0:	0800f21d 	.word	0x0800f21d
 800c8c4:	0800f234 	.word	0x0800f234
 800c8c8:	7ff00000 	.word	0x7ff00000
 800c8cc:	0800f219 	.word	0x0800f219
 800c8d0:	0800f1ed 	.word	0x0800f1ed
 800c8d4:	0800f1ec 	.word	0x0800f1ec
 800c8d8:	3ff80000 	.word	0x3ff80000
 800c8dc:	0800f330 	.word	0x0800f330
 800c8e0:	0800f28c 	.word	0x0800f28c
 800c8e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c8e8:	6018      	str	r0, [r3, #0]
 800c8ea:	9b07      	ldr	r3, [sp, #28]
 800c8ec:	2b0e      	cmp	r3, #14
 800c8ee:	f200 80a4 	bhi.w	800ca3a <_dtoa_r+0x442>
 800c8f2:	2c00      	cmp	r4, #0
 800c8f4:	f000 80a1 	beq.w	800ca3a <_dtoa_r+0x442>
 800c8f8:	2f00      	cmp	r7, #0
 800c8fa:	dd33      	ble.n	800c964 <_dtoa_r+0x36c>
 800c8fc:	4b86      	ldr	r3, [pc, #536]	@ (800cb18 <_dtoa_r+0x520>)
 800c8fe:	f007 020f 	and.w	r2, r7, #15
 800c902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c906:	e9d3 3400 	ldrd	r3, r4, [r3]
 800c90a:	05f8      	lsls	r0, r7, #23
 800c90c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c910:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c914:	d516      	bpl.n	800c944 <_dtoa_r+0x34c>
 800c916:	4b81      	ldr	r3, [pc, #516]	@ (800cb1c <_dtoa_r+0x524>)
 800c918:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c91c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c920:	f7f3 ff6c 	bl	80007fc <__aeabi_ddiv>
 800c924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c928:	f004 040f 	and.w	r4, r4, #15
 800c92c:	2603      	movs	r6, #3
 800c92e:	4d7b      	ldr	r5, [pc, #492]	@ (800cb1c <_dtoa_r+0x524>)
 800c930:	b954      	cbnz	r4, 800c948 <_dtoa_r+0x350>
 800c932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c936:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c93a:	f7f3 ff5f 	bl	80007fc <__aeabi_ddiv>
 800c93e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c942:	e028      	b.n	800c996 <_dtoa_r+0x39e>
 800c944:	2602      	movs	r6, #2
 800c946:	e7f2      	b.n	800c92e <_dtoa_r+0x336>
 800c948:	07e1      	lsls	r1, r4, #31
 800c94a:	d508      	bpl.n	800c95e <_dtoa_r+0x366>
 800c94c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c950:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c954:	f7f3 fe28 	bl	80005a8 <__aeabi_dmul>
 800c958:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c95c:	3601      	adds	r6, #1
 800c95e:	1064      	asrs	r4, r4, #1
 800c960:	3508      	adds	r5, #8
 800c962:	e7e5      	b.n	800c930 <_dtoa_r+0x338>
 800c964:	f000 80d2 	beq.w	800cb0c <_dtoa_r+0x514>
 800c968:	427c      	negs	r4, r7
 800c96a:	4b6b      	ldr	r3, [pc, #428]	@ (800cb18 <_dtoa_r+0x520>)
 800c96c:	4d6b      	ldr	r5, [pc, #428]	@ (800cb1c <_dtoa_r+0x524>)
 800c96e:	f004 020f 	and.w	r2, r4, #15
 800c972:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c97a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c97e:	f7f3 fe13 	bl	80005a8 <__aeabi_dmul>
 800c982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c986:	1124      	asrs	r4, r4, #4
 800c988:	2300      	movs	r3, #0
 800c98a:	2602      	movs	r6, #2
 800c98c:	2c00      	cmp	r4, #0
 800c98e:	f040 80b2 	bne.w	800caf6 <_dtoa_r+0x4fe>
 800c992:	2b00      	cmp	r3, #0
 800c994:	d1d3      	bne.n	800c93e <_dtoa_r+0x346>
 800c996:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c998:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f000 80b7 	beq.w	800cb10 <_dtoa_r+0x518>
 800c9a2:	4b5f      	ldr	r3, [pc, #380]	@ (800cb20 <_dtoa_r+0x528>)
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	4620      	mov	r0, r4
 800c9a8:	4629      	mov	r1, r5
 800c9aa:	f7f4 f86f 	bl	8000a8c <__aeabi_dcmplt>
 800c9ae:	2800      	cmp	r0, #0
 800c9b0:	f000 80ae 	beq.w	800cb10 <_dtoa_r+0x518>
 800c9b4:	9b07      	ldr	r3, [sp, #28]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 80aa 	beq.w	800cb10 <_dtoa_r+0x518>
 800c9bc:	9b08      	ldr	r3, [sp, #32]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	dd37      	ble.n	800ca32 <_dtoa_r+0x43a>
 800c9c2:	1e7b      	subs	r3, r7, #1
 800c9c4:	9304      	str	r3, [sp, #16]
 800c9c6:	4620      	mov	r0, r4
 800c9c8:	4b56      	ldr	r3, [pc, #344]	@ (800cb24 <_dtoa_r+0x52c>)
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	4629      	mov	r1, r5
 800c9ce:	f7f3 fdeb 	bl	80005a8 <__aeabi_dmul>
 800c9d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9d6:	9c08      	ldr	r4, [sp, #32]
 800c9d8:	3601      	adds	r6, #1
 800c9da:	4630      	mov	r0, r6
 800c9dc:	f7f3 fd7a 	bl	80004d4 <__aeabi_i2d>
 800c9e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9e4:	f7f3 fde0 	bl	80005a8 <__aeabi_dmul>
 800c9e8:	4b4f      	ldr	r3, [pc, #316]	@ (800cb28 <_dtoa_r+0x530>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	f7f3 fc26 	bl	800023c <__adddf3>
 800c9f0:	4605      	mov	r5, r0
 800c9f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c9f6:	2c00      	cmp	r4, #0
 800c9f8:	f040 809a 	bne.w	800cb30 <_dtoa_r+0x538>
 800c9fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca00:	4b4a      	ldr	r3, [pc, #296]	@ (800cb2c <_dtoa_r+0x534>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	f7f3 fc18 	bl	8000238 <__aeabi_dsub>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ca10:	462a      	mov	r2, r5
 800ca12:	4633      	mov	r3, r6
 800ca14:	f7f4 f858 	bl	8000ac8 <__aeabi_dcmpgt>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	f040 828e 	bne.w	800cf3a <_dtoa_r+0x942>
 800ca1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ca22:	462a      	mov	r2, r5
 800ca24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ca28:	f7f4 f830 	bl	8000a8c <__aeabi_dcmplt>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	f040 8127 	bne.w	800cc80 <_dtoa_r+0x688>
 800ca32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ca36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ca3a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f2c0 8163 	blt.w	800cd08 <_dtoa_r+0x710>
 800ca42:	2f0e      	cmp	r7, #14
 800ca44:	f300 8160 	bgt.w	800cd08 <_dtoa_r+0x710>
 800ca48:	4b33      	ldr	r3, [pc, #204]	@ (800cb18 <_dtoa_r+0x520>)
 800ca4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ca4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ca52:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ca56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	da03      	bge.n	800ca64 <_dtoa_r+0x46c>
 800ca5c:	9b07      	ldr	r3, [sp, #28]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	f340 8100 	ble.w	800cc64 <_dtoa_r+0x66c>
 800ca64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ca68:	4656      	mov	r6, sl
 800ca6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca6e:	4620      	mov	r0, r4
 800ca70:	4629      	mov	r1, r5
 800ca72:	f7f3 fec3 	bl	80007fc <__aeabi_ddiv>
 800ca76:	f7f4 f847 	bl	8000b08 <__aeabi_d2iz>
 800ca7a:	4680      	mov	r8, r0
 800ca7c:	f7f3 fd2a 	bl	80004d4 <__aeabi_i2d>
 800ca80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca84:	f7f3 fd90 	bl	80005a8 <__aeabi_dmul>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	4629      	mov	r1, r5
 800ca90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ca94:	f7f3 fbd0 	bl	8000238 <__aeabi_dsub>
 800ca98:	f806 4b01 	strb.w	r4, [r6], #1
 800ca9c:	9d07      	ldr	r5, [sp, #28]
 800ca9e:	eba6 040a 	sub.w	r4, r6, sl
 800caa2:	42a5      	cmp	r5, r4
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	f040 8116 	bne.w	800ccd8 <_dtoa_r+0x6e0>
 800caac:	f7f3 fbc6 	bl	800023c <__adddf3>
 800cab0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cab4:	4604      	mov	r4, r0
 800cab6:	460d      	mov	r5, r1
 800cab8:	f7f4 f806 	bl	8000ac8 <__aeabi_dcmpgt>
 800cabc:	2800      	cmp	r0, #0
 800cabe:	f040 80f8 	bne.w	800ccb2 <_dtoa_r+0x6ba>
 800cac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cac6:	4620      	mov	r0, r4
 800cac8:	4629      	mov	r1, r5
 800caca:	f7f3 ffd5 	bl	8000a78 <__aeabi_dcmpeq>
 800cace:	b118      	cbz	r0, 800cad8 <_dtoa_r+0x4e0>
 800cad0:	f018 0f01 	tst.w	r8, #1
 800cad4:	f040 80ed 	bne.w	800ccb2 <_dtoa_r+0x6ba>
 800cad8:	4649      	mov	r1, r9
 800cada:	4658      	mov	r0, fp
 800cadc:	f000 fc94 	bl	800d408 <_Bfree>
 800cae0:	2300      	movs	r3, #0
 800cae2:	7033      	strb	r3, [r6, #0]
 800cae4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800cae6:	3701      	adds	r7, #1
 800cae8:	601f      	str	r7, [r3, #0]
 800caea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800caec:	2b00      	cmp	r3, #0
 800caee:	f000 8320 	beq.w	800d132 <_dtoa_r+0xb3a>
 800caf2:	601e      	str	r6, [r3, #0]
 800caf4:	e31d      	b.n	800d132 <_dtoa_r+0xb3a>
 800caf6:	07e2      	lsls	r2, r4, #31
 800caf8:	d505      	bpl.n	800cb06 <_dtoa_r+0x50e>
 800cafa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cafe:	f7f3 fd53 	bl	80005a8 <__aeabi_dmul>
 800cb02:	3601      	adds	r6, #1
 800cb04:	2301      	movs	r3, #1
 800cb06:	1064      	asrs	r4, r4, #1
 800cb08:	3508      	adds	r5, #8
 800cb0a:	e73f      	b.n	800c98c <_dtoa_r+0x394>
 800cb0c:	2602      	movs	r6, #2
 800cb0e:	e742      	b.n	800c996 <_dtoa_r+0x39e>
 800cb10:	9c07      	ldr	r4, [sp, #28]
 800cb12:	9704      	str	r7, [sp, #16]
 800cb14:	e761      	b.n	800c9da <_dtoa_r+0x3e2>
 800cb16:	bf00      	nop
 800cb18:	0800f330 	.word	0x0800f330
 800cb1c:	0800f308 	.word	0x0800f308
 800cb20:	3ff00000 	.word	0x3ff00000
 800cb24:	40240000 	.word	0x40240000
 800cb28:	401c0000 	.word	0x401c0000
 800cb2c:	40140000 	.word	0x40140000
 800cb30:	4b70      	ldr	r3, [pc, #448]	@ (800ccf4 <_dtoa_r+0x6fc>)
 800cb32:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cb34:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb38:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb3c:	4454      	add	r4, sl
 800cb3e:	2900      	cmp	r1, #0
 800cb40:	d045      	beq.n	800cbce <_dtoa_r+0x5d6>
 800cb42:	496d      	ldr	r1, [pc, #436]	@ (800ccf8 <_dtoa_r+0x700>)
 800cb44:	2000      	movs	r0, #0
 800cb46:	f7f3 fe59 	bl	80007fc <__aeabi_ddiv>
 800cb4a:	4633      	mov	r3, r6
 800cb4c:	462a      	mov	r2, r5
 800cb4e:	f7f3 fb73 	bl	8000238 <__aeabi_dsub>
 800cb52:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cb56:	4656      	mov	r6, sl
 800cb58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb5c:	f7f3 ffd4 	bl	8000b08 <__aeabi_d2iz>
 800cb60:	4605      	mov	r5, r0
 800cb62:	f7f3 fcb7 	bl	80004d4 <__aeabi_i2d>
 800cb66:	4602      	mov	r2, r0
 800cb68:	460b      	mov	r3, r1
 800cb6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb6e:	f7f3 fb63 	bl	8000238 <__aeabi_dsub>
 800cb72:	3530      	adds	r5, #48	@ 0x30
 800cb74:	4602      	mov	r2, r0
 800cb76:	460b      	mov	r3, r1
 800cb78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cb7c:	f806 5b01 	strb.w	r5, [r6], #1
 800cb80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb84:	f7f3 ff82 	bl	8000a8c <__aeabi_dcmplt>
 800cb88:	2800      	cmp	r0, #0
 800cb8a:	d163      	bne.n	800cc54 <_dtoa_r+0x65c>
 800cb8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cb90:	495a      	ldr	r1, [pc, #360]	@ (800ccfc <_dtoa_r+0x704>)
 800cb92:	2000      	movs	r0, #0
 800cb94:	f7f3 fb50 	bl	8000238 <__aeabi_dsub>
 800cb98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cb9c:	f7f3 ff76 	bl	8000a8c <__aeabi_dcmplt>
 800cba0:	2800      	cmp	r0, #0
 800cba2:	f040 8087 	bne.w	800ccb4 <_dtoa_r+0x6bc>
 800cba6:	42a6      	cmp	r6, r4
 800cba8:	f43f af43 	beq.w	800ca32 <_dtoa_r+0x43a>
 800cbac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cbb0:	4b53      	ldr	r3, [pc, #332]	@ (800cd00 <_dtoa_r+0x708>)
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	f7f3 fcf8 	bl	80005a8 <__aeabi_dmul>
 800cbb8:	4b51      	ldr	r3, [pc, #324]	@ (800cd00 <_dtoa_r+0x708>)
 800cbba:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbc4:	f7f3 fcf0 	bl	80005a8 <__aeabi_dmul>
 800cbc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbcc:	e7c4      	b.n	800cb58 <_dtoa_r+0x560>
 800cbce:	4631      	mov	r1, r6
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	f7f3 fce9 	bl	80005a8 <__aeabi_dmul>
 800cbd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cbda:	9413      	str	r4, [sp, #76]	@ 0x4c
 800cbdc:	4656      	mov	r6, sl
 800cbde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbe2:	f7f3 ff91 	bl	8000b08 <__aeabi_d2iz>
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	f7f3 fc74 	bl	80004d4 <__aeabi_i2d>
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cbf4:	f7f3 fb20 	bl	8000238 <__aeabi_dsub>
 800cbf8:	3530      	adds	r5, #48	@ 0x30
 800cbfa:	f806 5b01 	strb.w	r5, [r6], #1
 800cbfe:	4602      	mov	r2, r0
 800cc00:	460b      	mov	r3, r1
 800cc02:	42a6      	cmp	r6, r4
 800cc04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cc08:	f04f 0200 	mov.w	r2, #0
 800cc0c:	d124      	bne.n	800cc58 <_dtoa_r+0x660>
 800cc0e:	4b3a      	ldr	r3, [pc, #232]	@ (800ccf8 <_dtoa_r+0x700>)
 800cc10:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cc14:	f7f3 fb12 	bl	800023c <__adddf3>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc20:	f7f3 ff52 	bl	8000ac8 <__aeabi_dcmpgt>
 800cc24:	2800      	cmp	r0, #0
 800cc26:	d145      	bne.n	800ccb4 <_dtoa_r+0x6bc>
 800cc28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cc2c:	4932      	ldr	r1, [pc, #200]	@ (800ccf8 <_dtoa_r+0x700>)
 800cc2e:	2000      	movs	r0, #0
 800cc30:	f7f3 fb02 	bl	8000238 <__aeabi_dsub>
 800cc34:	4602      	mov	r2, r0
 800cc36:	460b      	mov	r3, r1
 800cc38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc3c:	f7f3 ff26 	bl	8000a8c <__aeabi_dcmplt>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	f43f aef6 	beq.w	800ca32 <_dtoa_r+0x43a>
 800cc46:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800cc48:	1e73      	subs	r3, r6, #1
 800cc4a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cc4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc50:	2b30      	cmp	r3, #48	@ 0x30
 800cc52:	d0f8      	beq.n	800cc46 <_dtoa_r+0x64e>
 800cc54:	9f04      	ldr	r7, [sp, #16]
 800cc56:	e73f      	b.n	800cad8 <_dtoa_r+0x4e0>
 800cc58:	4b29      	ldr	r3, [pc, #164]	@ (800cd00 <_dtoa_r+0x708>)
 800cc5a:	f7f3 fca5 	bl	80005a8 <__aeabi_dmul>
 800cc5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cc62:	e7bc      	b.n	800cbde <_dtoa_r+0x5e6>
 800cc64:	d10c      	bne.n	800cc80 <_dtoa_r+0x688>
 800cc66:	4b27      	ldr	r3, [pc, #156]	@ (800cd04 <_dtoa_r+0x70c>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cc6e:	f7f3 fc9b 	bl	80005a8 <__aeabi_dmul>
 800cc72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc76:	f7f3 ff1d 	bl	8000ab4 <__aeabi_dcmpge>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	f000 815b 	beq.w	800cf36 <_dtoa_r+0x93e>
 800cc80:	2400      	movs	r4, #0
 800cc82:	4625      	mov	r5, r4
 800cc84:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc86:	43db      	mvns	r3, r3
 800cc88:	9304      	str	r3, [sp, #16]
 800cc8a:	4656      	mov	r6, sl
 800cc8c:	2700      	movs	r7, #0
 800cc8e:	4621      	mov	r1, r4
 800cc90:	4658      	mov	r0, fp
 800cc92:	f000 fbb9 	bl	800d408 <_Bfree>
 800cc96:	2d00      	cmp	r5, #0
 800cc98:	d0dc      	beq.n	800cc54 <_dtoa_r+0x65c>
 800cc9a:	b12f      	cbz	r7, 800cca8 <_dtoa_r+0x6b0>
 800cc9c:	42af      	cmp	r7, r5
 800cc9e:	d003      	beq.n	800cca8 <_dtoa_r+0x6b0>
 800cca0:	4639      	mov	r1, r7
 800cca2:	4658      	mov	r0, fp
 800cca4:	f000 fbb0 	bl	800d408 <_Bfree>
 800cca8:	4629      	mov	r1, r5
 800ccaa:	4658      	mov	r0, fp
 800ccac:	f000 fbac 	bl	800d408 <_Bfree>
 800ccb0:	e7d0      	b.n	800cc54 <_dtoa_r+0x65c>
 800ccb2:	9704      	str	r7, [sp, #16]
 800ccb4:	4633      	mov	r3, r6
 800ccb6:	461e      	mov	r6, r3
 800ccb8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccbc:	2a39      	cmp	r2, #57	@ 0x39
 800ccbe:	d107      	bne.n	800ccd0 <_dtoa_r+0x6d8>
 800ccc0:	459a      	cmp	sl, r3
 800ccc2:	d1f8      	bne.n	800ccb6 <_dtoa_r+0x6be>
 800ccc4:	9a04      	ldr	r2, [sp, #16]
 800ccc6:	3201      	adds	r2, #1
 800ccc8:	9204      	str	r2, [sp, #16]
 800ccca:	2230      	movs	r2, #48	@ 0x30
 800cccc:	f88a 2000 	strb.w	r2, [sl]
 800ccd0:	781a      	ldrb	r2, [r3, #0]
 800ccd2:	3201      	adds	r2, #1
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	e7bd      	b.n	800cc54 <_dtoa_r+0x65c>
 800ccd8:	4b09      	ldr	r3, [pc, #36]	@ (800cd00 <_dtoa_r+0x708>)
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f7f3 fc64 	bl	80005a8 <__aeabi_dmul>
 800cce0:	2200      	movs	r2, #0
 800cce2:	2300      	movs	r3, #0
 800cce4:	4604      	mov	r4, r0
 800cce6:	460d      	mov	r5, r1
 800cce8:	f7f3 fec6 	bl	8000a78 <__aeabi_dcmpeq>
 800ccec:	2800      	cmp	r0, #0
 800ccee:	f43f aebc 	beq.w	800ca6a <_dtoa_r+0x472>
 800ccf2:	e6f1      	b.n	800cad8 <_dtoa_r+0x4e0>
 800ccf4:	0800f330 	.word	0x0800f330
 800ccf8:	3fe00000 	.word	0x3fe00000
 800ccfc:	3ff00000 	.word	0x3ff00000
 800cd00:	40240000 	.word	0x40240000
 800cd04:	40140000 	.word	0x40140000
 800cd08:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800cd0a:	2a00      	cmp	r2, #0
 800cd0c:	f000 80db 	beq.w	800cec6 <_dtoa_r+0x8ce>
 800cd10:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cd12:	2a01      	cmp	r2, #1
 800cd14:	f300 80bf 	bgt.w	800ce96 <_dtoa_r+0x89e>
 800cd18:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800cd1a:	2a00      	cmp	r2, #0
 800cd1c:	f000 80b7 	beq.w	800ce8e <_dtoa_r+0x896>
 800cd20:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800cd24:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cd26:	4646      	mov	r6, r8
 800cd28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd2a:	2101      	movs	r1, #1
 800cd2c:	441a      	add	r2, r3
 800cd2e:	4658      	mov	r0, fp
 800cd30:	4498      	add	r8, r3
 800cd32:	9209      	str	r2, [sp, #36]	@ 0x24
 800cd34:	f000 fc1c 	bl	800d570 <__i2b>
 800cd38:	4605      	mov	r5, r0
 800cd3a:	b15e      	cbz	r6, 800cd54 <_dtoa_r+0x75c>
 800cd3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	dd08      	ble.n	800cd54 <_dtoa_r+0x75c>
 800cd42:	42b3      	cmp	r3, r6
 800cd44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cd46:	bfa8      	it	ge
 800cd48:	4633      	movge	r3, r6
 800cd4a:	eba8 0803 	sub.w	r8, r8, r3
 800cd4e:	1af6      	subs	r6, r6, r3
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd56:	b1f3      	cbz	r3, 800cd96 <_dtoa_r+0x79e>
 800cd58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	f000 80b7 	beq.w	800cece <_dtoa_r+0x8d6>
 800cd60:	b18c      	cbz	r4, 800cd86 <_dtoa_r+0x78e>
 800cd62:	4629      	mov	r1, r5
 800cd64:	4622      	mov	r2, r4
 800cd66:	4658      	mov	r0, fp
 800cd68:	f000 fcc2 	bl	800d6f0 <__pow5mult>
 800cd6c:	464a      	mov	r2, r9
 800cd6e:	4601      	mov	r1, r0
 800cd70:	4605      	mov	r5, r0
 800cd72:	4658      	mov	r0, fp
 800cd74:	f000 fc12 	bl	800d59c <__multiply>
 800cd78:	4649      	mov	r1, r9
 800cd7a:	9004      	str	r0, [sp, #16]
 800cd7c:	4658      	mov	r0, fp
 800cd7e:	f000 fb43 	bl	800d408 <_Bfree>
 800cd82:	9b04      	ldr	r3, [sp, #16]
 800cd84:	4699      	mov	r9, r3
 800cd86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd88:	1b1a      	subs	r2, r3, r4
 800cd8a:	d004      	beq.n	800cd96 <_dtoa_r+0x79e>
 800cd8c:	4649      	mov	r1, r9
 800cd8e:	4658      	mov	r0, fp
 800cd90:	f000 fcae 	bl	800d6f0 <__pow5mult>
 800cd94:	4681      	mov	r9, r0
 800cd96:	2101      	movs	r1, #1
 800cd98:	4658      	mov	r0, fp
 800cd9a:	f000 fbe9 	bl	800d570 <__i2b>
 800cd9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cda0:	4604      	mov	r4, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 81c9 	beq.w	800d13a <_dtoa_r+0xb42>
 800cda8:	461a      	mov	r2, r3
 800cdaa:	4601      	mov	r1, r0
 800cdac:	4658      	mov	r0, fp
 800cdae:	f000 fc9f 	bl	800d6f0 <__pow5mult>
 800cdb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cdb4:	2b01      	cmp	r3, #1
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	f300 808f 	bgt.w	800ceda <_dtoa_r+0x8e2>
 800cdbc:	9b02      	ldr	r3, [sp, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	f040 8087 	bne.w	800ced2 <_dtoa_r+0x8da>
 800cdc4:	9b03      	ldr	r3, [sp, #12]
 800cdc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	f040 8083 	bne.w	800ced6 <_dtoa_r+0x8de>
 800cdd0:	9b03      	ldr	r3, [sp, #12]
 800cdd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cdd6:	0d1b      	lsrs	r3, r3, #20
 800cdd8:	051b      	lsls	r3, r3, #20
 800cdda:	b12b      	cbz	r3, 800cde8 <_dtoa_r+0x7f0>
 800cddc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdde:	3301      	adds	r3, #1
 800cde0:	9309      	str	r3, [sp, #36]	@ 0x24
 800cde2:	f108 0801 	add.w	r8, r8, #1
 800cde6:	2301      	movs	r3, #1
 800cde8:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 81aa 	beq.w	800d146 <_dtoa_r+0xb4e>
 800cdf2:	6923      	ldr	r3, [r4, #16]
 800cdf4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cdf8:	6918      	ldr	r0, [r3, #16]
 800cdfa:	f000 fb6d 	bl	800d4d8 <__hi0bits>
 800cdfe:	f1c0 0020 	rsb	r0, r0, #32
 800ce02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce04:	4418      	add	r0, r3
 800ce06:	f010 001f 	ands.w	r0, r0, #31
 800ce0a:	d071      	beq.n	800cef0 <_dtoa_r+0x8f8>
 800ce0c:	f1c0 0320 	rsb	r3, r0, #32
 800ce10:	2b04      	cmp	r3, #4
 800ce12:	dd65      	ble.n	800cee0 <_dtoa_r+0x8e8>
 800ce14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce16:	f1c0 001c 	rsb	r0, r0, #28
 800ce1a:	4403      	add	r3, r0
 800ce1c:	4480      	add	r8, r0
 800ce1e:	4406      	add	r6, r0
 800ce20:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce22:	f1b8 0f00 	cmp.w	r8, #0
 800ce26:	dd05      	ble.n	800ce34 <_dtoa_r+0x83c>
 800ce28:	4649      	mov	r1, r9
 800ce2a:	4642      	mov	r2, r8
 800ce2c:	4658      	mov	r0, fp
 800ce2e:	f000 fcb9 	bl	800d7a4 <__lshift>
 800ce32:	4681      	mov	r9, r0
 800ce34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	dd05      	ble.n	800ce46 <_dtoa_r+0x84e>
 800ce3a:	4621      	mov	r1, r4
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	4658      	mov	r0, fp
 800ce40:	f000 fcb0 	bl	800d7a4 <__lshift>
 800ce44:	4604      	mov	r4, r0
 800ce46:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d053      	beq.n	800cef4 <_dtoa_r+0x8fc>
 800ce4c:	4621      	mov	r1, r4
 800ce4e:	4648      	mov	r0, r9
 800ce50:	f000 fd14 	bl	800d87c <__mcmp>
 800ce54:	2800      	cmp	r0, #0
 800ce56:	da4d      	bge.n	800cef4 <_dtoa_r+0x8fc>
 800ce58:	1e7b      	subs	r3, r7, #1
 800ce5a:	9304      	str	r3, [sp, #16]
 800ce5c:	4649      	mov	r1, r9
 800ce5e:	2300      	movs	r3, #0
 800ce60:	220a      	movs	r2, #10
 800ce62:	4658      	mov	r0, fp
 800ce64:	f000 faf2 	bl	800d44c <__multadd>
 800ce68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ce6a:	4681      	mov	r9, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 816c 	beq.w	800d14a <_dtoa_r+0xb52>
 800ce72:	2300      	movs	r3, #0
 800ce74:	4629      	mov	r1, r5
 800ce76:	220a      	movs	r2, #10
 800ce78:	4658      	mov	r0, fp
 800ce7a:	f000 fae7 	bl	800d44c <__multadd>
 800ce7e:	9b08      	ldr	r3, [sp, #32]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	4605      	mov	r5, r0
 800ce84:	dc61      	bgt.n	800cf4a <_dtoa_r+0x952>
 800ce86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800ce88:	2b02      	cmp	r3, #2
 800ce8a:	dc3b      	bgt.n	800cf04 <_dtoa_r+0x90c>
 800ce8c:	e05d      	b.n	800cf4a <_dtoa_r+0x952>
 800ce8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ce90:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ce94:	e746      	b.n	800cd24 <_dtoa_r+0x72c>
 800ce96:	9b07      	ldr	r3, [sp, #28]
 800ce98:	1e5c      	subs	r4, r3, #1
 800ce9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce9c:	42a3      	cmp	r3, r4
 800ce9e:	bfbf      	itttt	lt
 800cea0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800cea2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800cea4:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800cea6:	1ae3      	sublt	r3, r4, r3
 800cea8:	bfb4      	ite	lt
 800ceaa:	18d2      	addlt	r2, r2, r3
 800ceac:	1b1c      	subge	r4, r3, r4
 800ceae:	9b07      	ldr	r3, [sp, #28]
 800ceb0:	bfbc      	itt	lt
 800ceb2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800ceb4:	2400      	movlt	r4, #0
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	bfb5      	itete	lt
 800ceba:	eba8 0603 	sublt.w	r6, r8, r3
 800cebe:	9b07      	ldrge	r3, [sp, #28]
 800cec0:	2300      	movlt	r3, #0
 800cec2:	4646      	movge	r6, r8
 800cec4:	e730      	b.n	800cd28 <_dtoa_r+0x730>
 800cec6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800cec8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ceca:	4646      	mov	r6, r8
 800cecc:	e735      	b.n	800cd3a <_dtoa_r+0x742>
 800cece:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ced0:	e75c      	b.n	800cd8c <_dtoa_r+0x794>
 800ced2:	2300      	movs	r3, #0
 800ced4:	e788      	b.n	800cde8 <_dtoa_r+0x7f0>
 800ced6:	9b02      	ldr	r3, [sp, #8]
 800ced8:	e786      	b.n	800cde8 <_dtoa_r+0x7f0>
 800ceda:	2300      	movs	r3, #0
 800cedc:	930a      	str	r3, [sp, #40]	@ 0x28
 800cede:	e788      	b.n	800cdf2 <_dtoa_r+0x7fa>
 800cee0:	d09f      	beq.n	800ce22 <_dtoa_r+0x82a>
 800cee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cee4:	331c      	adds	r3, #28
 800cee6:	441a      	add	r2, r3
 800cee8:	4498      	add	r8, r3
 800ceea:	441e      	add	r6, r3
 800ceec:	9209      	str	r2, [sp, #36]	@ 0x24
 800ceee:	e798      	b.n	800ce22 <_dtoa_r+0x82a>
 800cef0:	4603      	mov	r3, r0
 800cef2:	e7f6      	b.n	800cee2 <_dtoa_r+0x8ea>
 800cef4:	9b07      	ldr	r3, [sp, #28]
 800cef6:	9704      	str	r7, [sp, #16]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	dc20      	bgt.n	800cf3e <_dtoa_r+0x946>
 800cefc:	9308      	str	r3, [sp, #32]
 800cefe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cf00:	2b02      	cmp	r3, #2
 800cf02:	dd1e      	ble.n	800cf42 <_dtoa_r+0x94a>
 800cf04:	9b08      	ldr	r3, [sp, #32]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f47f aebc 	bne.w	800cc84 <_dtoa_r+0x68c>
 800cf0c:	4621      	mov	r1, r4
 800cf0e:	2205      	movs	r2, #5
 800cf10:	4658      	mov	r0, fp
 800cf12:	f000 fa9b 	bl	800d44c <__multadd>
 800cf16:	4601      	mov	r1, r0
 800cf18:	4604      	mov	r4, r0
 800cf1a:	4648      	mov	r0, r9
 800cf1c:	f000 fcae 	bl	800d87c <__mcmp>
 800cf20:	2800      	cmp	r0, #0
 800cf22:	f77f aeaf 	ble.w	800cc84 <_dtoa_r+0x68c>
 800cf26:	4656      	mov	r6, sl
 800cf28:	2331      	movs	r3, #49	@ 0x31
 800cf2a:	f806 3b01 	strb.w	r3, [r6], #1
 800cf2e:	9b04      	ldr	r3, [sp, #16]
 800cf30:	3301      	adds	r3, #1
 800cf32:	9304      	str	r3, [sp, #16]
 800cf34:	e6aa      	b.n	800cc8c <_dtoa_r+0x694>
 800cf36:	9c07      	ldr	r4, [sp, #28]
 800cf38:	9704      	str	r7, [sp, #16]
 800cf3a:	4625      	mov	r5, r4
 800cf3c:	e7f3      	b.n	800cf26 <_dtoa_r+0x92e>
 800cf3e:	9b07      	ldr	r3, [sp, #28]
 800cf40:	9308      	str	r3, [sp, #32]
 800cf42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f000 8104 	beq.w	800d152 <_dtoa_r+0xb5a>
 800cf4a:	2e00      	cmp	r6, #0
 800cf4c:	dd05      	ble.n	800cf5a <_dtoa_r+0x962>
 800cf4e:	4629      	mov	r1, r5
 800cf50:	4632      	mov	r2, r6
 800cf52:	4658      	mov	r0, fp
 800cf54:	f000 fc26 	bl	800d7a4 <__lshift>
 800cf58:	4605      	mov	r5, r0
 800cf5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d05a      	beq.n	800d016 <_dtoa_r+0xa1e>
 800cf60:	6869      	ldr	r1, [r5, #4]
 800cf62:	4658      	mov	r0, fp
 800cf64:	f000 fa10 	bl	800d388 <_Balloc>
 800cf68:	4606      	mov	r6, r0
 800cf6a:	b928      	cbnz	r0, 800cf78 <_dtoa_r+0x980>
 800cf6c:	4b84      	ldr	r3, [pc, #528]	@ (800d180 <_dtoa_r+0xb88>)
 800cf6e:	4602      	mov	r2, r0
 800cf70:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf74:	f7ff bb54 	b.w	800c620 <_dtoa_r+0x28>
 800cf78:	692a      	ldr	r2, [r5, #16]
 800cf7a:	3202      	adds	r2, #2
 800cf7c:	0092      	lsls	r2, r2, #2
 800cf7e:	f105 010c 	add.w	r1, r5, #12
 800cf82:	300c      	adds	r0, #12
 800cf84:	f000 ffaa 	bl	800dedc <memcpy>
 800cf88:	2201      	movs	r2, #1
 800cf8a:	4631      	mov	r1, r6
 800cf8c:	4658      	mov	r0, fp
 800cf8e:	f000 fc09 	bl	800d7a4 <__lshift>
 800cf92:	f10a 0301 	add.w	r3, sl, #1
 800cf96:	9307      	str	r3, [sp, #28]
 800cf98:	9b08      	ldr	r3, [sp, #32]
 800cf9a:	4453      	add	r3, sl
 800cf9c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cf9e:	9b02      	ldr	r3, [sp, #8]
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	462f      	mov	r7, r5
 800cfa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800cfa8:	4605      	mov	r5, r0
 800cfaa:	9b07      	ldr	r3, [sp, #28]
 800cfac:	4621      	mov	r1, r4
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	4648      	mov	r0, r9
 800cfb2:	9302      	str	r3, [sp, #8]
 800cfb4:	f7ff fa95 	bl	800c4e2 <quorem>
 800cfb8:	4639      	mov	r1, r7
 800cfba:	9008      	str	r0, [sp, #32]
 800cfbc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800cfc0:	4648      	mov	r0, r9
 800cfc2:	f000 fc5b 	bl	800d87c <__mcmp>
 800cfc6:	462a      	mov	r2, r5
 800cfc8:	9009      	str	r0, [sp, #36]	@ 0x24
 800cfca:	4621      	mov	r1, r4
 800cfcc:	4658      	mov	r0, fp
 800cfce:	f000 fc71 	bl	800d8b4 <__mdiff>
 800cfd2:	68c2      	ldr	r2, [r0, #12]
 800cfd4:	4606      	mov	r6, r0
 800cfd6:	bb02      	cbnz	r2, 800d01a <_dtoa_r+0xa22>
 800cfd8:	4601      	mov	r1, r0
 800cfda:	4648      	mov	r0, r9
 800cfdc:	f000 fc4e 	bl	800d87c <__mcmp>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	4631      	mov	r1, r6
 800cfe4:	4658      	mov	r0, fp
 800cfe6:	920c      	str	r2, [sp, #48]	@ 0x30
 800cfe8:	f000 fa0e 	bl	800d408 <_Bfree>
 800cfec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800cfee:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800cff0:	9e07      	ldr	r6, [sp, #28]
 800cff2:	ea43 0102 	orr.w	r1, r3, r2
 800cff6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cff8:	4319      	orrs	r1, r3
 800cffa:	d110      	bne.n	800d01e <_dtoa_r+0xa26>
 800cffc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d000:	d029      	beq.n	800d056 <_dtoa_r+0xa5e>
 800d002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d004:	2b00      	cmp	r3, #0
 800d006:	dd02      	ble.n	800d00e <_dtoa_r+0xa16>
 800d008:	9b08      	ldr	r3, [sp, #32]
 800d00a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d00e:	9b02      	ldr	r3, [sp, #8]
 800d010:	f883 8000 	strb.w	r8, [r3]
 800d014:	e63b      	b.n	800cc8e <_dtoa_r+0x696>
 800d016:	4628      	mov	r0, r5
 800d018:	e7bb      	b.n	800cf92 <_dtoa_r+0x99a>
 800d01a:	2201      	movs	r2, #1
 800d01c:	e7e1      	b.n	800cfe2 <_dtoa_r+0x9ea>
 800d01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d020:	2b00      	cmp	r3, #0
 800d022:	db04      	blt.n	800d02e <_dtoa_r+0xa36>
 800d024:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800d026:	430b      	orrs	r3, r1
 800d028:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d02a:	430b      	orrs	r3, r1
 800d02c:	d120      	bne.n	800d070 <_dtoa_r+0xa78>
 800d02e:	2a00      	cmp	r2, #0
 800d030:	dded      	ble.n	800d00e <_dtoa_r+0xa16>
 800d032:	4649      	mov	r1, r9
 800d034:	2201      	movs	r2, #1
 800d036:	4658      	mov	r0, fp
 800d038:	f000 fbb4 	bl	800d7a4 <__lshift>
 800d03c:	4621      	mov	r1, r4
 800d03e:	4681      	mov	r9, r0
 800d040:	f000 fc1c 	bl	800d87c <__mcmp>
 800d044:	2800      	cmp	r0, #0
 800d046:	dc03      	bgt.n	800d050 <_dtoa_r+0xa58>
 800d048:	d1e1      	bne.n	800d00e <_dtoa_r+0xa16>
 800d04a:	f018 0f01 	tst.w	r8, #1
 800d04e:	d0de      	beq.n	800d00e <_dtoa_r+0xa16>
 800d050:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d054:	d1d8      	bne.n	800d008 <_dtoa_r+0xa10>
 800d056:	9a02      	ldr	r2, [sp, #8]
 800d058:	2339      	movs	r3, #57	@ 0x39
 800d05a:	7013      	strb	r3, [r2, #0]
 800d05c:	4633      	mov	r3, r6
 800d05e:	461e      	mov	r6, r3
 800d060:	3b01      	subs	r3, #1
 800d062:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d066:	2a39      	cmp	r2, #57	@ 0x39
 800d068:	d052      	beq.n	800d110 <_dtoa_r+0xb18>
 800d06a:	3201      	adds	r2, #1
 800d06c:	701a      	strb	r2, [r3, #0]
 800d06e:	e60e      	b.n	800cc8e <_dtoa_r+0x696>
 800d070:	2a00      	cmp	r2, #0
 800d072:	dd07      	ble.n	800d084 <_dtoa_r+0xa8c>
 800d074:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d078:	d0ed      	beq.n	800d056 <_dtoa_r+0xa5e>
 800d07a:	9a02      	ldr	r2, [sp, #8]
 800d07c:	f108 0301 	add.w	r3, r8, #1
 800d080:	7013      	strb	r3, [r2, #0]
 800d082:	e604      	b.n	800cc8e <_dtoa_r+0x696>
 800d084:	9b07      	ldr	r3, [sp, #28]
 800d086:	9a07      	ldr	r2, [sp, #28]
 800d088:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d08c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d08e:	4293      	cmp	r3, r2
 800d090:	d028      	beq.n	800d0e4 <_dtoa_r+0xaec>
 800d092:	4649      	mov	r1, r9
 800d094:	2300      	movs	r3, #0
 800d096:	220a      	movs	r2, #10
 800d098:	4658      	mov	r0, fp
 800d09a:	f000 f9d7 	bl	800d44c <__multadd>
 800d09e:	42af      	cmp	r7, r5
 800d0a0:	4681      	mov	r9, r0
 800d0a2:	f04f 0300 	mov.w	r3, #0
 800d0a6:	f04f 020a 	mov.w	r2, #10
 800d0aa:	4639      	mov	r1, r7
 800d0ac:	4658      	mov	r0, fp
 800d0ae:	d107      	bne.n	800d0c0 <_dtoa_r+0xac8>
 800d0b0:	f000 f9cc 	bl	800d44c <__multadd>
 800d0b4:	4607      	mov	r7, r0
 800d0b6:	4605      	mov	r5, r0
 800d0b8:	9b07      	ldr	r3, [sp, #28]
 800d0ba:	3301      	adds	r3, #1
 800d0bc:	9307      	str	r3, [sp, #28]
 800d0be:	e774      	b.n	800cfaa <_dtoa_r+0x9b2>
 800d0c0:	f000 f9c4 	bl	800d44c <__multadd>
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	4607      	mov	r7, r0
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	220a      	movs	r2, #10
 800d0cc:	4658      	mov	r0, fp
 800d0ce:	f000 f9bd 	bl	800d44c <__multadd>
 800d0d2:	4605      	mov	r5, r0
 800d0d4:	e7f0      	b.n	800d0b8 <_dtoa_r+0xac0>
 800d0d6:	9b08      	ldr	r3, [sp, #32]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	bfcc      	ite	gt
 800d0dc:	461e      	movgt	r6, r3
 800d0de:	2601      	movle	r6, #1
 800d0e0:	4456      	add	r6, sl
 800d0e2:	2700      	movs	r7, #0
 800d0e4:	4649      	mov	r1, r9
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	4658      	mov	r0, fp
 800d0ea:	f000 fb5b 	bl	800d7a4 <__lshift>
 800d0ee:	4621      	mov	r1, r4
 800d0f0:	4681      	mov	r9, r0
 800d0f2:	f000 fbc3 	bl	800d87c <__mcmp>
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	dcb0      	bgt.n	800d05c <_dtoa_r+0xa64>
 800d0fa:	d102      	bne.n	800d102 <_dtoa_r+0xb0a>
 800d0fc:	f018 0f01 	tst.w	r8, #1
 800d100:	d1ac      	bne.n	800d05c <_dtoa_r+0xa64>
 800d102:	4633      	mov	r3, r6
 800d104:	461e      	mov	r6, r3
 800d106:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d10a:	2a30      	cmp	r2, #48	@ 0x30
 800d10c:	d0fa      	beq.n	800d104 <_dtoa_r+0xb0c>
 800d10e:	e5be      	b.n	800cc8e <_dtoa_r+0x696>
 800d110:	459a      	cmp	sl, r3
 800d112:	d1a4      	bne.n	800d05e <_dtoa_r+0xa66>
 800d114:	9b04      	ldr	r3, [sp, #16]
 800d116:	3301      	adds	r3, #1
 800d118:	9304      	str	r3, [sp, #16]
 800d11a:	2331      	movs	r3, #49	@ 0x31
 800d11c:	f88a 3000 	strb.w	r3, [sl]
 800d120:	e5b5      	b.n	800cc8e <_dtoa_r+0x696>
 800d122:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800d124:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d184 <_dtoa_r+0xb8c>
 800d128:	b11b      	cbz	r3, 800d132 <_dtoa_r+0xb3a>
 800d12a:	f10a 0308 	add.w	r3, sl, #8
 800d12e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d130:	6013      	str	r3, [r2, #0]
 800d132:	4650      	mov	r0, sl
 800d134:	b017      	add	sp, #92	@ 0x5c
 800d136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d13a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d13c:	2b01      	cmp	r3, #1
 800d13e:	f77f ae3d 	ble.w	800cdbc <_dtoa_r+0x7c4>
 800d142:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d144:	930a      	str	r3, [sp, #40]	@ 0x28
 800d146:	2001      	movs	r0, #1
 800d148:	e65b      	b.n	800ce02 <_dtoa_r+0x80a>
 800d14a:	9b08      	ldr	r3, [sp, #32]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	f77f aed6 	ble.w	800cefe <_dtoa_r+0x906>
 800d152:	4656      	mov	r6, sl
 800d154:	4621      	mov	r1, r4
 800d156:	4648      	mov	r0, r9
 800d158:	f7ff f9c3 	bl	800c4e2 <quorem>
 800d15c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d160:	f806 8b01 	strb.w	r8, [r6], #1
 800d164:	9b08      	ldr	r3, [sp, #32]
 800d166:	eba6 020a 	sub.w	r2, r6, sl
 800d16a:	4293      	cmp	r3, r2
 800d16c:	ddb3      	ble.n	800d0d6 <_dtoa_r+0xade>
 800d16e:	4649      	mov	r1, r9
 800d170:	2300      	movs	r3, #0
 800d172:	220a      	movs	r2, #10
 800d174:	4658      	mov	r0, fp
 800d176:	f000 f969 	bl	800d44c <__multadd>
 800d17a:	4681      	mov	r9, r0
 800d17c:	e7ea      	b.n	800d154 <_dtoa_r+0xb5c>
 800d17e:	bf00      	nop
 800d180:	0800f28c 	.word	0x0800f28c
 800d184:	0800f210 	.word	0x0800f210

0800d188 <_free_r>:
 800d188:	b538      	push	{r3, r4, r5, lr}
 800d18a:	4605      	mov	r5, r0
 800d18c:	2900      	cmp	r1, #0
 800d18e:	d041      	beq.n	800d214 <_free_r+0x8c>
 800d190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d194:	1f0c      	subs	r4, r1, #4
 800d196:	2b00      	cmp	r3, #0
 800d198:	bfb8      	it	lt
 800d19a:	18e4      	addlt	r4, r4, r3
 800d19c:	f000 f8e8 	bl	800d370 <__malloc_lock>
 800d1a0:	4a1d      	ldr	r2, [pc, #116]	@ (800d218 <_free_r+0x90>)
 800d1a2:	6813      	ldr	r3, [r2, #0]
 800d1a4:	b933      	cbnz	r3, 800d1b4 <_free_r+0x2c>
 800d1a6:	6063      	str	r3, [r4, #4]
 800d1a8:	6014      	str	r4, [r2, #0]
 800d1aa:	4628      	mov	r0, r5
 800d1ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1b0:	f000 b8e4 	b.w	800d37c <__malloc_unlock>
 800d1b4:	42a3      	cmp	r3, r4
 800d1b6:	d908      	bls.n	800d1ca <_free_r+0x42>
 800d1b8:	6820      	ldr	r0, [r4, #0]
 800d1ba:	1821      	adds	r1, r4, r0
 800d1bc:	428b      	cmp	r3, r1
 800d1be:	bf01      	itttt	eq
 800d1c0:	6819      	ldreq	r1, [r3, #0]
 800d1c2:	685b      	ldreq	r3, [r3, #4]
 800d1c4:	1809      	addeq	r1, r1, r0
 800d1c6:	6021      	streq	r1, [r4, #0]
 800d1c8:	e7ed      	b.n	800d1a6 <_free_r+0x1e>
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	b10b      	cbz	r3, 800d1d4 <_free_r+0x4c>
 800d1d0:	42a3      	cmp	r3, r4
 800d1d2:	d9fa      	bls.n	800d1ca <_free_r+0x42>
 800d1d4:	6811      	ldr	r1, [r2, #0]
 800d1d6:	1850      	adds	r0, r2, r1
 800d1d8:	42a0      	cmp	r0, r4
 800d1da:	d10b      	bne.n	800d1f4 <_free_r+0x6c>
 800d1dc:	6820      	ldr	r0, [r4, #0]
 800d1de:	4401      	add	r1, r0
 800d1e0:	1850      	adds	r0, r2, r1
 800d1e2:	4283      	cmp	r3, r0
 800d1e4:	6011      	str	r1, [r2, #0]
 800d1e6:	d1e0      	bne.n	800d1aa <_free_r+0x22>
 800d1e8:	6818      	ldr	r0, [r3, #0]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	6053      	str	r3, [r2, #4]
 800d1ee:	4408      	add	r0, r1
 800d1f0:	6010      	str	r0, [r2, #0]
 800d1f2:	e7da      	b.n	800d1aa <_free_r+0x22>
 800d1f4:	d902      	bls.n	800d1fc <_free_r+0x74>
 800d1f6:	230c      	movs	r3, #12
 800d1f8:	602b      	str	r3, [r5, #0]
 800d1fa:	e7d6      	b.n	800d1aa <_free_r+0x22>
 800d1fc:	6820      	ldr	r0, [r4, #0]
 800d1fe:	1821      	adds	r1, r4, r0
 800d200:	428b      	cmp	r3, r1
 800d202:	bf04      	itt	eq
 800d204:	6819      	ldreq	r1, [r3, #0]
 800d206:	685b      	ldreq	r3, [r3, #4]
 800d208:	6063      	str	r3, [r4, #4]
 800d20a:	bf04      	itt	eq
 800d20c:	1809      	addeq	r1, r1, r0
 800d20e:	6021      	streq	r1, [r4, #0]
 800d210:	6054      	str	r4, [r2, #4]
 800d212:	e7ca      	b.n	800d1aa <_free_r+0x22>
 800d214:	bd38      	pop	{r3, r4, r5, pc}
 800d216:	bf00      	nop
 800d218:	20000c6c 	.word	0x20000c6c

0800d21c <malloc>:
 800d21c:	4b02      	ldr	r3, [pc, #8]	@ (800d228 <malloc+0xc>)
 800d21e:	4601      	mov	r1, r0
 800d220:	6818      	ldr	r0, [r3, #0]
 800d222:	f000 b825 	b.w	800d270 <_malloc_r>
 800d226:	bf00      	nop
 800d228:	20000038 	.word	0x20000038

0800d22c <sbrk_aligned>:
 800d22c:	b570      	push	{r4, r5, r6, lr}
 800d22e:	4e0f      	ldr	r6, [pc, #60]	@ (800d26c <sbrk_aligned+0x40>)
 800d230:	460c      	mov	r4, r1
 800d232:	6831      	ldr	r1, [r6, #0]
 800d234:	4605      	mov	r5, r0
 800d236:	b911      	cbnz	r1, 800d23e <sbrk_aligned+0x12>
 800d238:	f000 fe40 	bl	800debc <_sbrk_r>
 800d23c:	6030      	str	r0, [r6, #0]
 800d23e:	4621      	mov	r1, r4
 800d240:	4628      	mov	r0, r5
 800d242:	f000 fe3b 	bl	800debc <_sbrk_r>
 800d246:	1c43      	adds	r3, r0, #1
 800d248:	d103      	bne.n	800d252 <sbrk_aligned+0x26>
 800d24a:	f04f 34ff 	mov.w	r4, #4294967295
 800d24e:	4620      	mov	r0, r4
 800d250:	bd70      	pop	{r4, r5, r6, pc}
 800d252:	1cc4      	adds	r4, r0, #3
 800d254:	f024 0403 	bic.w	r4, r4, #3
 800d258:	42a0      	cmp	r0, r4
 800d25a:	d0f8      	beq.n	800d24e <sbrk_aligned+0x22>
 800d25c:	1a21      	subs	r1, r4, r0
 800d25e:	4628      	mov	r0, r5
 800d260:	f000 fe2c 	bl	800debc <_sbrk_r>
 800d264:	3001      	adds	r0, #1
 800d266:	d1f2      	bne.n	800d24e <sbrk_aligned+0x22>
 800d268:	e7ef      	b.n	800d24a <sbrk_aligned+0x1e>
 800d26a:	bf00      	nop
 800d26c:	20000c68 	.word	0x20000c68

0800d270 <_malloc_r>:
 800d270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d274:	1ccd      	adds	r5, r1, #3
 800d276:	f025 0503 	bic.w	r5, r5, #3
 800d27a:	3508      	adds	r5, #8
 800d27c:	2d0c      	cmp	r5, #12
 800d27e:	bf38      	it	cc
 800d280:	250c      	movcc	r5, #12
 800d282:	2d00      	cmp	r5, #0
 800d284:	4606      	mov	r6, r0
 800d286:	db01      	blt.n	800d28c <_malloc_r+0x1c>
 800d288:	42a9      	cmp	r1, r5
 800d28a:	d904      	bls.n	800d296 <_malloc_r+0x26>
 800d28c:	230c      	movs	r3, #12
 800d28e:	6033      	str	r3, [r6, #0]
 800d290:	2000      	movs	r0, #0
 800d292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d296:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d36c <_malloc_r+0xfc>
 800d29a:	f000 f869 	bl	800d370 <__malloc_lock>
 800d29e:	f8d8 3000 	ldr.w	r3, [r8]
 800d2a2:	461c      	mov	r4, r3
 800d2a4:	bb44      	cbnz	r4, 800d2f8 <_malloc_r+0x88>
 800d2a6:	4629      	mov	r1, r5
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	f7ff ffbf 	bl	800d22c <sbrk_aligned>
 800d2ae:	1c43      	adds	r3, r0, #1
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	d158      	bne.n	800d366 <_malloc_r+0xf6>
 800d2b4:	f8d8 4000 	ldr.w	r4, [r8]
 800d2b8:	4627      	mov	r7, r4
 800d2ba:	2f00      	cmp	r7, #0
 800d2bc:	d143      	bne.n	800d346 <_malloc_r+0xd6>
 800d2be:	2c00      	cmp	r4, #0
 800d2c0:	d04b      	beq.n	800d35a <_malloc_r+0xea>
 800d2c2:	6823      	ldr	r3, [r4, #0]
 800d2c4:	4639      	mov	r1, r7
 800d2c6:	4630      	mov	r0, r6
 800d2c8:	eb04 0903 	add.w	r9, r4, r3
 800d2cc:	f000 fdf6 	bl	800debc <_sbrk_r>
 800d2d0:	4581      	cmp	r9, r0
 800d2d2:	d142      	bne.n	800d35a <_malloc_r+0xea>
 800d2d4:	6821      	ldr	r1, [r4, #0]
 800d2d6:	1a6d      	subs	r5, r5, r1
 800d2d8:	4629      	mov	r1, r5
 800d2da:	4630      	mov	r0, r6
 800d2dc:	f7ff ffa6 	bl	800d22c <sbrk_aligned>
 800d2e0:	3001      	adds	r0, #1
 800d2e2:	d03a      	beq.n	800d35a <_malloc_r+0xea>
 800d2e4:	6823      	ldr	r3, [r4, #0]
 800d2e6:	442b      	add	r3, r5
 800d2e8:	6023      	str	r3, [r4, #0]
 800d2ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d2ee:	685a      	ldr	r2, [r3, #4]
 800d2f0:	bb62      	cbnz	r2, 800d34c <_malloc_r+0xdc>
 800d2f2:	f8c8 7000 	str.w	r7, [r8]
 800d2f6:	e00f      	b.n	800d318 <_malloc_r+0xa8>
 800d2f8:	6822      	ldr	r2, [r4, #0]
 800d2fa:	1b52      	subs	r2, r2, r5
 800d2fc:	d420      	bmi.n	800d340 <_malloc_r+0xd0>
 800d2fe:	2a0b      	cmp	r2, #11
 800d300:	d917      	bls.n	800d332 <_malloc_r+0xc2>
 800d302:	1961      	adds	r1, r4, r5
 800d304:	42a3      	cmp	r3, r4
 800d306:	6025      	str	r5, [r4, #0]
 800d308:	bf18      	it	ne
 800d30a:	6059      	strne	r1, [r3, #4]
 800d30c:	6863      	ldr	r3, [r4, #4]
 800d30e:	bf08      	it	eq
 800d310:	f8c8 1000 	streq.w	r1, [r8]
 800d314:	5162      	str	r2, [r4, r5]
 800d316:	604b      	str	r3, [r1, #4]
 800d318:	4630      	mov	r0, r6
 800d31a:	f000 f82f 	bl	800d37c <__malloc_unlock>
 800d31e:	f104 000b 	add.w	r0, r4, #11
 800d322:	1d23      	adds	r3, r4, #4
 800d324:	f020 0007 	bic.w	r0, r0, #7
 800d328:	1ac2      	subs	r2, r0, r3
 800d32a:	bf1c      	itt	ne
 800d32c:	1a1b      	subne	r3, r3, r0
 800d32e:	50a3      	strne	r3, [r4, r2]
 800d330:	e7af      	b.n	800d292 <_malloc_r+0x22>
 800d332:	6862      	ldr	r2, [r4, #4]
 800d334:	42a3      	cmp	r3, r4
 800d336:	bf0c      	ite	eq
 800d338:	f8c8 2000 	streq.w	r2, [r8]
 800d33c:	605a      	strne	r2, [r3, #4]
 800d33e:	e7eb      	b.n	800d318 <_malloc_r+0xa8>
 800d340:	4623      	mov	r3, r4
 800d342:	6864      	ldr	r4, [r4, #4]
 800d344:	e7ae      	b.n	800d2a4 <_malloc_r+0x34>
 800d346:	463c      	mov	r4, r7
 800d348:	687f      	ldr	r7, [r7, #4]
 800d34a:	e7b6      	b.n	800d2ba <_malloc_r+0x4a>
 800d34c:	461a      	mov	r2, r3
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	42a3      	cmp	r3, r4
 800d352:	d1fb      	bne.n	800d34c <_malloc_r+0xdc>
 800d354:	2300      	movs	r3, #0
 800d356:	6053      	str	r3, [r2, #4]
 800d358:	e7de      	b.n	800d318 <_malloc_r+0xa8>
 800d35a:	230c      	movs	r3, #12
 800d35c:	6033      	str	r3, [r6, #0]
 800d35e:	4630      	mov	r0, r6
 800d360:	f000 f80c 	bl	800d37c <__malloc_unlock>
 800d364:	e794      	b.n	800d290 <_malloc_r+0x20>
 800d366:	6005      	str	r5, [r0, #0]
 800d368:	e7d6      	b.n	800d318 <_malloc_r+0xa8>
 800d36a:	bf00      	nop
 800d36c:	20000c6c 	.word	0x20000c6c

0800d370 <__malloc_lock>:
 800d370:	4801      	ldr	r0, [pc, #4]	@ (800d378 <__malloc_lock+0x8>)
 800d372:	f7ff b8b4 	b.w	800c4de <__retarget_lock_acquire_recursive>
 800d376:	bf00      	nop
 800d378:	20000c64 	.word	0x20000c64

0800d37c <__malloc_unlock>:
 800d37c:	4801      	ldr	r0, [pc, #4]	@ (800d384 <__malloc_unlock+0x8>)
 800d37e:	f7ff b8af 	b.w	800c4e0 <__retarget_lock_release_recursive>
 800d382:	bf00      	nop
 800d384:	20000c64 	.word	0x20000c64

0800d388 <_Balloc>:
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	69c6      	ldr	r6, [r0, #28]
 800d38c:	4604      	mov	r4, r0
 800d38e:	460d      	mov	r5, r1
 800d390:	b976      	cbnz	r6, 800d3b0 <_Balloc+0x28>
 800d392:	2010      	movs	r0, #16
 800d394:	f7ff ff42 	bl	800d21c <malloc>
 800d398:	4602      	mov	r2, r0
 800d39a:	61e0      	str	r0, [r4, #28]
 800d39c:	b920      	cbnz	r0, 800d3a8 <_Balloc+0x20>
 800d39e:	4b18      	ldr	r3, [pc, #96]	@ (800d400 <_Balloc+0x78>)
 800d3a0:	4818      	ldr	r0, [pc, #96]	@ (800d404 <_Balloc+0x7c>)
 800d3a2:	216b      	movs	r1, #107	@ 0x6b
 800d3a4:	f000 fda8 	bl	800def8 <__assert_func>
 800d3a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3ac:	6006      	str	r6, [r0, #0]
 800d3ae:	60c6      	str	r6, [r0, #12]
 800d3b0:	69e6      	ldr	r6, [r4, #28]
 800d3b2:	68f3      	ldr	r3, [r6, #12]
 800d3b4:	b183      	cbz	r3, 800d3d8 <_Balloc+0x50>
 800d3b6:	69e3      	ldr	r3, [r4, #28]
 800d3b8:	68db      	ldr	r3, [r3, #12]
 800d3ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3be:	b9b8      	cbnz	r0, 800d3f0 <_Balloc+0x68>
 800d3c0:	2101      	movs	r1, #1
 800d3c2:	fa01 f605 	lsl.w	r6, r1, r5
 800d3c6:	1d72      	adds	r2, r6, #5
 800d3c8:	0092      	lsls	r2, r2, #2
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f000 fdb2 	bl	800df34 <_calloc_r>
 800d3d0:	b160      	cbz	r0, 800d3ec <_Balloc+0x64>
 800d3d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3d6:	e00e      	b.n	800d3f6 <_Balloc+0x6e>
 800d3d8:	2221      	movs	r2, #33	@ 0x21
 800d3da:	2104      	movs	r1, #4
 800d3dc:	4620      	mov	r0, r4
 800d3de:	f000 fda9 	bl	800df34 <_calloc_r>
 800d3e2:	69e3      	ldr	r3, [r4, #28]
 800d3e4:	60f0      	str	r0, [r6, #12]
 800d3e6:	68db      	ldr	r3, [r3, #12]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1e4      	bne.n	800d3b6 <_Balloc+0x2e>
 800d3ec:	2000      	movs	r0, #0
 800d3ee:	bd70      	pop	{r4, r5, r6, pc}
 800d3f0:	6802      	ldr	r2, [r0, #0]
 800d3f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3fc:	e7f7      	b.n	800d3ee <_Balloc+0x66>
 800d3fe:	bf00      	nop
 800d400:	0800f21d 	.word	0x0800f21d
 800d404:	0800f29d 	.word	0x0800f29d

0800d408 <_Bfree>:
 800d408:	b570      	push	{r4, r5, r6, lr}
 800d40a:	69c6      	ldr	r6, [r0, #28]
 800d40c:	4605      	mov	r5, r0
 800d40e:	460c      	mov	r4, r1
 800d410:	b976      	cbnz	r6, 800d430 <_Bfree+0x28>
 800d412:	2010      	movs	r0, #16
 800d414:	f7ff ff02 	bl	800d21c <malloc>
 800d418:	4602      	mov	r2, r0
 800d41a:	61e8      	str	r0, [r5, #28]
 800d41c:	b920      	cbnz	r0, 800d428 <_Bfree+0x20>
 800d41e:	4b09      	ldr	r3, [pc, #36]	@ (800d444 <_Bfree+0x3c>)
 800d420:	4809      	ldr	r0, [pc, #36]	@ (800d448 <_Bfree+0x40>)
 800d422:	218f      	movs	r1, #143	@ 0x8f
 800d424:	f000 fd68 	bl	800def8 <__assert_func>
 800d428:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d42c:	6006      	str	r6, [r0, #0]
 800d42e:	60c6      	str	r6, [r0, #12]
 800d430:	b13c      	cbz	r4, 800d442 <_Bfree+0x3a>
 800d432:	69eb      	ldr	r3, [r5, #28]
 800d434:	6862      	ldr	r2, [r4, #4]
 800d436:	68db      	ldr	r3, [r3, #12]
 800d438:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d43c:	6021      	str	r1, [r4, #0]
 800d43e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d442:	bd70      	pop	{r4, r5, r6, pc}
 800d444:	0800f21d 	.word	0x0800f21d
 800d448:	0800f29d 	.word	0x0800f29d

0800d44c <__multadd>:
 800d44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d450:	690d      	ldr	r5, [r1, #16]
 800d452:	4607      	mov	r7, r0
 800d454:	460c      	mov	r4, r1
 800d456:	461e      	mov	r6, r3
 800d458:	f101 0c14 	add.w	ip, r1, #20
 800d45c:	2000      	movs	r0, #0
 800d45e:	f8dc 3000 	ldr.w	r3, [ip]
 800d462:	b299      	uxth	r1, r3
 800d464:	fb02 6101 	mla	r1, r2, r1, r6
 800d468:	0c1e      	lsrs	r6, r3, #16
 800d46a:	0c0b      	lsrs	r3, r1, #16
 800d46c:	fb02 3306 	mla	r3, r2, r6, r3
 800d470:	b289      	uxth	r1, r1
 800d472:	3001      	adds	r0, #1
 800d474:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d478:	4285      	cmp	r5, r0
 800d47a:	f84c 1b04 	str.w	r1, [ip], #4
 800d47e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d482:	dcec      	bgt.n	800d45e <__multadd+0x12>
 800d484:	b30e      	cbz	r6, 800d4ca <__multadd+0x7e>
 800d486:	68a3      	ldr	r3, [r4, #8]
 800d488:	42ab      	cmp	r3, r5
 800d48a:	dc19      	bgt.n	800d4c0 <__multadd+0x74>
 800d48c:	6861      	ldr	r1, [r4, #4]
 800d48e:	4638      	mov	r0, r7
 800d490:	3101      	adds	r1, #1
 800d492:	f7ff ff79 	bl	800d388 <_Balloc>
 800d496:	4680      	mov	r8, r0
 800d498:	b928      	cbnz	r0, 800d4a6 <__multadd+0x5a>
 800d49a:	4602      	mov	r2, r0
 800d49c:	4b0c      	ldr	r3, [pc, #48]	@ (800d4d0 <__multadd+0x84>)
 800d49e:	480d      	ldr	r0, [pc, #52]	@ (800d4d4 <__multadd+0x88>)
 800d4a0:	21ba      	movs	r1, #186	@ 0xba
 800d4a2:	f000 fd29 	bl	800def8 <__assert_func>
 800d4a6:	6922      	ldr	r2, [r4, #16]
 800d4a8:	3202      	adds	r2, #2
 800d4aa:	f104 010c 	add.w	r1, r4, #12
 800d4ae:	0092      	lsls	r2, r2, #2
 800d4b0:	300c      	adds	r0, #12
 800d4b2:	f000 fd13 	bl	800dedc <memcpy>
 800d4b6:	4621      	mov	r1, r4
 800d4b8:	4638      	mov	r0, r7
 800d4ba:	f7ff ffa5 	bl	800d408 <_Bfree>
 800d4be:	4644      	mov	r4, r8
 800d4c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4c4:	3501      	adds	r5, #1
 800d4c6:	615e      	str	r6, [r3, #20]
 800d4c8:	6125      	str	r5, [r4, #16]
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4d0:	0800f28c 	.word	0x0800f28c
 800d4d4:	0800f29d 	.word	0x0800f29d

0800d4d8 <__hi0bits>:
 800d4d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d4dc:	4603      	mov	r3, r0
 800d4de:	bf36      	itet	cc
 800d4e0:	0403      	lslcc	r3, r0, #16
 800d4e2:	2000      	movcs	r0, #0
 800d4e4:	2010      	movcc	r0, #16
 800d4e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d4ea:	bf3c      	itt	cc
 800d4ec:	021b      	lslcc	r3, r3, #8
 800d4ee:	3008      	addcc	r0, #8
 800d4f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4f4:	bf3c      	itt	cc
 800d4f6:	011b      	lslcc	r3, r3, #4
 800d4f8:	3004      	addcc	r0, #4
 800d4fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d4fe:	bf3c      	itt	cc
 800d500:	009b      	lslcc	r3, r3, #2
 800d502:	3002      	addcc	r0, #2
 800d504:	2b00      	cmp	r3, #0
 800d506:	db05      	blt.n	800d514 <__hi0bits+0x3c>
 800d508:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d50c:	f100 0001 	add.w	r0, r0, #1
 800d510:	bf08      	it	eq
 800d512:	2020      	moveq	r0, #32
 800d514:	4770      	bx	lr

0800d516 <__lo0bits>:
 800d516:	6803      	ldr	r3, [r0, #0]
 800d518:	4602      	mov	r2, r0
 800d51a:	f013 0007 	ands.w	r0, r3, #7
 800d51e:	d00b      	beq.n	800d538 <__lo0bits+0x22>
 800d520:	07d9      	lsls	r1, r3, #31
 800d522:	d421      	bmi.n	800d568 <__lo0bits+0x52>
 800d524:	0798      	lsls	r0, r3, #30
 800d526:	bf49      	itett	mi
 800d528:	085b      	lsrmi	r3, r3, #1
 800d52a:	089b      	lsrpl	r3, r3, #2
 800d52c:	2001      	movmi	r0, #1
 800d52e:	6013      	strmi	r3, [r2, #0]
 800d530:	bf5c      	itt	pl
 800d532:	6013      	strpl	r3, [r2, #0]
 800d534:	2002      	movpl	r0, #2
 800d536:	4770      	bx	lr
 800d538:	b299      	uxth	r1, r3
 800d53a:	b909      	cbnz	r1, 800d540 <__lo0bits+0x2a>
 800d53c:	0c1b      	lsrs	r3, r3, #16
 800d53e:	2010      	movs	r0, #16
 800d540:	b2d9      	uxtb	r1, r3
 800d542:	b909      	cbnz	r1, 800d548 <__lo0bits+0x32>
 800d544:	3008      	adds	r0, #8
 800d546:	0a1b      	lsrs	r3, r3, #8
 800d548:	0719      	lsls	r1, r3, #28
 800d54a:	bf04      	itt	eq
 800d54c:	091b      	lsreq	r3, r3, #4
 800d54e:	3004      	addeq	r0, #4
 800d550:	0799      	lsls	r1, r3, #30
 800d552:	bf04      	itt	eq
 800d554:	089b      	lsreq	r3, r3, #2
 800d556:	3002      	addeq	r0, #2
 800d558:	07d9      	lsls	r1, r3, #31
 800d55a:	d403      	bmi.n	800d564 <__lo0bits+0x4e>
 800d55c:	085b      	lsrs	r3, r3, #1
 800d55e:	f100 0001 	add.w	r0, r0, #1
 800d562:	d003      	beq.n	800d56c <__lo0bits+0x56>
 800d564:	6013      	str	r3, [r2, #0]
 800d566:	4770      	bx	lr
 800d568:	2000      	movs	r0, #0
 800d56a:	4770      	bx	lr
 800d56c:	2020      	movs	r0, #32
 800d56e:	4770      	bx	lr

0800d570 <__i2b>:
 800d570:	b510      	push	{r4, lr}
 800d572:	460c      	mov	r4, r1
 800d574:	2101      	movs	r1, #1
 800d576:	f7ff ff07 	bl	800d388 <_Balloc>
 800d57a:	4602      	mov	r2, r0
 800d57c:	b928      	cbnz	r0, 800d58a <__i2b+0x1a>
 800d57e:	4b05      	ldr	r3, [pc, #20]	@ (800d594 <__i2b+0x24>)
 800d580:	4805      	ldr	r0, [pc, #20]	@ (800d598 <__i2b+0x28>)
 800d582:	f240 1145 	movw	r1, #325	@ 0x145
 800d586:	f000 fcb7 	bl	800def8 <__assert_func>
 800d58a:	2301      	movs	r3, #1
 800d58c:	6144      	str	r4, [r0, #20]
 800d58e:	6103      	str	r3, [r0, #16]
 800d590:	bd10      	pop	{r4, pc}
 800d592:	bf00      	nop
 800d594:	0800f28c 	.word	0x0800f28c
 800d598:	0800f29d 	.word	0x0800f29d

0800d59c <__multiply>:
 800d59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5a0:	4614      	mov	r4, r2
 800d5a2:	690a      	ldr	r2, [r1, #16]
 800d5a4:	6923      	ldr	r3, [r4, #16]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	bfa8      	it	ge
 800d5aa:	4623      	movge	r3, r4
 800d5ac:	460f      	mov	r7, r1
 800d5ae:	bfa4      	itt	ge
 800d5b0:	460c      	movge	r4, r1
 800d5b2:	461f      	movge	r7, r3
 800d5b4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d5b8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d5bc:	68a3      	ldr	r3, [r4, #8]
 800d5be:	6861      	ldr	r1, [r4, #4]
 800d5c0:	eb0a 0609 	add.w	r6, sl, r9
 800d5c4:	42b3      	cmp	r3, r6
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	bfb8      	it	lt
 800d5ca:	3101      	addlt	r1, #1
 800d5cc:	f7ff fedc 	bl	800d388 <_Balloc>
 800d5d0:	b930      	cbnz	r0, 800d5e0 <__multiply+0x44>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	4b44      	ldr	r3, [pc, #272]	@ (800d6e8 <__multiply+0x14c>)
 800d5d6:	4845      	ldr	r0, [pc, #276]	@ (800d6ec <__multiply+0x150>)
 800d5d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d5dc:	f000 fc8c 	bl	800def8 <__assert_func>
 800d5e0:	f100 0514 	add.w	r5, r0, #20
 800d5e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d5e8:	462b      	mov	r3, r5
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	4543      	cmp	r3, r8
 800d5ee:	d321      	bcc.n	800d634 <__multiply+0x98>
 800d5f0:	f107 0114 	add.w	r1, r7, #20
 800d5f4:	f104 0214 	add.w	r2, r4, #20
 800d5f8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d5fc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d600:	9302      	str	r3, [sp, #8]
 800d602:	1b13      	subs	r3, r2, r4
 800d604:	3b15      	subs	r3, #21
 800d606:	f023 0303 	bic.w	r3, r3, #3
 800d60a:	3304      	adds	r3, #4
 800d60c:	f104 0715 	add.w	r7, r4, #21
 800d610:	42ba      	cmp	r2, r7
 800d612:	bf38      	it	cc
 800d614:	2304      	movcc	r3, #4
 800d616:	9301      	str	r3, [sp, #4]
 800d618:	9b02      	ldr	r3, [sp, #8]
 800d61a:	9103      	str	r1, [sp, #12]
 800d61c:	428b      	cmp	r3, r1
 800d61e:	d80c      	bhi.n	800d63a <__multiply+0x9e>
 800d620:	2e00      	cmp	r6, #0
 800d622:	dd03      	ble.n	800d62c <__multiply+0x90>
 800d624:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d05a      	beq.n	800d6e2 <__multiply+0x146>
 800d62c:	6106      	str	r6, [r0, #16]
 800d62e:	b005      	add	sp, #20
 800d630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d634:	f843 2b04 	str.w	r2, [r3], #4
 800d638:	e7d8      	b.n	800d5ec <__multiply+0x50>
 800d63a:	f8b1 a000 	ldrh.w	sl, [r1]
 800d63e:	f1ba 0f00 	cmp.w	sl, #0
 800d642:	d023      	beq.n	800d68c <__multiply+0xf0>
 800d644:	f104 0e14 	add.w	lr, r4, #20
 800d648:	46a9      	mov	r9, r5
 800d64a:	f04f 0c00 	mov.w	ip, #0
 800d64e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d652:	f8d9 3000 	ldr.w	r3, [r9]
 800d656:	fa1f fb87 	uxth.w	fp, r7
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	fb0a 330b 	mla	r3, sl, fp, r3
 800d660:	4463      	add	r3, ip
 800d662:	f8d9 c000 	ldr.w	ip, [r9]
 800d666:	0c3f      	lsrs	r7, r7, #16
 800d668:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800d66c:	fb0a c707 	mla	r7, sl, r7, ip
 800d670:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d674:	b29b      	uxth	r3, r3
 800d676:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d67a:	4572      	cmp	r2, lr
 800d67c:	f849 3b04 	str.w	r3, [r9], #4
 800d680:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d684:	d8e3      	bhi.n	800d64e <__multiply+0xb2>
 800d686:	9b01      	ldr	r3, [sp, #4]
 800d688:	f845 c003 	str.w	ip, [r5, r3]
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d692:	3104      	adds	r1, #4
 800d694:	f1b9 0f00 	cmp.w	r9, #0
 800d698:	d021      	beq.n	800d6de <__multiply+0x142>
 800d69a:	682b      	ldr	r3, [r5, #0]
 800d69c:	f104 0c14 	add.w	ip, r4, #20
 800d6a0:	46ae      	mov	lr, r5
 800d6a2:	f04f 0a00 	mov.w	sl, #0
 800d6a6:	f8bc b000 	ldrh.w	fp, [ip]
 800d6aa:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d6ae:	fb09 770b 	mla	r7, r9, fp, r7
 800d6b2:	4457      	add	r7, sl
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d6ba:	f84e 3b04 	str.w	r3, [lr], #4
 800d6be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d6c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6c6:	f8be 3000 	ldrh.w	r3, [lr]
 800d6ca:	fb09 330a 	mla	r3, r9, sl, r3
 800d6ce:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d6d2:	4562      	cmp	r2, ip
 800d6d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6d8:	d8e5      	bhi.n	800d6a6 <__multiply+0x10a>
 800d6da:	9f01      	ldr	r7, [sp, #4]
 800d6dc:	51eb      	str	r3, [r5, r7]
 800d6de:	3504      	adds	r5, #4
 800d6e0:	e79a      	b.n	800d618 <__multiply+0x7c>
 800d6e2:	3e01      	subs	r6, #1
 800d6e4:	e79c      	b.n	800d620 <__multiply+0x84>
 800d6e6:	bf00      	nop
 800d6e8:	0800f28c 	.word	0x0800f28c
 800d6ec:	0800f29d 	.word	0x0800f29d

0800d6f0 <__pow5mult>:
 800d6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6f4:	4615      	mov	r5, r2
 800d6f6:	f012 0203 	ands.w	r2, r2, #3
 800d6fa:	4607      	mov	r7, r0
 800d6fc:	460e      	mov	r6, r1
 800d6fe:	d007      	beq.n	800d710 <__pow5mult+0x20>
 800d700:	4c25      	ldr	r4, [pc, #148]	@ (800d798 <__pow5mult+0xa8>)
 800d702:	3a01      	subs	r2, #1
 800d704:	2300      	movs	r3, #0
 800d706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d70a:	f7ff fe9f 	bl	800d44c <__multadd>
 800d70e:	4606      	mov	r6, r0
 800d710:	10ad      	asrs	r5, r5, #2
 800d712:	d03d      	beq.n	800d790 <__pow5mult+0xa0>
 800d714:	69fc      	ldr	r4, [r7, #28]
 800d716:	b97c      	cbnz	r4, 800d738 <__pow5mult+0x48>
 800d718:	2010      	movs	r0, #16
 800d71a:	f7ff fd7f 	bl	800d21c <malloc>
 800d71e:	4602      	mov	r2, r0
 800d720:	61f8      	str	r0, [r7, #28]
 800d722:	b928      	cbnz	r0, 800d730 <__pow5mult+0x40>
 800d724:	4b1d      	ldr	r3, [pc, #116]	@ (800d79c <__pow5mult+0xac>)
 800d726:	481e      	ldr	r0, [pc, #120]	@ (800d7a0 <__pow5mult+0xb0>)
 800d728:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d72c:	f000 fbe4 	bl	800def8 <__assert_func>
 800d730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d734:	6004      	str	r4, [r0, #0]
 800d736:	60c4      	str	r4, [r0, #12]
 800d738:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d73c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d740:	b94c      	cbnz	r4, 800d756 <__pow5mult+0x66>
 800d742:	f240 2171 	movw	r1, #625	@ 0x271
 800d746:	4638      	mov	r0, r7
 800d748:	f7ff ff12 	bl	800d570 <__i2b>
 800d74c:	2300      	movs	r3, #0
 800d74e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d752:	4604      	mov	r4, r0
 800d754:	6003      	str	r3, [r0, #0]
 800d756:	f04f 0900 	mov.w	r9, #0
 800d75a:	07eb      	lsls	r3, r5, #31
 800d75c:	d50a      	bpl.n	800d774 <__pow5mult+0x84>
 800d75e:	4631      	mov	r1, r6
 800d760:	4622      	mov	r2, r4
 800d762:	4638      	mov	r0, r7
 800d764:	f7ff ff1a 	bl	800d59c <__multiply>
 800d768:	4631      	mov	r1, r6
 800d76a:	4680      	mov	r8, r0
 800d76c:	4638      	mov	r0, r7
 800d76e:	f7ff fe4b 	bl	800d408 <_Bfree>
 800d772:	4646      	mov	r6, r8
 800d774:	106d      	asrs	r5, r5, #1
 800d776:	d00b      	beq.n	800d790 <__pow5mult+0xa0>
 800d778:	6820      	ldr	r0, [r4, #0]
 800d77a:	b938      	cbnz	r0, 800d78c <__pow5mult+0x9c>
 800d77c:	4622      	mov	r2, r4
 800d77e:	4621      	mov	r1, r4
 800d780:	4638      	mov	r0, r7
 800d782:	f7ff ff0b 	bl	800d59c <__multiply>
 800d786:	6020      	str	r0, [r4, #0]
 800d788:	f8c0 9000 	str.w	r9, [r0]
 800d78c:	4604      	mov	r4, r0
 800d78e:	e7e4      	b.n	800d75a <__pow5mult+0x6a>
 800d790:	4630      	mov	r0, r6
 800d792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d796:	bf00      	nop
 800d798:	0800f2f8 	.word	0x0800f2f8
 800d79c:	0800f21d 	.word	0x0800f21d
 800d7a0:	0800f29d 	.word	0x0800f29d

0800d7a4 <__lshift>:
 800d7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a8:	460c      	mov	r4, r1
 800d7aa:	6849      	ldr	r1, [r1, #4]
 800d7ac:	6923      	ldr	r3, [r4, #16]
 800d7ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d7b2:	68a3      	ldr	r3, [r4, #8]
 800d7b4:	4607      	mov	r7, r0
 800d7b6:	4691      	mov	r9, r2
 800d7b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d7bc:	f108 0601 	add.w	r6, r8, #1
 800d7c0:	42b3      	cmp	r3, r6
 800d7c2:	db0b      	blt.n	800d7dc <__lshift+0x38>
 800d7c4:	4638      	mov	r0, r7
 800d7c6:	f7ff fddf 	bl	800d388 <_Balloc>
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	b948      	cbnz	r0, 800d7e2 <__lshift+0x3e>
 800d7ce:	4602      	mov	r2, r0
 800d7d0:	4b28      	ldr	r3, [pc, #160]	@ (800d874 <__lshift+0xd0>)
 800d7d2:	4829      	ldr	r0, [pc, #164]	@ (800d878 <__lshift+0xd4>)
 800d7d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d7d8:	f000 fb8e 	bl	800def8 <__assert_func>
 800d7dc:	3101      	adds	r1, #1
 800d7de:	005b      	lsls	r3, r3, #1
 800d7e0:	e7ee      	b.n	800d7c0 <__lshift+0x1c>
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f100 0114 	add.w	r1, r0, #20
 800d7e8:	f100 0210 	add.w	r2, r0, #16
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	4553      	cmp	r3, sl
 800d7f0:	db33      	blt.n	800d85a <__lshift+0xb6>
 800d7f2:	6920      	ldr	r0, [r4, #16]
 800d7f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d7f8:	f104 0314 	add.w	r3, r4, #20
 800d7fc:	f019 091f 	ands.w	r9, r9, #31
 800d800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d804:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d808:	d02b      	beq.n	800d862 <__lshift+0xbe>
 800d80a:	f1c9 0e20 	rsb	lr, r9, #32
 800d80e:	468a      	mov	sl, r1
 800d810:	2200      	movs	r2, #0
 800d812:	6818      	ldr	r0, [r3, #0]
 800d814:	fa00 f009 	lsl.w	r0, r0, r9
 800d818:	4310      	orrs	r0, r2
 800d81a:	f84a 0b04 	str.w	r0, [sl], #4
 800d81e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d822:	459c      	cmp	ip, r3
 800d824:	fa22 f20e 	lsr.w	r2, r2, lr
 800d828:	d8f3      	bhi.n	800d812 <__lshift+0x6e>
 800d82a:	ebac 0304 	sub.w	r3, ip, r4
 800d82e:	3b15      	subs	r3, #21
 800d830:	f023 0303 	bic.w	r3, r3, #3
 800d834:	3304      	adds	r3, #4
 800d836:	f104 0015 	add.w	r0, r4, #21
 800d83a:	4584      	cmp	ip, r0
 800d83c:	bf38      	it	cc
 800d83e:	2304      	movcc	r3, #4
 800d840:	50ca      	str	r2, [r1, r3]
 800d842:	b10a      	cbz	r2, 800d848 <__lshift+0xa4>
 800d844:	f108 0602 	add.w	r6, r8, #2
 800d848:	3e01      	subs	r6, #1
 800d84a:	4638      	mov	r0, r7
 800d84c:	612e      	str	r6, [r5, #16]
 800d84e:	4621      	mov	r1, r4
 800d850:	f7ff fdda 	bl	800d408 <_Bfree>
 800d854:	4628      	mov	r0, r5
 800d856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d85a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d85e:	3301      	adds	r3, #1
 800d860:	e7c5      	b.n	800d7ee <__lshift+0x4a>
 800d862:	3904      	subs	r1, #4
 800d864:	f853 2b04 	ldr.w	r2, [r3], #4
 800d868:	f841 2f04 	str.w	r2, [r1, #4]!
 800d86c:	459c      	cmp	ip, r3
 800d86e:	d8f9      	bhi.n	800d864 <__lshift+0xc0>
 800d870:	e7ea      	b.n	800d848 <__lshift+0xa4>
 800d872:	bf00      	nop
 800d874:	0800f28c 	.word	0x0800f28c
 800d878:	0800f29d 	.word	0x0800f29d

0800d87c <__mcmp>:
 800d87c:	690a      	ldr	r2, [r1, #16]
 800d87e:	4603      	mov	r3, r0
 800d880:	6900      	ldr	r0, [r0, #16]
 800d882:	1a80      	subs	r0, r0, r2
 800d884:	b530      	push	{r4, r5, lr}
 800d886:	d10e      	bne.n	800d8a6 <__mcmp+0x2a>
 800d888:	3314      	adds	r3, #20
 800d88a:	3114      	adds	r1, #20
 800d88c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d890:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d894:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d898:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d89c:	4295      	cmp	r5, r2
 800d89e:	d003      	beq.n	800d8a8 <__mcmp+0x2c>
 800d8a0:	d205      	bcs.n	800d8ae <__mcmp+0x32>
 800d8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a6:	bd30      	pop	{r4, r5, pc}
 800d8a8:	42a3      	cmp	r3, r4
 800d8aa:	d3f3      	bcc.n	800d894 <__mcmp+0x18>
 800d8ac:	e7fb      	b.n	800d8a6 <__mcmp+0x2a>
 800d8ae:	2001      	movs	r0, #1
 800d8b0:	e7f9      	b.n	800d8a6 <__mcmp+0x2a>
	...

0800d8b4 <__mdiff>:
 800d8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8b8:	4689      	mov	r9, r1
 800d8ba:	4606      	mov	r6, r0
 800d8bc:	4611      	mov	r1, r2
 800d8be:	4648      	mov	r0, r9
 800d8c0:	4614      	mov	r4, r2
 800d8c2:	f7ff ffdb 	bl	800d87c <__mcmp>
 800d8c6:	1e05      	subs	r5, r0, #0
 800d8c8:	d112      	bne.n	800d8f0 <__mdiff+0x3c>
 800d8ca:	4629      	mov	r1, r5
 800d8cc:	4630      	mov	r0, r6
 800d8ce:	f7ff fd5b 	bl	800d388 <_Balloc>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	b928      	cbnz	r0, 800d8e2 <__mdiff+0x2e>
 800d8d6:	4b3e      	ldr	r3, [pc, #248]	@ (800d9d0 <__mdiff+0x11c>)
 800d8d8:	f240 2137 	movw	r1, #567	@ 0x237
 800d8dc:	483d      	ldr	r0, [pc, #244]	@ (800d9d4 <__mdiff+0x120>)
 800d8de:	f000 fb0b 	bl	800def8 <__assert_func>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d8e8:	4610      	mov	r0, r2
 800d8ea:	b003      	add	sp, #12
 800d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f0:	bfbc      	itt	lt
 800d8f2:	464b      	movlt	r3, r9
 800d8f4:	46a1      	movlt	r9, r4
 800d8f6:	4630      	mov	r0, r6
 800d8f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d8fc:	bfba      	itte	lt
 800d8fe:	461c      	movlt	r4, r3
 800d900:	2501      	movlt	r5, #1
 800d902:	2500      	movge	r5, #0
 800d904:	f7ff fd40 	bl	800d388 <_Balloc>
 800d908:	4602      	mov	r2, r0
 800d90a:	b918      	cbnz	r0, 800d914 <__mdiff+0x60>
 800d90c:	4b30      	ldr	r3, [pc, #192]	@ (800d9d0 <__mdiff+0x11c>)
 800d90e:	f240 2145 	movw	r1, #581	@ 0x245
 800d912:	e7e3      	b.n	800d8dc <__mdiff+0x28>
 800d914:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d918:	6926      	ldr	r6, [r4, #16]
 800d91a:	60c5      	str	r5, [r0, #12]
 800d91c:	f109 0310 	add.w	r3, r9, #16
 800d920:	f109 0514 	add.w	r5, r9, #20
 800d924:	f104 0e14 	add.w	lr, r4, #20
 800d928:	f100 0b14 	add.w	fp, r0, #20
 800d92c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d930:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d934:	9301      	str	r3, [sp, #4]
 800d936:	46d9      	mov	r9, fp
 800d938:	f04f 0c00 	mov.w	ip, #0
 800d93c:	9b01      	ldr	r3, [sp, #4]
 800d93e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d942:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d946:	9301      	str	r3, [sp, #4]
 800d948:	b281      	uxth	r1, r0
 800d94a:	fa1f f38a 	uxth.w	r3, sl
 800d94e:	1a5b      	subs	r3, r3, r1
 800d950:	0c00      	lsrs	r0, r0, #16
 800d952:	4463      	add	r3, ip
 800d954:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d958:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d962:	4576      	cmp	r6, lr
 800d964:	f849 3b04 	str.w	r3, [r9], #4
 800d968:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d96c:	d8e6      	bhi.n	800d93c <__mdiff+0x88>
 800d96e:	1b33      	subs	r3, r6, r4
 800d970:	3b15      	subs	r3, #21
 800d972:	f023 0303 	bic.w	r3, r3, #3
 800d976:	3415      	adds	r4, #21
 800d978:	3304      	adds	r3, #4
 800d97a:	42a6      	cmp	r6, r4
 800d97c:	bf38      	it	cc
 800d97e:	2304      	movcc	r3, #4
 800d980:	441d      	add	r5, r3
 800d982:	445b      	add	r3, fp
 800d984:	461e      	mov	r6, r3
 800d986:	462c      	mov	r4, r5
 800d988:	4544      	cmp	r4, r8
 800d98a:	d30e      	bcc.n	800d9aa <__mdiff+0xf6>
 800d98c:	f108 0103 	add.w	r1, r8, #3
 800d990:	1b49      	subs	r1, r1, r5
 800d992:	f021 0103 	bic.w	r1, r1, #3
 800d996:	3d03      	subs	r5, #3
 800d998:	45a8      	cmp	r8, r5
 800d99a:	bf38      	it	cc
 800d99c:	2100      	movcc	r1, #0
 800d99e:	440b      	add	r3, r1
 800d9a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d9a4:	b191      	cbz	r1, 800d9cc <__mdiff+0x118>
 800d9a6:	6117      	str	r7, [r2, #16]
 800d9a8:	e79e      	b.n	800d8e8 <__mdiff+0x34>
 800d9aa:	f854 1b04 	ldr.w	r1, [r4], #4
 800d9ae:	46e6      	mov	lr, ip
 800d9b0:	0c08      	lsrs	r0, r1, #16
 800d9b2:	fa1c fc81 	uxtah	ip, ip, r1
 800d9b6:	4471      	add	r1, lr
 800d9b8:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d9bc:	b289      	uxth	r1, r1
 800d9be:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d9c2:	f846 1b04 	str.w	r1, [r6], #4
 800d9c6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9ca:	e7dd      	b.n	800d988 <__mdiff+0xd4>
 800d9cc:	3f01      	subs	r7, #1
 800d9ce:	e7e7      	b.n	800d9a0 <__mdiff+0xec>
 800d9d0:	0800f28c 	.word	0x0800f28c
 800d9d4:	0800f29d 	.word	0x0800f29d

0800d9d8 <__d2b>:
 800d9d8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800d9dc:	2101      	movs	r1, #1
 800d9de:	9e08      	ldr	r6, [sp, #32]
 800d9e0:	4690      	mov	r8, r2
 800d9e2:	4699      	mov	r9, r3
 800d9e4:	f7ff fcd0 	bl	800d388 <_Balloc>
 800d9e8:	4604      	mov	r4, r0
 800d9ea:	b930      	cbnz	r0, 800d9fa <__d2b+0x22>
 800d9ec:	4602      	mov	r2, r0
 800d9ee:	4b24      	ldr	r3, [pc, #144]	@ (800da80 <__d2b+0xa8>)
 800d9f0:	4824      	ldr	r0, [pc, #144]	@ (800da84 <__d2b+0xac>)
 800d9f2:	f240 310f 	movw	r1, #783	@ 0x30f
 800d9f6:	f000 fa7f 	bl	800def8 <__assert_func>
 800d9fa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d9fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da02:	b10d      	cbz	r5, 800da08 <__d2b+0x30>
 800da04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800da08:	9301      	str	r3, [sp, #4]
 800da0a:	f1b8 0300 	subs.w	r3, r8, #0
 800da0e:	d024      	beq.n	800da5a <__d2b+0x82>
 800da10:	4668      	mov	r0, sp
 800da12:	9300      	str	r3, [sp, #0]
 800da14:	f7ff fd7f 	bl	800d516 <__lo0bits>
 800da18:	e9dd 1200 	ldrd	r1, r2, [sp]
 800da1c:	b1d8      	cbz	r0, 800da56 <__d2b+0x7e>
 800da1e:	f1c0 0320 	rsb	r3, r0, #32
 800da22:	fa02 f303 	lsl.w	r3, r2, r3
 800da26:	430b      	orrs	r3, r1
 800da28:	40c2      	lsrs	r2, r0
 800da2a:	6163      	str	r3, [r4, #20]
 800da2c:	9201      	str	r2, [sp, #4]
 800da2e:	9b01      	ldr	r3, [sp, #4]
 800da30:	61a3      	str	r3, [r4, #24]
 800da32:	2b00      	cmp	r3, #0
 800da34:	bf0c      	ite	eq
 800da36:	2201      	moveq	r2, #1
 800da38:	2202      	movne	r2, #2
 800da3a:	6122      	str	r2, [r4, #16]
 800da3c:	b1ad      	cbz	r5, 800da6a <__d2b+0x92>
 800da3e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800da42:	4405      	add	r5, r0
 800da44:	6035      	str	r5, [r6, #0]
 800da46:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800da4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da4c:	6018      	str	r0, [r3, #0]
 800da4e:	4620      	mov	r0, r4
 800da50:	b002      	add	sp, #8
 800da52:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800da56:	6161      	str	r1, [r4, #20]
 800da58:	e7e9      	b.n	800da2e <__d2b+0x56>
 800da5a:	a801      	add	r0, sp, #4
 800da5c:	f7ff fd5b 	bl	800d516 <__lo0bits>
 800da60:	9b01      	ldr	r3, [sp, #4]
 800da62:	6163      	str	r3, [r4, #20]
 800da64:	3020      	adds	r0, #32
 800da66:	2201      	movs	r2, #1
 800da68:	e7e7      	b.n	800da3a <__d2b+0x62>
 800da6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800da6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800da72:	6030      	str	r0, [r6, #0]
 800da74:	6918      	ldr	r0, [r3, #16]
 800da76:	f7ff fd2f 	bl	800d4d8 <__hi0bits>
 800da7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800da7e:	e7e4      	b.n	800da4a <__d2b+0x72>
 800da80:	0800f28c 	.word	0x0800f28c
 800da84:	0800f29d 	.word	0x0800f29d

0800da88 <__ssputs_r>:
 800da88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da8c:	688e      	ldr	r6, [r1, #8]
 800da8e:	461f      	mov	r7, r3
 800da90:	42be      	cmp	r6, r7
 800da92:	680b      	ldr	r3, [r1, #0]
 800da94:	4682      	mov	sl, r0
 800da96:	460c      	mov	r4, r1
 800da98:	4690      	mov	r8, r2
 800da9a:	d82d      	bhi.n	800daf8 <__ssputs_r+0x70>
 800da9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800daa0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800daa4:	d026      	beq.n	800daf4 <__ssputs_r+0x6c>
 800daa6:	6965      	ldr	r5, [r4, #20]
 800daa8:	6909      	ldr	r1, [r1, #16]
 800daaa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800daae:	eba3 0901 	sub.w	r9, r3, r1
 800dab2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dab6:	1c7b      	adds	r3, r7, #1
 800dab8:	444b      	add	r3, r9
 800daba:	106d      	asrs	r5, r5, #1
 800dabc:	429d      	cmp	r5, r3
 800dabe:	bf38      	it	cc
 800dac0:	461d      	movcc	r5, r3
 800dac2:	0553      	lsls	r3, r2, #21
 800dac4:	d527      	bpl.n	800db16 <__ssputs_r+0x8e>
 800dac6:	4629      	mov	r1, r5
 800dac8:	f7ff fbd2 	bl	800d270 <_malloc_r>
 800dacc:	4606      	mov	r6, r0
 800dace:	b360      	cbz	r0, 800db2a <__ssputs_r+0xa2>
 800dad0:	6921      	ldr	r1, [r4, #16]
 800dad2:	464a      	mov	r2, r9
 800dad4:	f000 fa02 	bl	800dedc <memcpy>
 800dad8:	89a3      	ldrh	r3, [r4, #12]
 800dada:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dae2:	81a3      	strh	r3, [r4, #12]
 800dae4:	6126      	str	r6, [r4, #16]
 800dae6:	6165      	str	r5, [r4, #20]
 800dae8:	444e      	add	r6, r9
 800daea:	eba5 0509 	sub.w	r5, r5, r9
 800daee:	6026      	str	r6, [r4, #0]
 800daf0:	60a5      	str	r5, [r4, #8]
 800daf2:	463e      	mov	r6, r7
 800daf4:	42be      	cmp	r6, r7
 800daf6:	d900      	bls.n	800dafa <__ssputs_r+0x72>
 800daf8:	463e      	mov	r6, r7
 800dafa:	6820      	ldr	r0, [r4, #0]
 800dafc:	4632      	mov	r2, r6
 800dafe:	4641      	mov	r1, r8
 800db00:	f000 f9c2 	bl	800de88 <memmove>
 800db04:	68a3      	ldr	r3, [r4, #8]
 800db06:	1b9b      	subs	r3, r3, r6
 800db08:	60a3      	str	r3, [r4, #8]
 800db0a:	6823      	ldr	r3, [r4, #0]
 800db0c:	4433      	add	r3, r6
 800db0e:	6023      	str	r3, [r4, #0]
 800db10:	2000      	movs	r0, #0
 800db12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db16:	462a      	mov	r2, r5
 800db18:	f000 fa32 	bl	800df80 <_realloc_r>
 800db1c:	4606      	mov	r6, r0
 800db1e:	2800      	cmp	r0, #0
 800db20:	d1e0      	bne.n	800dae4 <__ssputs_r+0x5c>
 800db22:	6921      	ldr	r1, [r4, #16]
 800db24:	4650      	mov	r0, sl
 800db26:	f7ff fb2f 	bl	800d188 <_free_r>
 800db2a:	230c      	movs	r3, #12
 800db2c:	f8ca 3000 	str.w	r3, [sl]
 800db30:	89a3      	ldrh	r3, [r4, #12]
 800db32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db36:	81a3      	strh	r3, [r4, #12]
 800db38:	f04f 30ff 	mov.w	r0, #4294967295
 800db3c:	e7e9      	b.n	800db12 <__ssputs_r+0x8a>
	...

0800db40 <_svfiprintf_r>:
 800db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db44:	4698      	mov	r8, r3
 800db46:	898b      	ldrh	r3, [r1, #12]
 800db48:	061b      	lsls	r3, r3, #24
 800db4a:	b09d      	sub	sp, #116	@ 0x74
 800db4c:	4607      	mov	r7, r0
 800db4e:	460d      	mov	r5, r1
 800db50:	4614      	mov	r4, r2
 800db52:	d510      	bpl.n	800db76 <_svfiprintf_r+0x36>
 800db54:	690b      	ldr	r3, [r1, #16]
 800db56:	b973      	cbnz	r3, 800db76 <_svfiprintf_r+0x36>
 800db58:	2140      	movs	r1, #64	@ 0x40
 800db5a:	f7ff fb89 	bl	800d270 <_malloc_r>
 800db5e:	6028      	str	r0, [r5, #0]
 800db60:	6128      	str	r0, [r5, #16]
 800db62:	b930      	cbnz	r0, 800db72 <_svfiprintf_r+0x32>
 800db64:	230c      	movs	r3, #12
 800db66:	603b      	str	r3, [r7, #0]
 800db68:	f04f 30ff 	mov.w	r0, #4294967295
 800db6c:	b01d      	add	sp, #116	@ 0x74
 800db6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db72:	2340      	movs	r3, #64	@ 0x40
 800db74:	616b      	str	r3, [r5, #20]
 800db76:	2300      	movs	r3, #0
 800db78:	9309      	str	r3, [sp, #36]	@ 0x24
 800db7a:	2320      	movs	r3, #32
 800db7c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800db80:	f8cd 800c 	str.w	r8, [sp, #12]
 800db84:	2330      	movs	r3, #48	@ 0x30
 800db86:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800dd24 <_svfiprintf_r+0x1e4>
 800db8a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800db8e:	f04f 0901 	mov.w	r9, #1
 800db92:	4623      	mov	r3, r4
 800db94:	469a      	mov	sl, r3
 800db96:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db9a:	b10a      	cbz	r2, 800dba0 <_svfiprintf_r+0x60>
 800db9c:	2a25      	cmp	r2, #37	@ 0x25
 800db9e:	d1f9      	bne.n	800db94 <_svfiprintf_r+0x54>
 800dba0:	ebba 0b04 	subs.w	fp, sl, r4
 800dba4:	d00b      	beq.n	800dbbe <_svfiprintf_r+0x7e>
 800dba6:	465b      	mov	r3, fp
 800dba8:	4622      	mov	r2, r4
 800dbaa:	4629      	mov	r1, r5
 800dbac:	4638      	mov	r0, r7
 800dbae:	f7ff ff6b 	bl	800da88 <__ssputs_r>
 800dbb2:	3001      	adds	r0, #1
 800dbb4:	f000 80a7 	beq.w	800dd06 <_svfiprintf_r+0x1c6>
 800dbb8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbba:	445a      	add	r2, fp
 800dbbc:	9209      	str	r2, [sp, #36]	@ 0x24
 800dbbe:	f89a 3000 	ldrb.w	r3, [sl]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	f000 809f 	beq.w	800dd06 <_svfiprintf_r+0x1c6>
 800dbc8:	2300      	movs	r3, #0
 800dbca:	f04f 32ff 	mov.w	r2, #4294967295
 800dbce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbd2:	f10a 0a01 	add.w	sl, sl, #1
 800dbd6:	9304      	str	r3, [sp, #16]
 800dbd8:	9307      	str	r3, [sp, #28]
 800dbda:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dbde:	931a      	str	r3, [sp, #104]	@ 0x68
 800dbe0:	4654      	mov	r4, sl
 800dbe2:	2205      	movs	r2, #5
 800dbe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbe8:	484e      	ldr	r0, [pc, #312]	@ (800dd24 <_svfiprintf_r+0x1e4>)
 800dbea:	f7f2 fac9 	bl	8000180 <memchr>
 800dbee:	9a04      	ldr	r2, [sp, #16]
 800dbf0:	b9d8      	cbnz	r0, 800dc2a <_svfiprintf_r+0xea>
 800dbf2:	06d0      	lsls	r0, r2, #27
 800dbf4:	bf44      	itt	mi
 800dbf6:	2320      	movmi	r3, #32
 800dbf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dbfc:	0711      	lsls	r1, r2, #28
 800dbfe:	bf44      	itt	mi
 800dc00:	232b      	movmi	r3, #43	@ 0x2b
 800dc02:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dc06:	f89a 3000 	ldrb.w	r3, [sl]
 800dc0a:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc0c:	d015      	beq.n	800dc3a <_svfiprintf_r+0xfa>
 800dc0e:	9a07      	ldr	r2, [sp, #28]
 800dc10:	4654      	mov	r4, sl
 800dc12:	2000      	movs	r0, #0
 800dc14:	f04f 0c0a 	mov.w	ip, #10
 800dc18:	4621      	mov	r1, r4
 800dc1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc1e:	3b30      	subs	r3, #48	@ 0x30
 800dc20:	2b09      	cmp	r3, #9
 800dc22:	d94b      	bls.n	800dcbc <_svfiprintf_r+0x17c>
 800dc24:	b1b0      	cbz	r0, 800dc54 <_svfiprintf_r+0x114>
 800dc26:	9207      	str	r2, [sp, #28]
 800dc28:	e014      	b.n	800dc54 <_svfiprintf_r+0x114>
 800dc2a:	eba0 0308 	sub.w	r3, r0, r8
 800dc2e:	fa09 f303 	lsl.w	r3, r9, r3
 800dc32:	4313      	orrs	r3, r2
 800dc34:	9304      	str	r3, [sp, #16]
 800dc36:	46a2      	mov	sl, r4
 800dc38:	e7d2      	b.n	800dbe0 <_svfiprintf_r+0xa0>
 800dc3a:	9b03      	ldr	r3, [sp, #12]
 800dc3c:	1d19      	adds	r1, r3, #4
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	9103      	str	r1, [sp, #12]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	bfbb      	ittet	lt
 800dc46:	425b      	neglt	r3, r3
 800dc48:	f042 0202 	orrlt.w	r2, r2, #2
 800dc4c:	9307      	strge	r3, [sp, #28]
 800dc4e:	9307      	strlt	r3, [sp, #28]
 800dc50:	bfb8      	it	lt
 800dc52:	9204      	strlt	r2, [sp, #16]
 800dc54:	7823      	ldrb	r3, [r4, #0]
 800dc56:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc58:	d10a      	bne.n	800dc70 <_svfiprintf_r+0x130>
 800dc5a:	7863      	ldrb	r3, [r4, #1]
 800dc5c:	2b2a      	cmp	r3, #42	@ 0x2a
 800dc5e:	d132      	bne.n	800dcc6 <_svfiprintf_r+0x186>
 800dc60:	9b03      	ldr	r3, [sp, #12]
 800dc62:	1d1a      	adds	r2, r3, #4
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	9203      	str	r2, [sp, #12]
 800dc68:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dc6c:	3402      	adds	r4, #2
 800dc6e:	9305      	str	r3, [sp, #20]
 800dc70:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dd28 <_svfiprintf_r+0x1e8>
 800dc74:	7821      	ldrb	r1, [r4, #0]
 800dc76:	2203      	movs	r2, #3
 800dc78:	4650      	mov	r0, sl
 800dc7a:	f7f2 fa81 	bl	8000180 <memchr>
 800dc7e:	b138      	cbz	r0, 800dc90 <_svfiprintf_r+0x150>
 800dc80:	9b04      	ldr	r3, [sp, #16]
 800dc82:	eba0 000a 	sub.w	r0, r0, sl
 800dc86:	2240      	movs	r2, #64	@ 0x40
 800dc88:	4082      	lsls	r2, r0
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	3401      	adds	r4, #1
 800dc8e:	9304      	str	r3, [sp, #16]
 800dc90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc94:	4825      	ldr	r0, [pc, #148]	@ (800dd2c <_svfiprintf_r+0x1ec>)
 800dc96:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dc9a:	2206      	movs	r2, #6
 800dc9c:	f7f2 fa70 	bl	8000180 <memchr>
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d036      	beq.n	800dd12 <_svfiprintf_r+0x1d2>
 800dca4:	4b22      	ldr	r3, [pc, #136]	@ (800dd30 <_svfiprintf_r+0x1f0>)
 800dca6:	bb1b      	cbnz	r3, 800dcf0 <_svfiprintf_r+0x1b0>
 800dca8:	9b03      	ldr	r3, [sp, #12]
 800dcaa:	3307      	adds	r3, #7
 800dcac:	f023 0307 	bic.w	r3, r3, #7
 800dcb0:	3308      	adds	r3, #8
 800dcb2:	9303      	str	r3, [sp, #12]
 800dcb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dcb6:	4433      	add	r3, r6
 800dcb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800dcba:	e76a      	b.n	800db92 <_svfiprintf_r+0x52>
 800dcbc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcc0:	460c      	mov	r4, r1
 800dcc2:	2001      	movs	r0, #1
 800dcc4:	e7a8      	b.n	800dc18 <_svfiprintf_r+0xd8>
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	3401      	adds	r4, #1
 800dcca:	9305      	str	r3, [sp, #20]
 800dccc:	4619      	mov	r1, r3
 800dcce:	f04f 0c0a 	mov.w	ip, #10
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcd8:	3a30      	subs	r2, #48	@ 0x30
 800dcda:	2a09      	cmp	r2, #9
 800dcdc:	d903      	bls.n	800dce6 <_svfiprintf_r+0x1a6>
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d0c6      	beq.n	800dc70 <_svfiprintf_r+0x130>
 800dce2:	9105      	str	r1, [sp, #20]
 800dce4:	e7c4      	b.n	800dc70 <_svfiprintf_r+0x130>
 800dce6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcea:	4604      	mov	r4, r0
 800dcec:	2301      	movs	r3, #1
 800dcee:	e7f0      	b.n	800dcd2 <_svfiprintf_r+0x192>
 800dcf0:	ab03      	add	r3, sp, #12
 800dcf2:	9300      	str	r3, [sp, #0]
 800dcf4:	462a      	mov	r2, r5
 800dcf6:	4b0f      	ldr	r3, [pc, #60]	@ (800dd34 <_svfiprintf_r+0x1f4>)
 800dcf8:	a904      	add	r1, sp, #16
 800dcfa:	4638      	mov	r0, r7
 800dcfc:	f7fd fe4c 	bl	800b998 <_printf_float>
 800dd00:	1c42      	adds	r2, r0, #1
 800dd02:	4606      	mov	r6, r0
 800dd04:	d1d6      	bne.n	800dcb4 <_svfiprintf_r+0x174>
 800dd06:	89ab      	ldrh	r3, [r5, #12]
 800dd08:	065b      	lsls	r3, r3, #25
 800dd0a:	f53f af2d 	bmi.w	800db68 <_svfiprintf_r+0x28>
 800dd0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dd10:	e72c      	b.n	800db6c <_svfiprintf_r+0x2c>
 800dd12:	ab03      	add	r3, sp, #12
 800dd14:	9300      	str	r3, [sp, #0]
 800dd16:	462a      	mov	r2, r5
 800dd18:	4b06      	ldr	r3, [pc, #24]	@ (800dd34 <_svfiprintf_r+0x1f4>)
 800dd1a:	a904      	add	r1, sp, #16
 800dd1c:	4638      	mov	r0, r7
 800dd1e:	f7fe f8d5 	bl	800becc <_printf_i>
 800dd22:	e7ed      	b.n	800dd00 <_svfiprintf_r+0x1c0>
 800dd24:	0800f3f8 	.word	0x0800f3f8
 800dd28:	0800f3fe 	.word	0x0800f3fe
 800dd2c:	0800f402 	.word	0x0800f402
 800dd30:	0800b999 	.word	0x0800b999
 800dd34:	0800da89 	.word	0x0800da89

0800dd38 <__sflush_r>:
 800dd38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3e:	0716      	lsls	r6, r2, #28
 800dd40:	4605      	mov	r5, r0
 800dd42:	460c      	mov	r4, r1
 800dd44:	d454      	bmi.n	800ddf0 <__sflush_r+0xb8>
 800dd46:	684b      	ldr	r3, [r1, #4]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	dc02      	bgt.n	800dd52 <__sflush_r+0x1a>
 800dd4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	dd48      	ble.n	800dde4 <__sflush_r+0xac>
 800dd52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd54:	2e00      	cmp	r6, #0
 800dd56:	d045      	beq.n	800dde4 <__sflush_r+0xac>
 800dd58:	2300      	movs	r3, #0
 800dd5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dd5e:	682f      	ldr	r7, [r5, #0]
 800dd60:	6a21      	ldr	r1, [r4, #32]
 800dd62:	602b      	str	r3, [r5, #0]
 800dd64:	d030      	beq.n	800ddc8 <__sflush_r+0x90>
 800dd66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	0759      	lsls	r1, r3, #29
 800dd6c:	d505      	bpl.n	800dd7a <__sflush_r+0x42>
 800dd6e:	6863      	ldr	r3, [r4, #4]
 800dd70:	1ad2      	subs	r2, r2, r3
 800dd72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800dd74:	b10b      	cbz	r3, 800dd7a <__sflush_r+0x42>
 800dd76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800dd78:	1ad2      	subs	r2, r2, r3
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd7e:	6a21      	ldr	r1, [r4, #32]
 800dd80:	4628      	mov	r0, r5
 800dd82:	47b0      	blx	r6
 800dd84:	1c43      	adds	r3, r0, #1
 800dd86:	89a3      	ldrh	r3, [r4, #12]
 800dd88:	d106      	bne.n	800dd98 <__sflush_r+0x60>
 800dd8a:	6829      	ldr	r1, [r5, #0]
 800dd8c:	291d      	cmp	r1, #29
 800dd8e:	d82b      	bhi.n	800dde8 <__sflush_r+0xb0>
 800dd90:	4a28      	ldr	r2, [pc, #160]	@ (800de34 <__sflush_r+0xfc>)
 800dd92:	410a      	asrs	r2, r1
 800dd94:	07d6      	lsls	r6, r2, #31
 800dd96:	d427      	bmi.n	800dde8 <__sflush_r+0xb0>
 800dd98:	2200      	movs	r2, #0
 800dd9a:	6062      	str	r2, [r4, #4]
 800dd9c:	04d9      	lsls	r1, r3, #19
 800dd9e:	6922      	ldr	r2, [r4, #16]
 800dda0:	6022      	str	r2, [r4, #0]
 800dda2:	d504      	bpl.n	800ddae <__sflush_r+0x76>
 800dda4:	1c42      	adds	r2, r0, #1
 800dda6:	d101      	bne.n	800ddac <__sflush_r+0x74>
 800dda8:	682b      	ldr	r3, [r5, #0]
 800ddaa:	b903      	cbnz	r3, 800ddae <__sflush_r+0x76>
 800ddac:	6560      	str	r0, [r4, #84]	@ 0x54
 800ddae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddb0:	602f      	str	r7, [r5, #0]
 800ddb2:	b1b9      	cbz	r1, 800dde4 <__sflush_r+0xac>
 800ddb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ddb8:	4299      	cmp	r1, r3
 800ddba:	d002      	beq.n	800ddc2 <__sflush_r+0x8a>
 800ddbc:	4628      	mov	r0, r5
 800ddbe:	f7ff f9e3 	bl	800d188 <_free_r>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	6363      	str	r3, [r4, #52]	@ 0x34
 800ddc6:	e00d      	b.n	800dde4 <__sflush_r+0xac>
 800ddc8:	2301      	movs	r3, #1
 800ddca:	4628      	mov	r0, r5
 800ddcc:	47b0      	blx	r6
 800ddce:	4602      	mov	r2, r0
 800ddd0:	1c50      	adds	r0, r2, #1
 800ddd2:	d1c9      	bne.n	800dd68 <__sflush_r+0x30>
 800ddd4:	682b      	ldr	r3, [r5, #0]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d0c6      	beq.n	800dd68 <__sflush_r+0x30>
 800ddda:	2b1d      	cmp	r3, #29
 800dddc:	d001      	beq.n	800dde2 <__sflush_r+0xaa>
 800ddde:	2b16      	cmp	r3, #22
 800dde0:	d11d      	bne.n	800de1e <__sflush_r+0xe6>
 800dde2:	602f      	str	r7, [r5, #0]
 800dde4:	2000      	movs	r0, #0
 800dde6:	e021      	b.n	800de2c <__sflush_r+0xf4>
 800dde8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ddec:	b21b      	sxth	r3, r3
 800ddee:	e01a      	b.n	800de26 <__sflush_r+0xee>
 800ddf0:	690f      	ldr	r7, [r1, #16]
 800ddf2:	2f00      	cmp	r7, #0
 800ddf4:	d0f6      	beq.n	800dde4 <__sflush_r+0xac>
 800ddf6:	0793      	lsls	r3, r2, #30
 800ddf8:	680e      	ldr	r6, [r1, #0]
 800ddfa:	bf08      	it	eq
 800ddfc:	694b      	ldreq	r3, [r1, #20]
 800ddfe:	600f      	str	r7, [r1, #0]
 800de00:	bf18      	it	ne
 800de02:	2300      	movne	r3, #0
 800de04:	1bf6      	subs	r6, r6, r7
 800de06:	608b      	str	r3, [r1, #8]
 800de08:	2e00      	cmp	r6, #0
 800de0a:	ddeb      	ble.n	800dde4 <__sflush_r+0xac>
 800de0c:	6a21      	ldr	r1, [r4, #32]
 800de0e:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800de12:	4633      	mov	r3, r6
 800de14:	463a      	mov	r2, r7
 800de16:	4628      	mov	r0, r5
 800de18:	47e0      	blx	ip
 800de1a:	2800      	cmp	r0, #0
 800de1c:	dc07      	bgt.n	800de2e <__sflush_r+0xf6>
 800de1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de26:	81a3      	strh	r3, [r4, #12]
 800de28:	f04f 30ff 	mov.w	r0, #4294967295
 800de2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de2e:	4407      	add	r7, r0
 800de30:	1a36      	subs	r6, r6, r0
 800de32:	e7e9      	b.n	800de08 <__sflush_r+0xd0>
 800de34:	dfbffffe 	.word	0xdfbffffe

0800de38 <_fflush_r>:
 800de38:	b538      	push	{r3, r4, r5, lr}
 800de3a:	690b      	ldr	r3, [r1, #16]
 800de3c:	4605      	mov	r5, r0
 800de3e:	460c      	mov	r4, r1
 800de40:	b913      	cbnz	r3, 800de48 <_fflush_r+0x10>
 800de42:	2500      	movs	r5, #0
 800de44:	4628      	mov	r0, r5
 800de46:	bd38      	pop	{r3, r4, r5, pc}
 800de48:	b118      	cbz	r0, 800de52 <_fflush_r+0x1a>
 800de4a:	6a03      	ldr	r3, [r0, #32]
 800de4c:	b90b      	cbnz	r3, 800de52 <_fflush_r+0x1a>
 800de4e:	f7fe f9e9 	bl	800c224 <__sinit>
 800de52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d0f3      	beq.n	800de42 <_fflush_r+0xa>
 800de5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800de5c:	07d0      	lsls	r0, r2, #31
 800de5e:	d404      	bmi.n	800de6a <_fflush_r+0x32>
 800de60:	0599      	lsls	r1, r3, #22
 800de62:	d402      	bmi.n	800de6a <_fflush_r+0x32>
 800de64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de66:	f7fe fb3a 	bl	800c4de <__retarget_lock_acquire_recursive>
 800de6a:	4628      	mov	r0, r5
 800de6c:	4621      	mov	r1, r4
 800de6e:	f7ff ff63 	bl	800dd38 <__sflush_r>
 800de72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de74:	07da      	lsls	r2, r3, #31
 800de76:	4605      	mov	r5, r0
 800de78:	d4e4      	bmi.n	800de44 <_fflush_r+0xc>
 800de7a:	89a3      	ldrh	r3, [r4, #12]
 800de7c:	059b      	lsls	r3, r3, #22
 800de7e:	d4e1      	bmi.n	800de44 <_fflush_r+0xc>
 800de80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de82:	f7fe fb2d 	bl	800c4e0 <__retarget_lock_release_recursive>
 800de86:	e7dd      	b.n	800de44 <_fflush_r+0xc>

0800de88 <memmove>:
 800de88:	4288      	cmp	r0, r1
 800de8a:	b510      	push	{r4, lr}
 800de8c:	eb01 0402 	add.w	r4, r1, r2
 800de90:	d902      	bls.n	800de98 <memmove+0x10>
 800de92:	4284      	cmp	r4, r0
 800de94:	4623      	mov	r3, r4
 800de96:	d807      	bhi.n	800dea8 <memmove+0x20>
 800de98:	1e43      	subs	r3, r0, #1
 800de9a:	42a1      	cmp	r1, r4
 800de9c:	d008      	beq.n	800deb0 <memmove+0x28>
 800de9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dea2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dea6:	e7f8      	b.n	800de9a <memmove+0x12>
 800dea8:	4402      	add	r2, r0
 800deaa:	4601      	mov	r1, r0
 800deac:	428a      	cmp	r2, r1
 800deae:	d100      	bne.n	800deb2 <memmove+0x2a>
 800deb0:	bd10      	pop	{r4, pc}
 800deb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800deb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800deba:	e7f7      	b.n	800deac <memmove+0x24>

0800debc <_sbrk_r>:
 800debc:	b538      	push	{r3, r4, r5, lr}
 800debe:	4d06      	ldr	r5, [pc, #24]	@ (800ded8 <_sbrk_r+0x1c>)
 800dec0:	2300      	movs	r3, #0
 800dec2:	4604      	mov	r4, r0
 800dec4:	4608      	mov	r0, r1
 800dec6:	602b      	str	r3, [r5, #0]
 800dec8:	f7f6 fa2c 	bl	8004324 <_sbrk>
 800decc:	1c43      	adds	r3, r0, #1
 800dece:	d102      	bne.n	800ded6 <_sbrk_r+0x1a>
 800ded0:	682b      	ldr	r3, [r5, #0]
 800ded2:	b103      	cbz	r3, 800ded6 <_sbrk_r+0x1a>
 800ded4:	6023      	str	r3, [r4, #0]
 800ded6:	bd38      	pop	{r3, r4, r5, pc}
 800ded8:	20000c60 	.word	0x20000c60

0800dedc <memcpy>:
 800dedc:	440a      	add	r2, r1
 800dede:	4291      	cmp	r1, r2
 800dee0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dee4:	d100      	bne.n	800dee8 <memcpy+0xc>
 800dee6:	4770      	bx	lr
 800dee8:	b510      	push	{r4, lr}
 800deea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800deee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800def2:	4291      	cmp	r1, r2
 800def4:	d1f9      	bne.n	800deea <memcpy+0xe>
 800def6:	bd10      	pop	{r4, pc}

0800def8 <__assert_func>:
 800def8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800defa:	4614      	mov	r4, r2
 800defc:	461a      	mov	r2, r3
 800defe:	4b09      	ldr	r3, [pc, #36]	@ (800df24 <__assert_func+0x2c>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4605      	mov	r5, r0
 800df04:	68d8      	ldr	r0, [r3, #12]
 800df06:	b954      	cbnz	r4, 800df1e <__assert_func+0x26>
 800df08:	4b07      	ldr	r3, [pc, #28]	@ (800df28 <__assert_func+0x30>)
 800df0a:	461c      	mov	r4, r3
 800df0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df10:	9100      	str	r1, [sp, #0]
 800df12:	462b      	mov	r3, r5
 800df14:	4905      	ldr	r1, [pc, #20]	@ (800df2c <__assert_func+0x34>)
 800df16:	f000 f86f 	bl	800dff8 <fiprintf>
 800df1a:	f000 f87f 	bl	800e01c <abort>
 800df1e:	4b04      	ldr	r3, [pc, #16]	@ (800df30 <__assert_func+0x38>)
 800df20:	e7f4      	b.n	800df0c <__assert_func+0x14>
 800df22:	bf00      	nop
 800df24:	20000038 	.word	0x20000038
 800df28:	0800f44e 	.word	0x0800f44e
 800df2c:	0800f420 	.word	0x0800f420
 800df30:	0800f413 	.word	0x0800f413

0800df34 <_calloc_r>:
 800df34:	b570      	push	{r4, r5, r6, lr}
 800df36:	fba1 5402 	umull	r5, r4, r1, r2
 800df3a:	b93c      	cbnz	r4, 800df4c <_calloc_r+0x18>
 800df3c:	4629      	mov	r1, r5
 800df3e:	f7ff f997 	bl	800d270 <_malloc_r>
 800df42:	4606      	mov	r6, r0
 800df44:	b928      	cbnz	r0, 800df52 <_calloc_r+0x1e>
 800df46:	2600      	movs	r6, #0
 800df48:	4630      	mov	r0, r6
 800df4a:	bd70      	pop	{r4, r5, r6, pc}
 800df4c:	220c      	movs	r2, #12
 800df4e:	6002      	str	r2, [r0, #0]
 800df50:	e7f9      	b.n	800df46 <_calloc_r+0x12>
 800df52:	462a      	mov	r2, r5
 800df54:	4621      	mov	r1, r4
 800df56:	f7fe fa32 	bl	800c3be <memset>
 800df5a:	e7f5      	b.n	800df48 <_calloc_r+0x14>

0800df5c <__ascii_mbtowc>:
 800df5c:	b082      	sub	sp, #8
 800df5e:	b901      	cbnz	r1, 800df62 <__ascii_mbtowc+0x6>
 800df60:	a901      	add	r1, sp, #4
 800df62:	b142      	cbz	r2, 800df76 <__ascii_mbtowc+0x1a>
 800df64:	b14b      	cbz	r3, 800df7a <__ascii_mbtowc+0x1e>
 800df66:	7813      	ldrb	r3, [r2, #0]
 800df68:	600b      	str	r3, [r1, #0]
 800df6a:	7812      	ldrb	r2, [r2, #0]
 800df6c:	1e10      	subs	r0, r2, #0
 800df6e:	bf18      	it	ne
 800df70:	2001      	movne	r0, #1
 800df72:	b002      	add	sp, #8
 800df74:	4770      	bx	lr
 800df76:	4610      	mov	r0, r2
 800df78:	e7fb      	b.n	800df72 <__ascii_mbtowc+0x16>
 800df7a:	f06f 0001 	mvn.w	r0, #1
 800df7e:	e7f8      	b.n	800df72 <__ascii_mbtowc+0x16>

0800df80 <_realloc_r>:
 800df80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df84:	4680      	mov	r8, r0
 800df86:	4615      	mov	r5, r2
 800df88:	460c      	mov	r4, r1
 800df8a:	b921      	cbnz	r1, 800df96 <_realloc_r+0x16>
 800df8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df90:	4611      	mov	r1, r2
 800df92:	f7ff b96d 	b.w	800d270 <_malloc_r>
 800df96:	b92a      	cbnz	r2, 800dfa4 <_realloc_r+0x24>
 800df98:	f7ff f8f6 	bl	800d188 <_free_r>
 800df9c:	2400      	movs	r4, #0
 800df9e:	4620      	mov	r0, r4
 800dfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfa4:	f000 f841 	bl	800e02a <_malloc_usable_size_r>
 800dfa8:	4285      	cmp	r5, r0
 800dfaa:	4606      	mov	r6, r0
 800dfac:	d802      	bhi.n	800dfb4 <_realloc_r+0x34>
 800dfae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dfb2:	d8f4      	bhi.n	800df9e <_realloc_r+0x1e>
 800dfb4:	4629      	mov	r1, r5
 800dfb6:	4640      	mov	r0, r8
 800dfb8:	f7ff f95a 	bl	800d270 <_malloc_r>
 800dfbc:	4607      	mov	r7, r0
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	d0ec      	beq.n	800df9c <_realloc_r+0x1c>
 800dfc2:	42b5      	cmp	r5, r6
 800dfc4:	462a      	mov	r2, r5
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	bf28      	it	cs
 800dfca:	4632      	movcs	r2, r6
 800dfcc:	f7ff ff86 	bl	800dedc <memcpy>
 800dfd0:	4621      	mov	r1, r4
 800dfd2:	4640      	mov	r0, r8
 800dfd4:	f7ff f8d8 	bl	800d188 <_free_r>
 800dfd8:	463c      	mov	r4, r7
 800dfda:	e7e0      	b.n	800df9e <_realloc_r+0x1e>

0800dfdc <__ascii_wctomb>:
 800dfdc:	4603      	mov	r3, r0
 800dfde:	4608      	mov	r0, r1
 800dfe0:	b141      	cbz	r1, 800dff4 <__ascii_wctomb+0x18>
 800dfe2:	2aff      	cmp	r2, #255	@ 0xff
 800dfe4:	d904      	bls.n	800dff0 <__ascii_wctomb+0x14>
 800dfe6:	228a      	movs	r2, #138	@ 0x8a
 800dfe8:	601a      	str	r2, [r3, #0]
 800dfea:	f04f 30ff 	mov.w	r0, #4294967295
 800dfee:	4770      	bx	lr
 800dff0:	700a      	strb	r2, [r1, #0]
 800dff2:	2001      	movs	r0, #1
 800dff4:	4770      	bx	lr
	...

0800dff8 <fiprintf>:
 800dff8:	b40e      	push	{r1, r2, r3}
 800dffa:	b503      	push	{r0, r1, lr}
 800dffc:	4601      	mov	r1, r0
 800dffe:	ab03      	add	r3, sp, #12
 800e000:	4805      	ldr	r0, [pc, #20]	@ (800e018 <fiprintf+0x20>)
 800e002:	f853 2b04 	ldr.w	r2, [r3], #4
 800e006:	6800      	ldr	r0, [r0, #0]
 800e008:	9301      	str	r3, [sp, #4]
 800e00a:	f000 f83d 	bl	800e088 <_vfiprintf_r>
 800e00e:	b002      	add	sp, #8
 800e010:	f85d eb04 	ldr.w	lr, [sp], #4
 800e014:	b003      	add	sp, #12
 800e016:	4770      	bx	lr
 800e018:	20000038 	.word	0x20000038

0800e01c <abort>:
 800e01c:	b508      	push	{r3, lr}
 800e01e:	2006      	movs	r0, #6
 800e020:	f000 fa06 	bl	800e430 <raise>
 800e024:	2001      	movs	r0, #1
 800e026:	f7f6 f909 	bl	800423c <_exit>

0800e02a <_malloc_usable_size_r>:
 800e02a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e02e:	1f18      	subs	r0, r3, #4
 800e030:	2b00      	cmp	r3, #0
 800e032:	bfbc      	itt	lt
 800e034:	580b      	ldrlt	r3, [r1, r0]
 800e036:	18c0      	addlt	r0, r0, r3
 800e038:	4770      	bx	lr

0800e03a <__sfputc_r>:
 800e03a:	6893      	ldr	r3, [r2, #8]
 800e03c:	3b01      	subs	r3, #1
 800e03e:	2b00      	cmp	r3, #0
 800e040:	b410      	push	{r4}
 800e042:	6093      	str	r3, [r2, #8]
 800e044:	da07      	bge.n	800e056 <__sfputc_r+0x1c>
 800e046:	6994      	ldr	r4, [r2, #24]
 800e048:	42a3      	cmp	r3, r4
 800e04a:	db01      	blt.n	800e050 <__sfputc_r+0x16>
 800e04c:	290a      	cmp	r1, #10
 800e04e:	d102      	bne.n	800e056 <__sfputc_r+0x1c>
 800e050:	bc10      	pop	{r4}
 800e052:	f000 b931 	b.w	800e2b8 <__swbuf_r>
 800e056:	6813      	ldr	r3, [r2, #0]
 800e058:	1c58      	adds	r0, r3, #1
 800e05a:	6010      	str	r0, [r2, #0]
 800e05c:	7019      	strb	r1, [r3, #0]
 800e05e:	4608      	mov	r0, r1
 800e060:	bc10      	pop	{r4}
 800e062:	4770      	bx	lr

0800e064 <__sfputs_r>:
 800e064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e066:	4606      	mov	r6, r0
 800e068:	460f      	mov	r7, r1
 800e06a:	4614      	mov	r4, r2
 800e06c:	18d5      	adds	r5, r2, r3
 800e06e:	42ac      	cmp	r4, r5
 800e070:	d101      	bne.n	800e076 <__sfputs_r+0x12>
 800e072:	2000      	movs	r0, #0
 800e074:	e007      	b.n	800e086 <__sfputs_r+0x22>
 800e076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e07a:	463a      	mov	r2, r7
 800e07c:	4630      	mov	r0, r6
 800e07e:	f7ff ffdc 	bl	800e03a <__sfputc_r>
 800e082:	1c43      	adds	r3, r0, #1
 800e084:	d1f3      	bne.n	800e06e <__sfputs_r+0xa>
 800e086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e088 <_vfiprintf_r>:
 800e088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e08c:	460d      	mov	r5, r1
 800e08e:	b09d      	sub	sp, #116	@ 0x74
 800e090:	4614      	mov	r4, r2
 800e092:	4698      	mov	r8, r3
 800e094:	4606      	mov	r6, r0
 800e096:	b118      	cbz	r0, 800e0a0 <_vfiprintf_r+0x18>
 800e098:	6a03      	ldr	r3, [r0, #32]
 800e09a:	b90b      	cbnz	r3, 800e0a0 <_vfiprintf_r+0x18>
 800e09c:	f7fe f8c2 	bl	800c224 <__sinit>
 800e0a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0a2:	07d9      	lsls	r1, r3, #31
 800e0a4:	d405      	bmi.n	800e0b2 <_vfiprintf_r+0x2a>
 800e0a6:	89ab      	ldrh	r3, [r5, #12]
 800e0a8:	059a      	lsls	r2, r3, #22
 800e0aa:	d402      	bmi.n	800e0b2 <_vfiprintf_r+0x2a>
 800e0ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0ae:	f7fe fa16 	bl	800c4de <__retarget_lock_acquire_recursive>
 800e0b2:	89ab      	ldrh	r3, [r5, #12]
 800e0b4:	071b      	lsls	r3, r3, #28
 800e0b6:	d501      	bpl.n	800e0bc <_vfiprintf_r+0x34>
 800e0b8:	692b      	ldr	r3, [r5, #16]
 800e0ba:	b99b      	cbnz	r3, 800e0e4 <_vfiprintf_r+0x5c>
 800e0bc:	4629      	mov	r1, r5
 800e0be:	4630      	mov	r0, r6
 800e0c0:	f000 f938 	bl	800e334 <__swsetup_r>
 800e0c4:	b170      	cbz	r0, 800e0e4 <_vfiprintf_r+0x5c>
 800e0c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0c8:	07dc      	lsls	r4, r3, #31
 800e0ca:	d504      	bpl.n	800e0d6 <_vfiprintf_r+0x4e>
 800e0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d0:	b01d      	add	sp, #116	@ 0x74
 800e0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d6:	89ab      	ldrh	r3, [r5, #12]
 800e0d8:	0598      	lsls	r0, r3, #22
 800e0da:	d4f7      	bmi.n	800e0cc <_vfiprintf_r+0x44>
 800e0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0de:	f7fe f9ff 	bl	800c4e0 <__retarget_lock_release_recursive>
 800e0e2:	e7f3      	b.n	800e0cc <_vfiprintf_r+0x44>
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0e8:	2320      	movs	r3, #32
 800e0ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e0ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0f2:	2330      	movs	r3, #48	@ 0x30
 800e0f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e2a4 <_vfiprintf_r+0x21c>
 800e0f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e0fc:	f04f 0901 	mov.w	r9, #1
 800e100:	4623      	mov	r3, r4
 800e102:	469a      	mov	sl, r3
 800e104:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e108:	b10a      	cbz	r2, 800e10e <_vfiprintf_r+0x86>
 800e10a:	2a25      	cmp	r2, #37	@ 0x25
 800e10c:	d1f9      	bne.n	800e102 <_vfiprintf_r+0x7a>
 800e10e:	ebba 0b04 	subs.w	fp, sl, r4
 800e112:	d00b      	beq.n	800e12c <_vfiprintf_r+0xa4>
 800e114:	465b      	mov	r3, fp
 800e116:	4622      	mov	r2, r4
 800e118:	4629      	mov	r1, r5
 800e11a:	4630      	mov	r0, r6
 800e11c:	f7ff ffa2 	bl	800e064 <__sfputs_r>
 800e120:	3001      	adds	r0, #1
 800e122:	f000 80a7 	beq.w	800e274 <_vfiprintf_r+0x1ec>
 800e126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e128:	445a      	add	r2, fp
 800e12a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e12c:	f89a 3000 	ldrb.w	r3, [sl]
 800e130:	2b00      	cmp	r3, #0
 800e132:	f000 809f 	beq.w	800e274 <_vfiprintf_r+0x1ec>
 800e136:	2300      	movs	r3, #0
 800e138:	f04f 32ff 	mov.w	r2, #4294967295
 800e13c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e140:	f10a 0a01 	add.w	sl, sl, #1
 800e144:	9304      	str	r3, [sp, #16]
 800e146:	9307      	str	r3, [sp, #28]
 800e148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e14c:	931a      	str	r3, [sp, #104]	@ 0x68
 800e14e:	4654      	mov	r4, sl
 800e150:	2205      	movs	r2, #5
 800e152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e156:	4853      	ldr	r0, [pc, #332]	@ (800e2a4 <_vfiprintf_r+0x21c>)
 800e158:	f7f2 f812 	bl	8000180 <memchr>
 800e15c:	9a04      	ldr	r2, [sp, #16]
 800e15e:	b9d8      	cbnz	r0, 800e198 <_vfiprintf_r+0x110>
 800e160:	06d1      	lsls	r1, r2, #27
 800e162:	bf44      	itt	mi
 800e164:	2320      	movmi	r3, #32
 800e166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e16a:	0713      	lsls	r3, r2, #28
 800e16c:	bf44      	itt	mi
 800e16e:	232b      	movmi	r3, #43	@ 0x2b
 800e170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e174:	f89a 3000 	ldrb.w	r3, [sl]
 800e178:	2b2a      	cmp	r3, #42	@ 0x2a
 800e17a:	d015      	beq.n	800e1a8 <_vfiprintf_r+0x120>
 800e17c:	9a07      	ldr	r2, [sp, #28]
 800e17e:	4654      	mov	r4, sl
 800e180:	2000      	movs	r0, #0
 800e182:	f04f 0c0a 	mov.w	ip, #10
 800e186:	4621      	mov	r1, r4
 800e188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e18c:	3b30      	subs	r3, #48	@ 0x30
 800e18e:	2b09      	cmp	r3, #9
 800e190:	d94b      	bls.n	800e22a <_vfiprintf_r+0x1a2>
 800e192:	b1b0      	cbz	r0, 800e1c2 <_vfiprintf_r+0x13a>
 800e194:	9207      	str	r2, [sp, #28]
 800e196:	e014      	b.n	800e1c2 <_vfiprintf_r+0x13a>
 800e198:	eba0 0308 	sub.w	r3, r0, r8
 800e19c:	fa09 f303 	lsl.w	r3, r9, r3
 800e1a0:	4313      	orrs	r3, r2
 800e1a2:	9304      	str	r3, [sp, #16]
 800e1a4:	46a2      	mov	sl, r4
 800e1a6:	e7d2      	b.n	800e14e <_vfiprintf_r+0xc6>
 800e1a8:	9b03      	ldr	r3, [sp, #12]
 800e1aa:	1d19      	adds	r1, r3, #4
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	9103      	str	r1, [sp, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	bfbb      	ittet	lt
 800e1b4:	425b      	neglt	r3, r3
 800e1b6:	f042 0202 	orrlt.w	r2, r2, #2
 800e1ba:	9307      	strge	r3, [sp, #28]
 800e1bc:	9307      	strlt	r3, [sp, #28]
 800e1be:	bfb8      	it	lt
 800e1c0:	9204      	strlt	r2, [sp, #16]
 800e1c2:	7823      	ldrb	r3, [r4, #0]
 800e1c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1c6:	d10a      	bne.n	800e1de <_vfiprintf_r+0x156>
 800e1c8:	7863      	ldrb	r3, [r4, #1]
 800e1ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1cc:	d132      	bne.n	800e234 <_vfiprintf_r+0x1ac>
 800e1ce:	9b03      	ldr	r3, [sp, #12]
 800e1d0:	1d1a      	adds	r2, r3, #4
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	9203      	str	r2, [sp, #12]
 800e1d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e1da:	3402      	adds	r4, #2
 800e1dc:	9305      	str	r3, [sp, #20]
 800e1de:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800e2a8 <_vfiprintf_r+0x220>
 800e1e2:	7821      	ldrb	r1, [r4, #0]
 800e1e4:	2203      	movs	r2, #3
 800e1e6:	4650      	mov	r0, sl
 800e1e8:	f7f1 ffca 	bl	8000180 <memchr>
 800e1ec:	b138      	cbz	r0, 800e1fe <_vfiprintf_r+0x176>
 800e1ee:	9b04      	ldr	r3, [sp, #16]
 800e1f0:	eba0 000a 	sub.w	r0, r0, sl
 800e1f4:	2240      	movs	r2, #64	@ 0x40
 800e1f6:	4082      	lsls	r2, r0
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	3401      	adds	r4, #1
 800e1fc:	9304      	str	r3, [sp, #16]
 800e1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e202:	482a      	ldr	r0, [pc, #168]	@ (800e2ac <_vfiprintf_r+0x224>)
 800e204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e208:	2206      	movs	r2, #6
 800e20a:	f7f1 ffb9 	bl	8000180 <memchr>
 800e20e:	2800      	cmp	r0, #0
 800e210:	d03f      	beq.n	800e292 <_vfiprintf_r+0x20a>
 800e212:	4b27      	ldr	r3, [pc, #156]	@ (800e2b0 <_vfiprintf_r+0x228>)
 800e214:	bb1b      	cbnz	r3, 800e25e <_vfiprintf_r+0x1d6>
 800e216:	9b03      	ldr	r3, [sp, #12]
 800e218:	3307      	adds	r3, #7
 800e21a:	f023 0307 	bic.w	r3, r3, #7
 800e21e:	3308      	adds	r3, #8
 800e220:	9303      	str	r3, [sp, #12]
 800e222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e224:	443b      	add	r3, r7
 800e226:	9309      	str	r3, [sp, #36]	@ 0x24
 800e228:	e76a      	b.n	800e100 <_vfiprintf_r+0x78>
 800e22a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e22e:	460c      	mov	r4, r1
 800e230:	2001      	movs	r0, #1
 800e232:	e7a8      	b.n	800e186 <_vfiprintf_r+0xfe>
 800e234:	2300      	movs	r3, #0
 800e236:	3401      	adds	r4, #1
 800e238:	9305      	str	r3, [sp, #20]
 800e23a:	4619      	mov	r1, r3
 800e23c:	f04f 0c0a 	mov.w	ip, #10
 800e240:	4620      	mov	r0, r4
 800e242:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e246:	3a30      	subs	r2, #48	@ 0x30
 800e248:	2a09      	cmp	r2, #9
 800e24a:	d903      	bls.n	800e254 <_vfiprintf_r+0x1cc>
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d0c6      	beq.n	800e1de <_vfiprintf_r+0x156>
 800e250:	9105      	str	r1, [sp, #20]
 800e252:	e7c4      	b.n	800e1de <_vfiprintf_r+0x156>
 800e254:	fb0c 2101 	mla	r1, ip, r1, r2
 800e258:	4604      	mov	r4, r0
 800e25a:	2301      	movs	r3, #1
 800e25c:	e7f0      	b.n	800e240 <_vfiprintf_r+0x1b8>
 800e25e:	ab03      	add	r3, sp, #12
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	462a      	mov	r2, r5
 800e264:	4b13      	ldr	r3, [pc, #76]	@ (800e2b4 <_vfiprintf_r+0x22c>)
 800e266:	a904      	add	r1, sp, #16
 800e268:	4630      	mov	r0, r6
 800e26a:	f7fd fb95 	bl	800b998 <_printf_float>
 800e26e:	4607      	mov	r7, r0
 800e270:	1c78      	adds	r0, r7, #1
 800e272:	d1d6      	bne.n	800e222 <_vfiprintf_r+0x19a>
 800e274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e276:	07d9      	lsls	r1, r3, #31
 800e278:	d405      	bmi.n	800e286 <_vfiprintf_r+0x1fe>
 800e27a:	89ab      	ldrh	r3, [r5, #12]
 800e27c:	059a      	lsls	r2, r3, #22
 800e27e:	d402      	bmi.n	800e286 <_vfiprintf_r+0x1fe>
 800e280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e282:	f7fe f92d 	bl	800c4e0 <__retarget_lock_release_recursive>
 800e286:	89ab      	ldrh	r3, [r5, #12]
 800e288:	065b      	lsls	r3, r3, #25
 800e28a:	f53f af1f 	bmi.w	800e0cc <_vfiprintf_r+0x44>
 800e28e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e290:	e71e      	b.n	800e0d0 <_vfiprintf_r+0x48>
 800e292:	ab03      	add	r3, sp, #12
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	462a      	mov	r2, r5
 800e298:	4b06      	ldr	r3, [pc, #24]	@ (800e2b4 <_vfiprintf_r+0x22c>)
 800e29a:	a904      	add	r1, sp, #16
 800e29c:	4630      	mov	r0, r6
 800e29e:	f7fd fe15 	bl	800becc <_printf_i>
 800e2a2:	e7e4      	b.n	800e26e <_vfiprintf_r+0x1e6>
 800e2a4:	0800f3f8 	.word	0x0800f3f8
 800e2a8:	0800f3fe 	.word	0x0800f3fe
 800e2ac:	0800f402 	.word	0x0800f402
 800e2b0:	0800b999 	.word	0x0800b999
 800e2b4:	0800e065 	.word	0x0800e065

0800e2b8 <__swbuf_r>:
 800e2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2ba:	460e      	mov	r6, r1
 800e2bc:	4614      	mov	r4, r2
 800e2be:	4605      	mov	r5, r0
 800e2c0:	b118      	cbz	r0, 800e2ca <__swbuf_r+0x12>
 800e2c2:	6a03      	ldr	r3, [r0, #32]
 800e2c4:	b90b      	cbnz	r3, 800e2ca <__swbuf_r+0x12>
 800e2c6:	f7fd ffad 	bl	800c224 <__sinit>
 800e2ca:	69a3      	ldr	r3, [r4, #24]
 800e2cc:	60a3      	str	r3, [r4, #8]
 800e2ce:	89a3      	ldrh	r3, [r4, #12]
 800e2d0:	071a      	lsls	r2, r3, #28
 800e2d2:	d501      	bpl.n	800e2d8 <__swbuf_r+0x20>
 800e2d4:	6923      	ldr	r3, [r4, #16]
 800e2d6:	b943      	cbnz	r3, 800e2ea <__swbuf_r+0x32>
 800e2d8:	4621      	mov	r1, r4
 800e2da:	4628      	mov	r0, r5
 800e2dc:	f000 f82a 	bl	800e334 <__swsetup_r>
 800e2e0:	b118      	cbz	r0, 800e2ea <__swbuf_r+0x32>
 800e2e2:	f04f 37ff 	mov.w	r7, #4294967295
 800e2e6:	4638      	mov	r0, r7
 800e2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2ea:	6823      	ldr	r3, [r4, #0]
 800e2ec:	6922      	ldr	r2, [r4, #16]
 800e2ee:	1a98      	subs	r0, r3, r2
 800e2f0:	6963      	ldr	r3, [r4, #20]
 800e2f2:	b2f6      	uxtb	r6, r6
 800e2f4:	4283      	cmp	r3, r0
 800e2f6:	4637      	mov	r7, r6
 800e2f8:	dc05      	bgt.n	800e306 <__swbuf_r+0x4e>
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	f7ff fd9b 	bl	800de38 <_fflush_r>
 800e302:	2800      	cmp	r0, #0
 800e304:	d1ed      	bne.n	800e2e2 <__swbuf_r+0x2a>
 800e306:	68a3      	ldr	r3, [r4, #8]
 800e308:	3b01      	subs	r3, #1
 800e30a:	60a3      	str	r3, [r4, #8]
 800e30c:	6823      	ldr	r3, [r4, #0]
 800e30e:	1c5a      	adds	r2, r3, #1
 800e310:	6022      	str	r2, [r4, #0]
 800e312:	701e      	strb	r6, [r3, #0]
 800e314:	6962      	ldr	r2, [r4, #20]
 800e316:	1c43      	adds	r3, r0, #1
 800e318:	429a      	cmp	r2, r3
 800e31a:	d004      	beq.n	800e326 <__swbuf_r+0x6e>
 800e31c:	89a3      	ldrh	r3, [r4, #12]
 800e31e:	07db      	lsls	r3, r3, #31
 800e320:	d5e1      	bpl.n	800e2e6 <__swbuf_r+0x2e>
 800e322:	2e0a      	cmp	r6, #10
 800e324:	d1df      	bne.n	800e2e6 <__swbuf_r+0x2e>
 800e326:	4621      	mov	r1, r4
 800e328:	4628      	mov	r0, r5
 800e32a:	f7ff fd85 	bl	800de38 <_fflush_r>
 800e32e:	2800      	cmp	r0, #0
 800e330:	d0d9      	beq.n	800e2e6 <__swbuf_r+0x2e>
 800e332:	e7d6      	b.n	800e2e2 <__swbuf_r+0x2a>

0800e334 <__swsetup_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4b29      	ldr	r3, [pc, #164]	@ (800e3dc <__swsetup_r+0xa8>)
 800e338:	4605      	mov	r5, r0
 800e33a:	6818      	ldr	r0, [r3, #0]
 800e33c:	460c      	mov	r4, r1
 800e33e:	b118      	cbz	r0, 800e348 <__swsetup_r+0x14>
 800e340:	6a03      	ldr	r3, [r0, #32]
 800e342:	b90b      	cbnz	r3, 800e348 <__swsetup_r+0x14>
 800e344:	f7fd ff6e 	bl	800c224 <__sinit>
 800e348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e34c:	0719      	lsls	r1, r3, #28
 800e34e:	d422      	bmi.n	800e396 <__swsetup_r+0x62>
 800e350:	06da      	lsls	r2, r3, #27
 800e352:	d407      	bmi.n	800e364 <__swsetup_r+0x30>
 800e354:	2209      	movs	r2, #9
 800e356:	602a      	str	r2, [r5, #0]
 800e358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e35c:	81a3      	strh	r3, [r4, #12]
 800e35e:	f04f 30ff 	mov.w	r0, #4294967295
 800e362:	e033      	b.n	800e3cc <__swsetup_r+0x98>
 800e364:	0758      	lsls	r0, r3, #29
 800e366:	d512      	bpl.n	800e38e <__swsetup_r+0x5a>
 800e368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e36a:	b141      	cbz	r1, 800e37e <__swsetup_r+0x4a>
 800e36c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e370:	4299      	cmp	r1, r3
 800e372:	d002      	beq.n	800e37a <__swsetup_r+0x46>
 800e374:	4628      	mov	r0, r5
 800e376:	f7fe ff07 	bl	800d188 <_free_r>
 800e37a:	2300      	movs	r3, #0
 800e37c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e37e:	89a3      	ldrh	r3, [r4, #12]
 800e380:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e384:	81a3      	strh	r3, [r4, #12]
 800e386:	2300      	movs	r3, #0
 800e388:	6063      	str	r3, [r4, #4]
 800e38a:	6923      	ldr	r3, [r4, #16]
 800e38c:	6023      	str	r3, [r4, #0]
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	f043 0308 	orr.w	r3, r3, #8
 800e394:	81a3      	strh	r3, [r4, #12]
 800e396:	6923      	ldr	r3, [r4, #16]
 800e398:	b94b      	cbnz	r3, 800e3ae <__swsetup_r+0x7a>
 800e39a:	89a3      	ldrh	r3, [r4, #12]
 800e39c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e3a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3a4:	d003      	beq.n	800e3ae <__swsetup_r+0x7a>
 800e3a6:	4621      	mov	r1, r4
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	f000 f883 	bl	800e4b4 <__smakebuf_r>
 800e3ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3b2:	f013 0201 	ands.w	r2, r3, #1
 800e3b6:	d00a      	beq.n	800e3ce <__swsetup_r+0x9a>
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	60a2      	str	r2, [r4, #8]
 800e3bc:	6962      	ldr	r2, [r4, #20]
 800e3be:	4252      	negs	r2, r2
 800e3c0:	61a2      	str	r2, [r4, #24]
 800e3c2:	6922      	ldr	r2, [r4, #16]
 800e3c4:	b942      	cbnz	r2, 800e3d8 <__swsetup_r+0xa4>
 800e3c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e3ca:	d1c5      	bne.n	800e358 <__swsetup_r+0x24>
 800e3cc:	bd38      	pop	{r3, r4, r5, pc}
 800e3ce:	0799      	lsls	r1, r3, #30
 800e3d0:	bf58      	it	pl
 800e3d2:	6962      	ldrpl	r2, [r4, #20]
 800e3d4:	60a2      	str	r2, [r4, #8]
 800e3d6:	e7f4      	b.n	800e3c2 <__swsetup_r+0x8e>
 800e3d8:	2000      	movs	r0, #0
 800e3da:	e7f7      	b.n	800e3cc <__swsetup_r+0x98>
 800e3dc:	20000038 	.word	0x20000038

0800e3e0 <_raise_r>:
 800e3e0:	291f      	cmp	r1, #31
 800e3e2:	b538      	push	{r3, r4, r5, lr}
 800e3e4:	4605      	mov	r5, r0
 800e3e6:	460c      	mov	r4, r1
 800e3e8:	d904      	bls.n	800e3f4 <_raise_r+0x14>
 800e3ea:	2316      	movs	r3, #22
 800e3ec:	6003      	str	r3, [r0, #0]
 800e3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800e3f2:	bd38      	pop	{r3, r4, r5, pc}
 800e3f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e3f6:	b112      	cbz	r2, 800e3fe <_raise_r+0x1e>
 800e3f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e3fc:	b94b      	cbnz	r3, 800e412 <_raise_r+0x32>
 800e3fe:	4628      	mov	r0, r5
 800e400:	f000 f830 	bl	800e464 <_getpid_r>
 800e404:	4622      	mov	r2, r4
 800e406:	4601      	mov	r1, r0
 800e408:	4628      	mov	r0, r5
 800e40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e40e:	f000 b817 	b.w	800e440 <_kill_r>
 800e412:	2b01      	cmp	r3, #1
 800e414:	d00a      	beq.n	800e42c <_raise_r+0x4c>
 800e416:	1c59      	adds	r1, r3, #1
 800e418:	d103      	bne.n	800e422 <_raise_r+0x42>
 800e41a:	2316      	movs	r3, #22
 800e41c:	6003      	str	r3, [r0, #0]
 800e41e:	2001      	movs	r0, #1
 800e420:	e7e7      	b.n	800e3f2 <_raise_r+0x12>
 800e422:	2100      	movs	r1, #0
 800e424:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e428:	4620      	mov	r0, r4
 800e42a:	4798      	blx	r3
 800e42c:	2000      	movs	r0, #0
 800e42e:	e7e0      	b.n	800e3f2 <_raise_r+0x12>

0800e430 <raise>:
 800e430:	4b02      	ldr	r3, [pc, #8]	@ (800e43c <raise+0xc>)
 800e432:	4601      	mov	r1, r0
 800e434:	6818      	ldr	r0, [r3, #0]
 800e436:	f7ff bfd3 	b.w	800e3e0 <_raise_r>
 800e43a:	bf00      	nop
 800e43c:	20000038 	.word	0x20000038

0800e440 <_kill_r>:
 800e440:	b538      	push	{r3, r4, r5, lr}
 800e442:	4d07      	ldr	r5, [pc, #28]	@ (800e460 <_kill_r+0x20>)
 800e444:	2300      	movs	r3, #0
 800e446:	4604      	mov	r4, r0
 800e448:	4608      	mov	r0, r1
 800e44a:	4611      	mov	r1, r2
 800e44c:	602b      	str	r3, [r5, #0]
 800e44e:	f7f5 fee5 	bl	800421c <_kill>
 800e452:	1c43      	adds	r3, r0, #1
 800e454:	d102      	bne.n	800e45c <_kill_r+0x1c>
 800e456:	682b      	ldr	r3, [r5, #0]
 800e458:	b103      	cbz	r3, 800e45c <_kill_r+0x1c>
 800e45a:	6023      	str	r3, [r4, #0]
 800e45c:	bd38      	pop	{r3, r4, r5, pc}
 800e45e:	bf00      	nop
 800e460:	20000c60 	.word	0x20000c60

0800e464 <_getpid_r>:
 800e464:	f7f5 bed3 	b.w	800420e <_getpid>

0800e468 <__swhatbuf_r>:
 800e468:	b570      	push	{r4, r5, r6, lr}
 800e46a:	460c      	mov	r4, r1
 800e46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e470:	2900      	cmp	r1, #0
 800e472:	b096      	sub	sp, #88	@ 0x58
 800e474:	4615      	mov	r5, r2
 800e476:	461e      	mov	r6, r3
 800e478:	da0d      	bge.n	800e496 <__swhatbuf_r+0x2e>
 800e47a:	89a3      	ldrh	r3, [r4, #12]
 800e47c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e480:	f04f 0100 	mov.w	r1, #0
 800e484:	bf14      	ite	ne
 800e486:	2340      	movne	r3, #64	@ 0x40
 800e488:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e48c:	2000      	movs	r0, #0
 800e48e:	6031      	str	r1, [r6, #0]
 800e490:	602b      	str	r3, [r5, #0]
 800e492:	b016      	add	sp, #88	@ 0x58
 800e494:	bd70      	pop	{r4, r5, r6, pc}
 800e496:	466a      	mov	r2, sp
 800e498:	f000 f848 	bl	800e52c <_fstat_r>
 800e49c:	2800      	cmp	r0, #0
 800e49e:	dbec      	blt.n	800e47a <__swhatbuf_r+0x12>
 800e4a0:	9901      	ldr	r1, [sp, #4]
 800e4a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e4a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e4aa:	4259      	negs	r1, r3
 800e4ac:	4159      	adcs	r1, r3
 800e4ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e4b2:	e7eb      	b.n	800e48c <__swhatbuf_r+0x24>

0800e4b4 <__smakebuf_r>:
 800e4b4:	898b      	ldrh	r3, [r1, #12]
 800e4b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4b8:	079d      	lsls	r5, r3, #30
 800e4ba:	4606      	mov	r6, r0
 800e4bc:	460c      	mov	r4, r1
 800e4be:	d507      	bpl.n	800e4d0 <__smakebuf_r+0x1c>
 800e4c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e4c4:	6023      	str	r3, [r4, #0]
 800e4c6:	6123      	str	r3, [r4, #16]
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	6163      	str	r3, [r4, #20]
 800e4cc:	b003      	add	sp, #12
 800e4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4d0:	ab01      	add	r3, sp, #4
 800e4d2:	466a      	mov	r2, sp
 800e4d4:	f7ff ffc8 	bl	800e468 <__swhatbuf_r>
 800e4d8:	9f00      	ldr	r7, [sp, #0]
 800e4da:	4605      	mov	r5, r0
 800e4dc:	4639      	mov	r1, r7
 800e4de:	4630      	mov	r0, r6
 800e4e0:	f7fe fec6 	bl	800d270 <_malloc_r>
 800e4e4:	b948      	cbnz	r0, 800e4fa <__smakebuf_r+0x46>
 800e4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4ea:	059a      	lsls	r2, r3, #22
 800e4ec:	d4ee      	bmi.n	800e4cc <__smakebuf_r+0x18>
 800e4ee:	f023 0303 	bic.w	r3, r3, #3
 800e4f2:	f043 0302 	orr.w	r3, r3, #2
 800e4f6:	81a3      	strh	r3, [r4, #12]
 800e4f8:	e7e2      	b.n	800e4c0 <__smakebuf_r+0xc>
 800e4fa:	89a3      	ldrh	r3, [r4, #12]
 800e4fc:	6020      	str	r0, [r4, #0]
 800e4fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e502:	81a3      	strh	r3, [r4, #12]
 800e504:	9b01      	ldr	r3, [sp, #4]
 800e506:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e50a:	b15b      	cbz	r3, 800e524 <__smakebuf_r+0x70>
 800e50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e510:	4630      	mov	r0, r6
 800e512:	f000 f81d 	bl	800e550 <_isatty_r>
 800e516:	b128      	cbz	r0, 800e524 <__smakebuf_r+0x70>
 800e518:	89a3      	ldrh	r3, [r4, #12]
 800e51a:	f023 0303 	bic.w	r3, r3, #3
 800e51e:	f043 0301 	orr.w	r3, r3, #1
 800e522:	81a3      	strh	r3, [r4, #12]
 800e524:	89a3      	ldrh	r3, [r4, #12]
 800e526:	431d      	orrs	r5, r3
 800e528:	81a5      	strh	r5, [r4, #12]
 800e52a:	e7cf      	b.n	800e4cc <__smakebuf_r+0x18>

0800e52c <_fstat_r>:
 800e52c:	b538      	push	{r3, r4, r5, lr}
 800e52e:	4d07      	ldr	r5, [pc, #28]	@ (800e54c <_fstat_r+0x20>)
 800e530:	2300      	movs	r3, #0
 800e532:	4604      	mov	r4, r0
 800e534:	4608      	mov	r0, r1
 800e536:	4611      	mov	r1, r2
 800e538:	602b      	str	r3, [r5, #0]
 800e53a:	f7f5 fece 	bl	80042da <_fstat>
 800e53e:	1c43      	adds	r3, r0, #1
 800e540:	d102      	bne.n	800e548 <_fstat_r+0x1c>
 800e542:	682b      	ldr	r3, [r5, #0]
 800e544:	b103      	cbz	r3, 800e548 <_fstat_r+0x1c>
 800e546:	6023      	str	r3, [r4, #0]
 800e548:	bd38      	pop	{r3, r4, r5, pc}
 800e54a:	bf00      	nop
 800e54c:	20000c60 	.word	0x20000c60

0800e550 <_isatty_r>:
 800e550:	b538      	push	{r3, r4, r5, lr}
 800e552:	4d06      	ldr	r5, [pc, #24]	@ (800e56c <_isatty_r+0x1c>)
 800e554:	2300      	movs	r3, #0
 800e556:	4604      	mov	r4, r0
 800e558:	4608      	mov	r0, r1
 800e55a:	602b      	str	r3, [r5, #0]
 800e55c:	f7f5 fecc 	bl	80042f8 <_isatty>
 800e560:	1c43      	adds	r3, r0, #1
 800e562:	d102      	bne.n	800e56a <_isatty_r+0x1a>
 800e564:	682b      	ldr	r3, [r5, #0]
 800e566:	b103      	cbz	r3, 800e56a <_isatty_r+0x1a>
 800e568:	6023      	str	r3, [r4, #0]
 800e56a:	bd38      	pop	{r3, r4, r5, pc}
 800e56c:	20000c60 	.word	0x20000c60

0800e570 <_init>:
 800e570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e572:	bf00      	nop
 800e574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e576:	bc08      	pop	{r3}
 800e578:	469e      	mov	lr, r3
 800e57a:	4770      	bx	lr

0800e57c <_fini>:
 800e57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57e:	bf00      	nop
 800e580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e582:	bc08      	pop	{r3}
 800e584:	469e      	mov	lr, r3
 800e586:	4770      	bx	lr
