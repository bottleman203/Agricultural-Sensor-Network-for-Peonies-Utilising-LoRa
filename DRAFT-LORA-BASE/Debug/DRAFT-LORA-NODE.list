
DRAFT-LORA-NODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f6c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ec  080060ac  080060ac  000070ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006398  08006398  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006398  08006398  00007398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063a0  080063a0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063a0  080063a0  000073a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080063a4  080063a4  000073a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080063a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  20000068  08006410  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08006410  0000829c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e12  00000000  00000000  00008092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003397  00000000  00000000  0001cea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001510  00000000  00000000  00020240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdb  00000000  00000000  00021750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e654  00000000  00000000  0002272b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015172  00000000  00000000  00040d7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6576  00000000  00000000  00055ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c467  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b84  00000000  00000000  0010c4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000094  00000000  00000000  00112030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	08006094 	.word	0x08006094

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	08006094 	.word	0x08006094

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b96a 	b.w	800051c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9d08      	ldr	r5, [sp, #32]
 8000266:	460c      	mov	r4, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14e      	bne.n	800030a <__udivmoddi4+0xaa>
 800026c:	4694      	mov	ip, r2
 800026e:	458c      	cmp	ip, r1
 8000270:	4686      	mov	lr, r0
 8000272:	fab2 f282 	clz	r2, r2
 8000276:	d962      	bls.n	800033e <__udivmoddi4+0xde>
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0320 	rsb	r3, r2, #32
 800027e:	4091      	lsls	r1, r2
 8000280:	fa20 f303 	lsr.w	r3, r0, r3
 8000284:	fa0c fc02 	lsl.w	ip, ip, r2
 8000288:	4319      	orrs	r1, r3
 800028a:	fa00 fe02 	lsl.w	lr, r0, r2
 800028e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000292:	fa1f f68c 	uxth.w	r6, ip
 8000296:	fbb1 f4f7 	udiv	r4, r1, r7
 800029a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800029e:	fb07 1114 	mls	r1, r7, r4, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb04 f106 	mul.w	r1, r4, r6
 80002aa:	4299      	cmp	r1, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x64>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002b6:	f080 8112 	bcs.w	80004de <__udivmoddi4+0x27e>
 80002ba:	4299      	cmp	r1, r3
 80002bc:	f240 810f 	bls.w	80004de <__udivmoddi4+0x27e>
 80002c0:	3c02      	subs	r4, #2
 80002c2:	4463      	add	r3, ip
 80002c4:	1a59      	subs	r1, r3, r1
 80002c6:	fa1f f38e 	uxth.w	r3, lr
 80002ca:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ce:	fb07 1110 	mls	r1, r7, r0, r1
 80002d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d6:	fb00 f606 	mul.w	r6, r0, r6
 80002da:	429e      	cmp	r6, r3
 80002dc:	d90a      	bls.n	80002f4 <__udivmoddi4+0x94>
 80002de:	eb1c 0303 	adds.w	r3, ip, r3
 80002e2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002e6:	f080 80fc 	bcs.w	80004e2 <__udivmoddi4+0x282>
 80002ea:	429e      	cmp	r6, r3
 80002ec:	f240 80f9 	bls.w	80004e2 <__udivmoddi4+0x282>
 80002f0:	4463      	add	r3, ip
 80002f2:	3802      	subs	r0, #2
 80002f4:	1b9b      	subs	r3, r3, r6
 80002f6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa6>
 80002fe:	40d3      	lsrs	r3, r2
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xba>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb4>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa6>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x150>
 8000322:	42a3      	cmp	r3, r4
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xcc>
 8000326:	4290      	cmp	r0, r2
 8000328:	f0c0 80f0 	bcc.w	800050c <__udivmoddi4+0x2ac>
 800032c:	1a86      	subs	r6, r0, r2
 800032e:	eb64 0303 	sbc.w	r3, r4, r3
 8000332:	2001      	movs	r0, #1
 8000334:	2d00      	cmp	r5, #0
 8000336:	d0e6      	beq.n	8000306 <__udivmoddi4+0xa6>
 8000338:	e9c5 6300 	strd	r6, r3, [r5]
 800033c:	e7e3      	b.n	8000306 <__udivmoddi4+0xa6>
 800033e:	2a00      	cmp	r2, #0
 8000340:	f040 8090 	bne.w	8000464 <__udivmoddi4+0x204>
 8000344:	eba1 040c 	sub.w	r4, r1, ip
 8000348:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb4 f6f8 	udiv	r6, r4, r8
 8000356:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035a:	fb08 4416 	mls	r4, r8, r6, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb07 f006 	mul.w	r0, r7, r6
 8000366:	4298      	cmp	r0, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x11c>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x11a>
 8000374:	4298      	cmp	r0, r3
 8000376:	f200 80cd 	bhi.w	8000514 <__udivmoddi4+0x2b4>
 800037a:	4626      	mov	r6, r4
 800037c:	1a1c      	subs	r4, r3, r0
 800037e:	fa1f f38e 	uxth.w	r3, lr
 8000382:	fbb4 f0f8 	udiv	r0, r4, r8
 8000386:	fb08 4410 	mls	r4, r8, r0, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb00 f707 	mul.w	r7, r0, r7
 8000392:	429f      	cmp	r7, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x148>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f100 34ff 	add.w	r4, r0, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x146>
 80003a0:	429f      	cmp	r7, r3
 80003a2:	f200 80b0 	bhi.w	8000506 <__udivmoddi4+0x2a6>
 80003a6:	4620      	mov	r0, r4
 80003a8:	1bdb      	subs	r3, r3, r7
 80003aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x9c>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa20 fc06 	lsr.w	ip, r0, r6
 80003c0:	fa04 f301 	lsl.w	r3, r4, r1
 80003c4:	ea43 030c 	orr.w	r3, r3, ip
 80003c8:	40f4      	lsrs	r4, r6
 80003ca:	fa00 f801 	lsl.w	r8, r0, r1
 80003ce:	0c38      	lsrs	r0, r7, #16
 80003d0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003d4:	fbb4 fef0 	udiv	lr, r4, r0
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	fb00 441e 	mls	r4, r0, lr, r4
 80003e0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e4:	fb0e f90c 	mul.w	r9, lr, ip
 80003e8:	45a1      	cmp	r9, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d90a      	bls.n	8000406 <__udivmoddi4+0x1a6>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003f6:	f080 8084 	bcs.w	8000502 <__udivmoddi4+0x2a2>
 80003fa:	45a1      	cmp	r9, r4
 80003fc:	f240 8081 	bls.w	8000502 <__udivmoddi4+0x2a2>
 8000400:	f1ae 0e02 	sub.w	lr, lr, #2
 8000404:	443c      	add	r4, r7
 8000406:	eba4 0409 	sub.w	r4, r4, r9
 800040a:	fa1f f983 	uxth.w	r9, r3
 800040e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000412:	fb00 4413 	mls	r4, r0, r3, r4
 8000416:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800041a:	fb03 fc0c 	mul.w	ip, r3, ip
 800041e:	45a4      	cmp	ip, r4
 8000420:	d907      	bls.n	8000432 <__udivmoddi4+0x1d2>
 8000422:	193c      	adds	r4, r7, r4
 8000424:	f103 30ff 	add.w	r0, r3, #4294967295
 8000428:	d267      	bcs.n	80004fa <__udivmoddi4+0x29a>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d965      	bls.n	80004fa <__udivmoddi4+0x29a>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000436:	fba0 9302 	umull	r9, r3, r0, r2
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	429c      	cmp	r4, r3
 8000440:	46ce      	mov	lr, r9
 8000442:	469c      	mov	ip, r3
 8000444:	d351      	bcc.n	80004ea <__udivmoddi4+0x28a>
 8000446:	d04e      	beq.n	80004e6 <__udivmoddi4+0x286>
 8000448:	b155      	cbz	r5, 8000460 <__udivmoddi4+0x200>
 800044a:	ebb8 030e 	subs.w	r3, r8, lr
 800044e:	eb64 040c 	sbc.w	r4, r4, ip
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	40cb      	lsrs	r3, r1
 8000458:	431e      	orrs	r6, r3
 800045a:	40cc      	lsrs	r4, r1
 800045c:	e9c5 6400 	strd	r6, r4, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	e750      	b.n	8000306 <__udivmoddi4+0xa6>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f103 	lsr.w	r1, r0, r3
 800046c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000470:	fa24 f303 	lsr.w	r3, r4, r3
 8000474:	4094      	lsls	r4, r2
 8000476:	430c      	orrs	r4, r1
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000480:	fa1f f78c 	uxth.w	r7, ip
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3110 	mls	r1, r8, r0, r3
 800048c:	0c23      	lsrs	r3, r4, #16
 800048e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000492:	fb00 f107 	mul.w	r1, r0, r7
 8000496:	4299      	cmp	r1, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x24c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f100 36ff 	add.w	r6, r0, #4294967295
 80004a2:	d22c      	bcs.n	80004fe <__udivmoddi4+0x29e>
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d92a      	bls.n	80004fe <__udivmoddi4+0x29e>
 80004a8:	3802      	subs	r0, #2
 80004aa:	4463      	add	r3, ip
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b2a4      	uxth	r4, r4
 80004b0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004b4:	fb08 3311 	mls	r3, r8, r1, r3
 80004b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004bc:	fb01 f307 	mul.w	r3, r1, r7
 80004c0:	42a3      	cmp	r3, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x276>
 80004c4:	eb1c 0404 	adds.w	r4, ip, r4
 80004c8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004cc:	d213      	bcs.n	80004f6 <__udivmoddi4+0x296>
 80004ce:	42a3      	cmp	r3, r4
 80004d0:	d911      	bls.n	80004f6 <__udivmoddi4+0x296>
 80004d2:	3902      	subs	r1, #2
 80004d4:	4464      	add	r4, ip
 80004d6:	1ae4      	subs	r4, r4, r3
 80004d8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004dc:	e739      	b.n	8000352 <__udivmoddi4+0xf2>
 80004de:	4604      	mov	r4, r0
 80004e0:	e6f0      	b.n	80002c4 <__udivmoddi4+0x64>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e706      	b.n	80002f4 <__udivmoddi4+0x94>
 80004e6:	45c8      	cmp	r8, r9
 80004e8:	d2ae      	bcs.n	8000448 <__udivmoddi4+0x1e8>
 80004ea:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ee:	eb63 0c07 	sbc.w	ip, r3, r7
 80004f2:	3801      	subs	r0, #1
 80004f4:	e7a8      	b.n	8000448 <__udivmoddi4+0x1e8>
 80004f6:	4631      	mov	r1, r6
 80004f8:	e7ed      	b.n	80004d6 <__udivmoddi4+0x276>
 80004fa:	4603      	mov	r3, r0
 80004fc:	e799      	b.n	8000432 <__udivmoddi4+0x1d2>
 80004fe:	4630      	mov	r0, r6
 8000500:	e7d4      	b.n	80004ac <__udivmoddi4+0x24c>
 8000502:	46d6      	mov	lr, sl
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1a6>
 8000506:	4463      	add	r3, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e74d      	b.n	80003a8 <__udivmoddi4+0x148>
 800050c:	4606      	mov	r6, r0
 800050e:	4623      	mov	r3, r4
 8000510:	4608      	mov	r0, r1
 8000512:	e70f      	b.n	8000334 <__udivmoddi4+0xd4>
 8000514:	3e02      	subs	r6, #2
 8000516:	4463      	add	r3, ip
 8000518:	e730      	b.n	800037c <__udivmoddi4+0x11c>
 800051a:	bf00      	nop

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000528:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800052c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800052e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	4313      	orrs	r3, r2
 8000536:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800053c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000544:	68fb      	ldr	r3, [r7, #12]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr

08000550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000564:	2004      	movs	r0, #4
 8000566:	f7ff ffdb 	bl	8000520 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	2001      	movs	r0, #1
 800056c:	f7ff ffd8 	bl	8000520 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2138      	movs	r1, #56	@ 0x38
 8000574:	4809      	ldr	r0, [pc, #36]	@ (800059c <MX_GPIO_Init+0x4c>)
 8000576:	f002 fa4f 	bl	8002a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 800057a:	2338      	movs	r3, #56	@ 0x38
 800057c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800057e:	2301      	movs	r3, #1
 8000580:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000586:	2303      	movs	r3, #3
 8000588:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4619      	mov	r1, r3
 800058e:	4803      	ldr	r0, [pc, #12]	@ (800059c <MX_GPIO_Init+0x4c>)
 8000590:	f002 f8e2 	bl	8002758 <HAL_GPIO_Init>

}
 8000594:	bf00      	nop
 8000596:	3718      	adds	r7, #24
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	48000800 	.word	0x48000800

080005a0 <LL_AHB2_GRP1_EnableClock>:
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4313      	orrs	r3, r2
 80005b6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80005bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4013      	ands	r3, r2
 80005c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005c4:	68fb      	ldr	r3, [r7, #12]
}
 80005c6:	bf00      	nop
 80005c8:	3714      	adds	r7, #20
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b0e6      	sub	sp, #408	@ 0x198
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f001 ff19 	bl	800240c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f8a5 	bl	8000728 <SystemClock_Config>
   * RF_IRQ0 = PB3
   * RF_IRQ1 = PB5
   * RF_IRQ2 = PB8
   */

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  // Enable GPIO Clocks
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ffd6 	bl	80005a0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	2002      	movs	r0, #2
 80005f6:	f7ff ffd3 	bl	80005a0 <LL_AHB2_GRP1_EnableClock>

  // DEBUG_SUBGHZSPI_{NSSOUT, SCKOUT, MSIOOUT, MOSIOUT} pins
  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
 80005fa:	23f0      	movs	r3, #240	@ 0xf0
 80005fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000600:	2302      	movs	r3, #2
 8000602:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800060c:	2303      	movs	r3, #3
 800060e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_SUBGHZSPI;
 8000612:	230d      	movs	r3, #13
 8000614:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800061c:	4619      	mov	r1, r3
 800061e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000622:	f002 f899 	bl	8002758 <HAL_GPIO_Init>

  // DEBUG_RF_{HSE32RDY, NRESET} pins
  GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 8000626:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800062a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  GPIO_InitStruct.Alternate = GPIO_AF13_DEBUG_RF;
 800062e:	230d      	movs	r3, #13
 8000630:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000638:	4619      	mov	r1, r3
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f002 f88b 	bl	8002758 <HAL_GPIO_Init>

  // DEBUG_RF_{SMPSRDY, LDORDY} pins
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_4;
 8000642:	2314      	movs	r3, #20
 8000644:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000648:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800064c:	4619      	mov	r1, r3
 800064e:	4832      	ldr	r0, [pc, #200]	@ (8000718 <main+0x148>)
 8000650:	f002 f882 	bl	8002758 <HAL_GPIO_Init>

  // RF_BUSY pin
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000658:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_BUSY;
 800065c:	2306      	movs	r3, #6
 800065e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8000666:	4619      	mov	r1, r3
 8000668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800066c:	f002 f874 	bl	8002758 <HAL_GPIO_Init>

  // RF_{IRQ0, IRQ1, IRQ2} pins
  GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_5 | GPIO_PIN_8;
 8000670:	f44f 7394 	mov.w	r3, #296	@ 0x128
 8000674:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800067c:	4619      	mov	r1, r3
 800067e:	4826      	ldr	r0, [pc, #152]	@ (8000718 <main+0x148>)
 8000680:	f002 f86a 	bl	8002758 <HAL_GPIO_Init>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f7ff ff64 	bl	8000550 <MX_GPIO_Init>
  MX_SUBGHZ_Init();
 8000688:	f000 fc4c 	bl	8000f24 <MX_SUBGHZ_Init>
  MX_USART2_UART_Init();
 800068c:	f000 fcdc 	bl	8001048 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_LED_Init(LED_GREEN);
 8000690:	2001      	movs	r0, #1
 8000692:	f000 fdad 	bl	80011f0 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000696:	2002      	movs	r0, #2
 8000698:	f000 fdaa 	bl	80011f0 <BSP_LED_Init>
  BSP_LED_Init(LED_BLUE);
 800069c:	2000      	movs	r0, #0
 800069e:	f000 fda7 	bl	80011f0 <BSP_LED_Init>

  strcpy(uartBuff, "\nAngus is doing his best\n---------------\r\n");
 80006a2:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80006a6:	4a1d      	ldr	r2, [pc, #116]	@ (800071c <main+0x14c>)
 80006a8:	461c      	mov	r4, r3
 80006aa:	4615      	mov	r5, r2
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b8:	c403      	stmia	r4!, {r0, r1}
 80006ba:	8022      	strh	r2, [r4, #0]
 80006bc:	3402      	adds	r4, #2
 80006be:	0c13      	lsrs	r3, r2, #16
 80006c0:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 80006c2:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff fd5a 	bl	8000180 <strlen>
 80006cc:	4603      	mov	r3, r0
 80006ce:	b29a      	uxth	r2, r3
 80006d0:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	4811      	ldr	r0, [pc, #68]	@ (8000720 <main+0x150>)
 80006da:	f004 fa26 	bl	8004b2a <HAL_UART_Transmit>
//  sprintf(uartBuff, "LORA_MODULATION\r\nLORA_BW=%d Hz\r\nLORA_SF=%d\r\n", (1 << LORA_BANDWIDTH) * 125, LORA_SPREADING_FACTOR);
//  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
  radioInit();
 80006de:	f000 f907 	bl	80008f0 <radioInit>
  LEDstartup();
 80006e2:	f000 f8db 	bl	800089c <LEDstartup>

  uint8_t txData[] = "Gus, destroyer of worlds";
 80006e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000724 <main+0x154>)
 80006e8:	f507 7482 	add.w	r4, r7, #260	@ 0x104
 80006ec:	461d      	mov	r5, r3
 80006ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f6:	c403      	stmia	r4!, {r0, r1}
 80006f8:	7022      	strb	r2, [r4, #0]
    /* USER CODE BEGIN 3 */



	   //Transmit Data
	    transmitData(txData);
 80006fa:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 f864 	bl	80007cc <transmitData>
	    BSP_LED_Toggle(LED_RED);
 8000704:	2002      	movs	r0, #2
 8000706:	f000 fdc7 	bl	8001298 <BSP_LED_Toggle>
	    HAL_Delay(1000);
 800070a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070e:	f001 fef3 	bl	80024f8 <HAL_Delay>
	    transmitData(txData);
 8000712:	bf00      	nop
 8000714:	e7f1      	b.n	80006fa <main+0x12a>
 8000716:	bf00      	nop
 8000718:	48000400 	.word	0x48000400
 800071c:	080060ac 	.word	0x080060ac
 8000720:	200000ac 	.word	0x200000ac
 8000724:	080060d8 	.word	0x080060d8

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b09a      	sub	sp, #104	@ 0x68
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 0320 	add.w	r3, r7, #32
 8000732:	2248      	movs	r2, #72	@ 0x48
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f005 f81a 	bl	8005770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074e:	4b1e      	ldr	r3, [pc, #120]	@ (80007c8 <SystemClock_Config+0xa0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000756:	4a1c      	ldr	r2, [pc, #112]	@ (80007c8 <SystemClock_Config+0xa0>)
 8000758:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800075c:	6013      	str	r3, [r2, #0]
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <SystemClock_Config+0xa0>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000766:	603b      	str	r3, [r7, #0]
 8000768:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800076a:	2320      	movs	r3, #32
 800076c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800076e:	2301      	movs	r3, #1
 8000770:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000772:	2300      	movs	r3, #0
 8000774:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000776:	23b0      	movs	r3, #176	@ 0xb0
 8000778:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800077a:	2300      	movs	r3, #0
 800077c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	4618      	mov	r0, r3
 8000784:	f002 fc4a 	bl	800301c <HAL_RCC_OscConfig>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800078e:	f000 fb6f 	bl	8000e70 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000792:	234f      	movs	r3, #79	@ 0x4f
 8000794:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	2102      	movs	r1, #2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f002 ffb6 	bl	8003720 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007ba:	f000 fb59 	bl	8000e70 <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3768      	adds	r7, #104	@ 0x68
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58000400 	.word	0x58000400

080007cc <transmitData>:
  * @param  data Pointer to data to be transmitted
  * @param  size Size of the data to be transmitted
  * @retval None
  */
void transmitData(char *data)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b0c2      	sub	sp, #264	@ 0x108
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80007da:	6018      	str	r0, [r3, #0]
	// Print the data being transmitted to UART
	    char uartBuff[256];  // Buffer for UART message
	    snprintf(uartBuff, sizeof(uartBuff), "Transmitting Data: %s\r\n", data);
 80007dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80007e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80007e4:	f107 0008 	add.w	r0, r7, #8
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a28      	ldr	r2, [pc, #160]	@ (800088c <transmitData+0xc0>)
 80007ec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007f0:	f004 ff6a 	bl	80056c8 <sniprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fcc1 	bl	8000180 <strlen>
 80007fe:	4603      	mov	r3, r0
 8000800:	b29a      	uxth	r2, r3
 8000802:	f107 0108 	add.w	r1, r7, #8
 8000806:	f04f 33ff 	mov.w	r3, #4294967295
 800080a:	4821      	ldr	r0, [pc, #132]	@ (8000890 <transmitData+0xc4>)
 800080c:	f004 f98d 	bl	8004b2a <HAL_UART_Transmit>
    // Configure IRQ for TX Done and TX Timeout
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8000810:	2300      	movs	r3, #0
 8000812:	2200      	movs	r2, #0
 8000814:	f240 2101 	movw	r1, #513	@ 0x201
 8000818:	f240 2001 	movw	r0, #513	@ 0x201
 800081c:	f001 f86a 	bl	80018f4 <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    // Set the radio to TX mode
    SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000820:	2101      	movs	r1, #1
 8000822:	2001      	movs	r0, #1
 8000824:	f001 fcd4 	bl	80021d0 <SUBGRF_SetSwitch>

    // Workaround before each packet transmission (if required by the chip)
    SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8000828:	f640 0089 	movw	r0, #2185	@ 0x889
 800082c:	f001 fc12 	bl	8002054 <SUBGRF_ReadRegister>
 8000830:	4603      	mov	r3, r0
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4619      	mov	r1, r3
 800083a:	f640 0089 	movw	r0, #2185	@ 0x889
 800083e:	f001 fbf5 	bl	800202c <SUBGRF_WriteRegister>

    // Set payload length
    packetParams.Params.LoRa.PayloadLength = strlen(data);
 8000842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000846:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	f7ff fc98 	bl	8000180 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b2da      	uxtb	r2, r3
 8000854:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <transmitData+0xc8>)
 8000856:	745a      	strb	r2, [r3, #17]
    SUBGRF_SetPacketParams(&packetParams);
 8000858:	480e      	ldr	r0, [pc, #56]	@ (8000894 <transmitData+0xc8>)
 800085a:	f001 fab3 	bl	8001dc4 <SUBGRF_SetPacketParams>

    // Send the payload
    SUBGRF_SendPayload((uint8_t *)data, packetParams.Params.LoRa.PayloadLength, 0);
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <transmitData+0xc8>)
 8000860:	7c59      	ldrb	r1, [r3, #17]
 8000862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000866:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800086a:	2200      	movs	r2, #0
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	f000 feb9 	bl	80015e4 <SUBGRF_SendPayload>

    // Print debug information (optional)
    HAL_UART_Transmit(&huart2, (uint8_t *)"Transmitting Data...\r\n", 22, HAL_MAX_DELAY);
 8000872:	f04f 33ff 	mov.w	r3, #4294967295
 8000876:	2216      	movs	r2, #22
 8000878:	4907      	ldr	r1, [pc, #28]	@ (8000898 <transmitData+0xcc>)
 800087a:	4805      	ldr	r0, [pc, #20]	@ (8000890 <transmitData+0xc4>)
 800087c:	f004 f955 	bl	8004b2a <HAL_UART_Transmit>
}
 8000880:	bf00      	nop
 8000882:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	080060f4 	.word	0x080060f4
 8000890:	200000ac 	.word	0x200000ac
 8000894:	20000088 	.word	0x20000088
 8000898:	0800610c 	.word	0x0800610c

0800089c <LEDstartup>:
        }
//    }
}

void LEDstartup(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
    // Flash each LED 3 times
    for (int i = 0; i < 3; i++)
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	e01a      	b.n	80008de <LEDstartup+0x42>
    {
        // Toggle the Green LED
        BSP_LED_Toggle(LED_GREEN);
 80008a8:	2001      	movs	r0, #1
 80008aa:	f000 fcf5 	bl	8001298 <BSP_LED_Toggle>
        BSP_LED_Toggle(LED_RED);
 80008ae:	2002      	movs	r0, #2
 80008b0:	f000 fcf2 	bl	8001298 <BSP_LED_Toggle>
        BSP_LED_Toggle(LED_BLUE);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 fcef 	bl	8001298 <BSP_LED_Toggle>
        HAL_Delay(200); // Delay 200ms
 80008ba:	20c8      	movs	r0, #200	@ 0xc8
 80008bc:	f001 fe1c 	bl	80024f8 <HAL_Delay>

        // Toggle the  LED again to turn it off
        BSP_LED_Toggle(LED_GREEN);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f000 fce9 	bl	8001298 <BSP_LED_Toggle>
        BSP_LED_Toggle(LED_RED);
 80008c6:	2002      	movs	r0, #2
 80008c8:	f000 fce6 	bl	8001298 <BSP_LED_Toggle>
        BSP_LED_Toggle(LED_BLUE);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 fce3 	bl	8001298 <BSP_LED_Toggle>
        HAL_Delay(200);
 80008d2:	20c8      	movs	r0, #200	@ 0xc8
 80008d4:	f001 fe10 	bl	80024f8 <HAL_Delay>
    for (int i = 0; i < 3; i++)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3301      	adds	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	dde1      	ble.n	80008a8 <LEDstartup+0xc>

    }
}
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <radioInit>:
/**
  * @brief  Initialize the Sub-GHz radio and dependent hardware.
  * @retval None
  */
void radioInit(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b088      	sub	sp, #32
 80008f4:	af00      	add	r7, sp, #0
  // Initialize the hardware (SPI bus, TCXO control, RF switch)
  SUBGRF_Init(RadioOnDioIrq);
 80008f6:	4830      	ldr	r0, [pc, #192]	@ (80009b8 <radioInit+0xc8>)
 80008f8:	f000 fdfa 	bl	80014f0 <SUBGRF_Init>

  // Use DCDC converter if `DCDC_ENABLE` is defined in radio_conf.h
  // "By default, the SMPS clock detection is disabled and must be enabled before enabling the SMPS." (6.1 in RM0453)
  SUBGRF_WriteRegister(SUBGHZ_SMPSC0R, (SUBGRF_ReadRegister(SUBGHZ_SMPSC0R) | SMPS_CLK_DET_ENABLE));
 80008fc:	f640 1016 	movw	r0, #2326	@ 0x916
 8000900:	f001 fba8 	bl	8002054 <SUBGRF_ReadRegister>
 8000904:	4603      	mov	r3, r0
 8000906:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800090a:	b2db      	uxtb	r3, r3
 800090c:	4619      	mov	r1, r3
 800090e:	f640 1016 	movw	r0, #2326	@ 0x916
 8000912:	f001 fb8b 	bl	800202c <SUBGRF_WriteRegister>
  SUBGRF_SetRegulatorMode();
 8000916:	f000 ff24 	bl	8001762 <SUBGRF_SetRegulatorMode>

  // Use the whole 256-byte buffer for both TX and RX
  SUBGRF_SetBufferBaseAddress(0x00, 0x00);
 800091a:	2100      	movs	r1, #0
 800091c:	2000      	movs	r0, #0
 800091e:	f001 faef 	bl	8001f00 <SUBGRF_SetBufferBaseAddress>

  SUBGRF_SetRfFrequency(RF_FREQUENCY);
 8000922:	4826      	ldr	r0, [pc, #152]	@ (80009bc <radioInit+0xcc>)
 8000924:	f001 f842 	bl	80019ac <SUBGRF_SetRfFrequency>
  SUBGRF_SetRfTxPower(TX_OUTPUT_POWER);
 8000928:	200e      	movs	r0, #14
 800092a:	f001 fc79 	bl	8002220 <SUBGRF_SetRfTxPower>
  SUBGRF_SetStopRxTimerOnPreambleDetect(false);
 800092e:	2000      	movs	r0, #0
 8000930:	f000 ff08 	bl	8001744 <SUBGRF_SetStopRxTimerOnPreambleDetect>

  SUBGRF_SetPacketType(PACKET_TYPE_LORA);
 8000934:	2001      	movs	r0, #1
 8000936:	f001 f87f 	bl	8001a38 <SUBGRF_SetPacketType>

  SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800093a:	2114      	movs	r1, #20
 800093c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8000940:	f001 fb74 	bl	800202c <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8000944:	2124      	movs	r1, #36	@ 0x24
 8000946:	f240 7041 	movw	r0, #1857	@ 0x741
 800094a:	f001 fb6f 	bl	800202c <SUBGRF_WriteRegister>

  ModulationParams_t modulationParams;
  modulationParams.PacketType = PACKET_TYPE_LORA;
 800094e:	2301      	movs	r3, #1
 8000950:	713b      	strb	r3, [r7, #4]
  modulationParams.Params.LoRa.Bandwidth = Bandwidths[LORA_BANDWIDTH];
 8000952:	2304      	movs	r3, #4
 8000954:	777b      	strb	r3, [r7, #29]
  modulationParams.Params.LoRa.CodingRate = (RadioLoRaCodingRates_t)LORA_CODINGRATE;
 8000956:	2301      	movs	r3, #1
 8000958:	77bb      	strb	r3, [r7, #30]
  modulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800095a:	2300      	movs	r3, #0
 800095c:	77fb      	strb	r3, [r7, #31]
  modulationParams.Params.LoRa.SpreadingFactor = (RadioLoRaSpreadingFactors_t)LORA_SPREADING_FACTOR;
 800095e:	2307      	movs	r3, #7
 8000960:	773b      	strb	r3, [r7, #28]
  SUBGRF_SetModulationParams(&modulationParams);
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4618      	mov	r0, r3
 8000966:	f001 f95b 	bl	8001c20 <SUBGRF_SetModulationParams>

  packetParams.PacketType = PACKET_TYPE_LORA;
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <radioInit+0xd0>)
 800096c:	2201      	movs	r2, #1
 800096e:	701a      	strb	r2, [r3, #0]
  packetParams.Params.LoRa.CrcMode = LORA_CRC_ON;
 8000970:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <radioInit+0xd0>)
 8000972:	2201      	movs	r2, #1
 8000974:	749a      	strb	r2, [r3, #18]
  packetParams.Params.LoRa.HeaderType = LORA_PACKET_VARIABLE_LENGTH;
 8000976:	4b12      	ldr	r3, [pc, #72]	@ (80009c0 <radioInit+0xd0>)
 8000978:	2200      	movs	r2, #0
 800097a:	741a      	strb	r2, [r3, #16]
  packetParams.Params.LoRa.InvertIQ = LORA_IQ_NORMAL;
 800097c:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <radioInit+0xd0>)
 800097e:	2200      	movs	r2, #0
 8000980:	74da      	strb	r2, [r3, #19]
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000982:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <radioInit+0xd0>)
 8000984:	22ff      	movs	r2, #255	@ 0xff
 8000986:	745a      	strb	r2, [r3, #17]
  packetParams.Params.LoRa.PreambleLength = LORA_PREAMBLE_LENGTH;
 8000988:	4b0d      	ldr	r3, [pc, #52]	@ (80009c0 <radioInit+0xd0>)
 800098a:	2208      	movs	r2, #8
 800098c:	81da      	strh	r2, [r3, #14]
  SUBGRF_SetPacketParams(&packetParams);
 800098e:	480c      	ldr	r0, [pc, #48]	@ (80009c0 <radioInit+0xd0>)
 8000990:	f001 fa18 	bl	8001dc4 <SUBGRF_SetPacketParams>

  //SUBGRF_SetLoRaSymbNumTimeout(LORA_SYMBOL_TIMEOUT);

  // WORKAROUND - Optimizing the Inverted IQ Operation, see DS_SX1261-2_V1.2 datasheet chapter 15.4
  // RegIqPolaritySetup @address 0x0736
  SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 8000994:	f240 7036 	movw	r0, #1846	@ 0x736
 8000998:	f001 fb5c 	bl	8002054 <SUBGRF_ReadRegister>
 800099c:	4603      	mov	r3, r0
 800099e:	f043 0304 	orr.w	r3, r3, #4
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	4619      	mov	r1, r3
 80009a6:	f240 7036 	movw	r0, #1846	@ 0x736
 80009aa:	f001 fb3f 	bl	800202c <SUBGRF_WriteRegister>
}
 80009ae:	bf00      	nop
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	080009c5 	.word	0x080009c5
 80009bc:	19cf0e40 	.word	0x19cf0e40
 80009c0:	20000088 	.word	0x20000088

080009c4 <RadioOnDioIrq>:
  * @brief  Radio IRQ handler
  * @param  radioIrq Interrupt type (TX done, RX done, etc.)
  * @retval None
  */
void RadioOnDioIrq(RadioIrqMasks_t radioIrq)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	80fb      	strh	r3, [r7, #6]
    switch (radioIrq)
 80009ce:	88fb      	ldrh	r3, [r7, #6]
 80009d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009d4:	d017      	beq.n	8000a06 <RadioOnDioIrq+0x42>
 80009d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009da:	dc1c      	bgt.n	8000a16 <RadioOnDioIrq+0x52>
 80009dc:	2b40      	cmp	r3, #64	@ 0x40
 80009de:	d016      	beq.n	8000a0e <RadioOnDioIrq+0x4a>
 80009e0:	2b40      	cmp	r3, #64	@ 0x40
 80009e2:	dc18      	bgt.n	8000a16 <RadioOnDioIrq+0x52>
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d002      	beq.n	80009ee <RadioOnDioIrq+0x2a>
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d008      	beq.n	80009fe <RadioOnDioIrq+0x3a>
            break;
        case IRQ_CRC_ERROR:
            eventReceptor = eventRxError;
            break;
        default:
            break;
 80009ec:	e013      	b.n	8000a16 <RadioOnDioIrq+0x52>
            HAL_UART_Transmit(&huart2, (uint8_t *)"TX Done\r\n", 9, HAL_MAX_DELAY);
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	2209      	movs	r2, #9
 80009f4:	490a      	ldr	r1, [pc, #40]	@ (8000a20 <RadioOnDioIrq+0x5c>)
 80009f6:	480b      	ldr	r0, [pc, #44]	@ (8000a24 <RadioOnDioIrq+0x60>)
 80009f8:	f004 f897 	bl	8004b2a <HAL_UART_Transmit>
            break;
 80009fc:	e00c      	b.n	8000a18 <RadioOnDioIrq+0x54>
            eventReceptor = eventRxDone;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <RadioOnDioIrq+0x64>)
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <RadioOnDioIrq+0x68>)
 8000a02:	601a      	str	r2, [r3, #0]
            break;
 8000a04:	e008      	b.n	8000a18 <RadioOnDioIrq+0x54>
            eventReceptor = eventRxTimeout;
 8000a06:	4b08      	ldr	r3, [pc, #32]	@ (8000a28 <RadioOnDioIrq+0x64>)
 8000a08:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <RadioOnDioIrq+0x6c>)
 8000a0a:	601a      	str	r2, [r3, #0]
            break;
 8000a0c:	e004      	b.n	8000a18 <RadioOnDioIrq+0x54>
            eventReceptor = eventRxError;
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <RadioOnDioIrq+0x64>)
 8000a10:	4a08      	ldr	r2, [pc, #32]	@ (8000a34 <RadioOnDioIrq+0x70>)
 8000a12:	601a      	str	r2, [r3, #0]
            break;
 8000a14:	e000      	b.n	8000a18 <RadioOnDioIrq+0x54>
            break;
 8000a16:	bf00      	nop
    }
}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	08006160 	.word	0x08006160
 8000a24:	200000ac 	.word	0x200000ac
 8000a28:	20000084 	.word	0x20000084
 8000a2c:	08000a39 	.word	0x08000a39
 8000a30:	08000b2d 	.word	0x08000b2d
 8000a34:	08000b99 	.word	0x08000b99

08000a38 <eventRxDone>:
  * @brief  Process the RX Done event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxDone(pingPongFSM_t *const fsm)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Done\r\n", 15, HAL_MAX_DELAY);
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	220f      	movs	r2, #15
 8000a46:	4935      	ldr	r1, [pc, #212]	@ (8000b1c <eventRxDone+0xe4>)
 8000a48:	4835      	ldr	r0, [pc, #212]	@ (8000b20 <eventRxDone+0xe8>)
 8000a4a:	f004 f86e 	bl	8004b2a <HAL_UART_Transmit>
  switch(fsm->state)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d002      	beq.n	8000a5c <eventRxDone+0x24>
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	d035      	beq.n	8000ac6 <eventRxDone+0x8e>
        default:
          break;
      }
      break;
    default:
      break;
 8000a5a:	e05b      	b.n	8000b14 <eventRxDone+0xdc>
      switch (fsm->subState)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	785b      	ldrb	r3, [r3, #1]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d12e      	bne.n	8000ac2 <eventRxDone+0x8a>
          transitionRxDone(fsm);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f9bd 	bl	8000de4 <transitionRxDone>
          if (strncmp(fsm->rxBuffer, "PONG", 4) == 0)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3310      	adds	r3, #16
 8000a6e:	2204      	movs	r2, #4
 8000a70:	492c      	ldr	r1, [pc, #176]	@ (8000b24 <eventRxDone+0xec>)
 8000a72:	4618      	mov	r0, r3
 8000a74:	f004 fe84 	bl	8005780 <strncmp>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10c      	bne.n	8000a98 <eventRxDone+0x60>
            BSP_LED_Off(LED_GREEN);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f000 fbf0 	bl	8001264 <BSP_LED_Off>
            BSP_LED_Toggle(LED_RED);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f000 fc07 	bl	8001298 <BSP_LED_Toggle>
            enterMasterTx(fsm);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 f916 	bl	8000cbc <enterMasterTx>
            fsm->subState = SSTATE_TX;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2202      	movs	r2, #2
 8000a94:	705a      	strb	r2, [r3, #1]
          break;
 8000a96:	e015      	b.n	8000ac4 <eventRxDone+0x8c>
          else if (strncmp(fsm->rxBuffer, "PING", 4) == 0)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3310      	adds	r3, #16
 8000a9c:	2204      	movs	r2, #4
 8000a9e:	4922      	ldr	r1, [pc, #136]	@ (8000b28 <eventRxDone+0xf0>)
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f004 fe6d 	bl	8005780 <strncmp>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d106      	bne.n	8000aba <eventRxDone+0x82>
            enterSlaveRx(fsm);
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 f8d7 	bl	8000c60 <enterSlaveRx>
            fsm->state = STATE_SLAVE;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	701a      	strb	r2, [r3, #0]
          break;
 8000ab8:	e004      	b.n	8000ac4 <eventRxDone+0x8c>
            enterMasterRx(fsm);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f8a2 	bl	8000c04 <enterMasterRx>
          break;
 8000ac0:	e000      	b.n	8000ac4 <eventRxDone+0x8c>
          break;
 8000ac2:	bf00      	nop
      break;
 8000ac4:	e026      	b.n	8000b14 <eventRxDone+0xdc>
      switch (fsm->subState)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	785b      	ldrb	r3, [r3, #1]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d120      	bne.n	8000b10 <eventRxDone+0xd8>
          transitionRxDone(fsm);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f988 	bl	8000de4 <transitionRxDone>
          if (strncmp(fsm->rxBuffer, "PING", 4) == 0)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3310      	adds	r3, #16
 8000ad8:	2204      	movs	r2, #4
 8000ada:	4913      	ldr	r1, [pc, #76]	@ (8000b28 <eventRxDone+0xf0>)
 8000adc:	4618      	mov	r0, r3
 8000ade:	f004 fe4f 	bl	8005780 <strncmp>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d10c      	bne.n	8000b02 <eventRxDone+0xca>
            BSP_LED_Off(LED_RED);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f000 fbbb 	bl	8001264 <BSP_LED_Off>
            BSP_LED_Toggle(LED_GREEN);
 8000aee:	2001      	movs	r0, #1
 8000af0:	f000 fbd2 	bl	8001298 <BSP_LED_Toggle>
            enterSlaveTx(fsm);
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f92b 	bl	8000d50 <enterSlaveTx>
            fsm->subState = SSTATE_TX;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2202      	movs	r2, #2
 8000afe:	705a      	strb	r2, [r3, #1]
          break;
 8000b00:	e007      	b.n	8000b12 <eventRxDone+0xda>
            enterMasterRx(fsm);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f000 f87e 	bl	8000c04 <enterMasterRx>
            fsm->state = STATE_MASTER;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
          break;
 8000b0e:	e000      	b.n	8000b12 <eventRxDone+0xda>
          break;
 8000b10:	bf00      	nop
      break;
 8000b12:	bf00      	nop
  }
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	0800617c 	.word	0x0800617c
 8000b20:	200000ac 	.word	0x200000ac
 8000b24:	0800618c 	.word	0x0800618c
 8000b28:	08006194 	.word	0x08006194

08000b2c <eventRxTimeout>:
  * @brief  Process the RX Timeout event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxTimeout(pingPongFSM_t *const fsm)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event RX Timeout\r\n", 18, HAL_MAX_DELAY);
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
 8000b38:	2212      	movs	r2, #18
 8000b3a:	4915      	ldr	r1, [pc, #84]	@ (8000b90 <eventRxTimeout+0x64>)
 8000b3c:	4815      	ldr	r0, [pc, #84]	@ (8000b94 <eventRxTimeout+0x68>)
 8000b3e:	f003 fff4 	bl	8004b2a <HAL_UART_Transmit>
  switch (fsm->state)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d002      	beq.n	8000b50 <eventRxTimeout+0x24>
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d012      	beq.n	8000b74 <eventRxTimeout+0x48>
        default:
          break;
      }
      break;
    default:
      break;
 8000b4e:	e01b      	b.n	8000b88 <eventRxTimeout+0x5c>
      switch (fsm->subState)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	785b      	ldrb	r3, [r3, #1]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d10b      	bne.n	8000b70 <eventRxTimeout+0x44>
          HAL_Delay(fsm->randomDelay);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f001 fccb 	bl	80024f8 <HAL_Delay>
          enterMasterTx(fsm);
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 f8aa 	bl	8000cbc <enterMasterTx>
          fsm->subState = SSTATE_TX;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2202      	movs	r2, #2
 8000b6c:	705a      	strb	r2, [r3, #1]
          break;
 8000b6e:	e000      	b.n	8000b72 <eventRxTimeout+0x46>
          break;
 8000b70:	bf00      	nop
      break;
 8000b72:	e009      	b.n	8000b88 <eventRxTimeout+0x5c>
      switch (fsm->subState)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	785b      	ldrb	r3, [r3, #1]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d103      	bne.n	8000b84 <eventRxTimeout+0x58>
          enterSlaveRx(fsm);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f86f 	bl	8000c60 <enterSlaveRx>
          break;
 8000b82:	e000      	b.n	8000b86 <eventRxTimeout+0x5a>
          break;
 8000b84:	bf00      	nop
      break;
 8000b86:	bf00      	nop
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	080061b0 	.word	0x080061b0
 8000b94:	200000ac 	.word	0x200000ac

08000b98 <eventRxError>:
  * @brief  Process the RX Error event
  * @param  fsm pointer to FSM context
  * @retval None
  */
void eventRxError(pingPongFSM_t *const fsm)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Event Rx Error\r\n", 16, HAL_MAX_DELAY);
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba4:	2210      	movs	r2, #16
 8000ba6:	4915      	ldr	r1, [pc, #84]	@ (8000bfc <eventRxError+0x64>)
 8000ba8:	4815      	ldr	r0, [pc, #84]	@ (8000c00 <eventRxError+0x68>)
 8000baa:	f003 ffbe 	bl	8004b2a <HAL_UART_Transmit>
  switch (fsm->state)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d002      	beq.n	8000bbc <eventRxError+0x24>
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d012      	beq.n	8000be0 <eventRxError+0x48>
        default:
          break;
      }
      break;
    default:
      break;
 8000bba:	e01b      	b.n	8000bf4 <eventRxError+0x5c>
      switch (fsm->subState)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	785b      	ldrb	r3, [r3, #1]
 8000bc0:	2b01      	cmp	r3, #1
 8000bc2:	d10b      	bne.n	8000bdc <eventRxError+0x44>
          HAL_Delay(fsm->randomDelay);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fc95 	bl	80024f8 <HAL_Delay>
          enterMasterTx(fsm);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f874 	bl	8000cbc <enterMasterTx>
          fsm->subState = SSTATE_TX;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	705a      	strb	r2, [r3, #1]
          break;
 8000bda:	e000      	b.n	8000bde <eventRxError+0x46>
          break;
 8000bdc:	bf00      	nop
      break;
 8000bde:	e009      	b.n	8000bf4 <eventRxError+0x5c>
      switch (fsm->subState)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	785b      	ldrb	r3, [r3, #1]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d103      	bne.n	8000bf0 <eventRxError+0x58>
          enterSlaveRx(fsm);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f839 	bl	8000c60 <enterSlaveRx>
          break;
 8000bee:	e000      	b.n	8000bf2 <eventRxError+0x5a>
          break;
 8000bf0:	bf00      	nop
      break;
 8000bf2:	bf00      	nop
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	080061c4 	.word	0x080061c4
 8000c00:	200000ac 	.word	0x200000ac

08000c04 <enterMasterRx>:
  * @brief  Entry actions for the RX sub-state of the Master state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterMasterRx(pingPongFSM_t *const fsm)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Master Rx start\r\n", 17, HAL_MAX_DELAY);
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	2211      	movs	r2, #17
 8000c12:	4910      	ldr	r1, [pc, #64]	@ (8000c54 <enterMasterRx+0x50>)
 8000c14:	4810      	ldr	r0, [pc, #64]	@ (8000c58 <enterMasterRx+0x54>)
 8000c16:	f003 ff88 	bl	8004b2a <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	f240 2162 	movw	r1, #610	@ 0x262
 8000c22:	f240 2062 	movw	r0, #610	@ 0x262
 8000c26:	f000 fe65 	bl	80018f4 <SUBGRF_SetDioIrqParams>
                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	f001 facf 	bl	80021d0 <SUBGRF_SetSwitch>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <enterMasterRx+0x58>)
 8000c34:	22ff      	movs	r2, #255	@ 0xff
 8000c36:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 8000c38:	4808      	ldr	r0, [pc, #32]	@ (8000c5c <enterMasterRx+0x58>)
 8000c3a:	f001 f8c3 	bl	8001dc4 <SUBGRF_SetPacketParams>
  SUBGRF_SetRx(fsm->rxTimeout << 6);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	019b      	lsls	r3, r3, #6
 8000c44:	4618      	mov	r0, r3
 8000c46:	f000 fd5d 	bl	8001704 <SUBGRF_SetRx>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	080061d8 	.word	0x080061d8
 8000c58:	200000ac 	.word	0x200000ac
 8000c5c:	20000088 	.word	0x20000088

08000c60 <enterSlaveRx>:
  * @brief  Entry actions for the RX sub-state of the Slave state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterSlaveRx(pingPongFSM_t *const fsm)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)"Slave Rx start\r\n", 16, HAL_MAX_DELAY);
 8000c68:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6c:	2210      	movs	r2, #16
 8000c6e:	4910      	ldr	r1, [pc, #64]	@ (8000cb0 <enterSlaveRx+0x50>)
 8000c70:	4810      	ldr	r0, [pc, #64]	@ (8000cb4 <enterSlaveRx+0x54>)
 8000c72:	f003 ff5a 	bl	8004b2a <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
 8000c76:	2300      	movs	r3, #0
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f240 2162 	movw	r1, #610	@ 0x262
 8000c7e:	f240 2062 	movw	r0, #610	@ 0x262
 8000c82:	f000 fe37 	bl	80018f4 <SUBGRF_SetDioIrqParams>
                          IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_RX);
 8000c86:	2100      	movs	r1, #0
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f001 faa1 	bl	80021d0 <SUBGRF_SetSwitch>
  packetParams.Params.LoRa.PayloadLength = 0xFF;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <enterSlaveRx+0x58>)
 8000c90:	22ff      	movs	r2, #255	@ 0xff
 8000c92:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 8000c94:	4808      	ldr	r0, [pc, #32]	@ (8000cb8 <enterSlaveRx+0x58>)
 8000c96:	f001 f895 	bl	8001dc4 <SUBGRF_SetPacketParams>
  SUBGRF_SetRx(fsm->rxTimeout << 6);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	019b      	lsls	r3, r3, #6
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 fd2f 	bl	8001704 <SUBGRF_SetRx>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	080061ec 	.word	0x080061ec
 8000cb4:	200000ac 	.word	0x200000ac
 8000cb8:	20000088 	.word	0x20000088

08000cbc <enterMasterTx>:
  * @brief  Entry actions for the TX sub-state of the Master state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterMasterTx(pingPongFSM_t *const fsm)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_Delay(fsm->rxMargin);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f001 fc15 	bl	80024f8 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (uint8_t *)"...PING\r\n", 9, HAL_MAX_DELAY);
 8000cce:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd2:	2209      	movs	r2, #9
 8000cd4:	4919      	ldr	r1, [pc, #100]	@ (8000d3c <enterMasterTx+0x80>)
 8000cd6:	481a      	ldr	r0, [pc, #104]	@ (8000d40 <enterMasterTx+0x84>)
 8000cd8:	f003 ff27 	bl	8004b2a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)"Master Tx start\r\n", 17, HAL_MAX_DELAY);
 8000cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce0:	2211      	movs	r2, #17
 8000ce2:	4918      	ldr	r1, [pc, #96]	@ (8000d44 <enterMasterTx+0x88>)
 8000ce4:	4816      	ldr	r0, [pc, #88]	@ (8000d40 <enterMasterTx+0x84>)
 8000ce6:	f003 ff20 	bl	8004b2a <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8000cea:	2300      	movs	r3, #0
 8000cec:	2200      	movs	r2, #0
 8000cee:	f240 2101 	movw	r1, #513	@ 0x201
 8000cf2:	f240 2001 	movw	r0, #513	@ 0x201
 8000cf6:	f000 fdfd 	bl	80018f4 <SUBGRF_SetDioIrqParams>
                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f001 fa67 	bl	80021d0 <SUBGRF_SetSwitch>
  // Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
  SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8000d02:	f640 0089 	movw	r0, #2185	@ 0x889
 8000d06:	f001 f9a5 	bl	8002054 <SUBGRF_ReadRegister>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f043 0304 	orr.w	r3, r3, #4
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	4619      	mov	r1, r3
 8000d14:	f640 0089 	movw	r0, #2185	@ 0x889
 8000d18:	f001 f988 	bl	800202c <SUBGRF_WriteRegister>
  packetParams.Params.LoRa.PayloadLength = 0x4;
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <enterMasterTx+0x8c>)
 8000d1e:	2204      	movs	r2, #4
 8000d20:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 8000d22:	4809      	ldr	r0, [pc, #36]	@ (8000d48 <enterMasterTx+0x8c>)
 8000d24:	f001 f84e 	bl	8001dc4 <SUBGRF_SetPacketParams>
  SUBGRF_SendPayload((uint8_t *)"PING", 4, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2104      	movs	r1, #4
 8000d2c:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <enterMasterTx+0x90>)
 8000d2e:	f000 fc59 	bl	80015e4 <SUBGRF_SendPayload>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08006200 	.word	0x08006200
 8000d40:	200000ac 	.word	0x200000ac
 8000d44:	0800620c 	.word	0x0800620c
 8000d48:	20000088 	.word	0x20000088
 8000d4c:	08006194 	.word	0x08006194

08000d50 <enterSlaveTx>:
  * @brief  Entry actions for the TX sub-state of the Slave state
  * @param  fsm pointer to FSM context
  * @retval None
  */
void enterSlaveTx(pingPongFSM_t *const fsm)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  HAL_Delay(fsm->rxMargin);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 fbcb 	bl	80024f8 <HAL_Delay>

  HAL_UART_Transmit(&huart2, (uint8_t *)"...PONG\r\n", 9, HAL_MAX_DELAY);
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	2209      	movs	r2, #9
 8000d68:	4919      	ldr	r1, [pc, #100]	@ (8000dd0 <enterSlaveTx+0x80>)
 8000d6a:	481a      	ldr	r0, [pc, #104]	@ (8000dd4 <enterSlaveTx+0x84>)
 8000d6c:	f003 fedd 	bl	8004b2a <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, (uint8_t *)"Slave Tx start\r\n", 16, HAL_MAX_DELAY);
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	2210      	movs	r2, #16
 8000d76:	4918      	ldr	r1, [pc, #96]	@ (8000dd8 <enterSlaveTx+0x88>)
 8000d78:	4816      	ldr	r0, [pc, #88]	@ (8000dd4 <enterSlaveTx+0x84>)
 8000d7a:	f003 fed6 	bl	8004b2a <HAL_UART_Transmit>
  SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2200      	movs	r2, #0
 8000d82:	f240 2101 	movw	r1, #513	@ 0x201
 8000d86:	f240 2001 	movw	r0, #513	@ 0x201
 8000d8a:	f000 fdb3 	bl	80018f4 <SUBGRF_SetDioIrqParams>
                          IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
                          IRQ_RADIO_NONE,
                          IRQ_RADIO_NONE );
  SUBGRF_SetSwitch(RFO_LP, RFSWITCH_TX);
 8000d8e:	2101      	movs	r1, #1
 8000d90:	2001      	movs	r0, #1
 8000d92:	f001 fa1d 	bl	80021d0 <SUBGRF_SetSwitch>
  // Workaround 5.1 in DS.SX1261-2.W.APP (before each packet transmission)
  SUBGRF_WriteRegister(0x0889, (SUBGRF_ReadRegister(0x0889) | 0x04));
 8000d96:	f640 0089 	movw	r0, #2185	@ 0x889
 8000d9a:	f001 f95b 	bl	8002054 <SUBGRF_ReadRegister>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	4619      	mov	r1, r3
 8000da8:	f640 0089 	movw	r0, #2185	@ 0x889
 8000dac:	f001 f93e 	bl	800202c <SUBGRF_WriteRegister>
  packetParams.Params.LoRa.PayloadLength = 0x4;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <enterSlaveTx+0x8c>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	745a      	strb	r2, [r3, #17]
  SUBGRF_SetPacketParams(&packetParams);
 8000db6:	4809      	ldr	r0, [pc, #36]	@ (8000ddc <enterSlaveTx+0x8c>)
 8000db8:	f001 f804 	bl	8001dc4 <SUBGRF_SetPacketParams>
  SUBGRF_SendPayload((uint8_t *)"PONG", 4, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <enterSlaveTx+0x90>)
 8000dc2:	f000 fc0f 	bl	80015e4 <SUBGRF_SendPayload>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	08006220 	.word	0x08006220
 8000dd4:	200000ac 	.word	0x200000ac
 8000dd8:	0800622c 	.word	0x0800622c
 8000ddc:	20000088 	.word	0x20000088
 8000de0:	0800618c 	.word	0x0800618c

08000de4 <transitionRxDone>:
  * @brief  Transition actions executed on every RX Done event (helper function)
  * @param  fsm pointer to FSM context
  * @retval None
  */
void transitionRxDone(pingPongFSM_t *const fsm)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b094      	sub	sp, #80	@ 0x50
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  PacketStatus_t packetStatus;
  char uartBuff[50];

  // Workaround 15.3 in DS.SX1261-2.W.APP (because following RX w/ timeout sequence)
  SUBGRF_WriteRegister(0x0920, 0x00);
 8000dec:	2100      	movs	r1, #0
 8000dee:	f44f 6012 	mov.w	r0, #2336	@ 0x920
 8000df2:	f001 f91b 	bl	800202c <SUBGRF_WriteRegister>
  SUBGRF_WriteRegister(0x0944, (SUBGRF_ReadRegister(0x0944) | 0x02));
 8000df6:	f640 1044 	movw	r0, #2372	@ 0x944
 8000dfa:	f001 f92b 	bl	8002054 <SUBGRF_ReadRegister>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4619      	mov	r1, r3
 8000e08:	f640 1044 	movw	r0, #2372	@ 0x944
 8000e0c:	f001 f90e 	bl	800202c <SUBGRF_WriteRegister>

  SUBGRF_GetPayload((uint8_t *)fsm->rxBuffer, &fsm->rxSize, 0xFF);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f103 0010 	add.w	r0, r3, #16
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8000e1c:	22ff      	movs	r2, #255	@ 0xff
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f000 fbbe 	bl	80015a0 <SUBGRF_GetPayload>
  SUBGRF_GetPacketStatus(&packetStatus);
 8000e24:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 f8ad 	bl	8001f88 <SUBGRF_GetPacketStatus>

  sprintf(uartBuff, "RssiValue=%d dBm, SnrValue=%d Hz\r\n", packetStatus.Params.LoRa.RssiPkt, packetStatus.Params.LoRa.SnrPkt);
 8000e2e:	f997 3048 	ldrsb.w	r3, [r7, #72]	@ 0x48
 8000e32:	461a      	mov	r2, r3
 8000e34:	f997 3049 	ldrsb.w	r3, [r7, #73]	@ 0x49
 8000e38:	f107 0008 	add.w	r0, r7, #8
 8000e3c:	490a      	ldr	r1, [pc, #40]	@ (8000e68 <transitionRxDone+0x84>)
 8000e3e:	f004 fc77 	bl	8005730 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t *)uartBuff, strlen(uartBuff), HAL_MAX_DELAY);
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff f99a 	bl	8000180 <strlen>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	b29a      	uxth	r2, r3
 8000e50:	f107 0108 	add.w	r1, r7, #8
 8000e54:	f04f 33ff 	mov.w	r3, #4294967295
 8000e58:	4804      	ldr	r0, [pc, #16]	@ (8000e6c <transitionRxDone+0x88>)
 8000e5a:	f003 fe66 	bl	8004b2a <HAL_UART_Transmit>
}
 8000e5e:	bf00      	nop
 8000e60:	3750      	adds	r7, #80	@ 0x50
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	08006240 	.word	0x08006240
 8000e6c:	200000ac 	.word	0x200000ac

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <Error_Handler+0x8>

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <NMI_Handler+0x4>

08000e90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <HardFault_Handler+0x4>

08000e98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <MemManage_Handler+0x4>

08000ea0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <UsageFault_Handler+0x4>

08000eb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr

08000ebc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed8:	f001 faf2 	bl	80024c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000ee6:	f003 fc11 	bl	800470c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000009c 	.word	0x2000009c

08000ef4 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8000efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f00:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000f02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8000f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f10:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f18:	68fb      	ldr	r3, [r7, #12]
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bc80      	pop	{r7}
 8000f22:	4770      	bx	lr

08000f24 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_SUBGHZ_Init+0x20>)
 8000f2a:	2208      	movs	r2, #8
 8000f2c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_SUBGHZ_Init+0x20>)
 8000f30:	f003 f96a 	bl	8004208 <HAL_SUBGHZ_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000f3a:	f7ff ff99 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000009c 	.word	0x2000009c

08000f48 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff ffcf 	bl	8000ef4 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2032      	movs	r0, #50	@ 0x32
 8000f5c:	f001 fbc7 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8000f60:	2032      	movs	r0, #50	@ 0x32
 8000f62:	f001 fbde 	bl	8002722 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f004 fc00 	bl	80057a4 <__errno>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <_sbrk+0x64>)
 8000fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20010000 	.word	0x20010000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	200000a8 	.word	0x200000a8
 8000fd8:	200002a0 	.word	0x200002a0

08000fdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <LL_AHB2_GRP1_EnableClock>:
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ff6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001004:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4013      	ands	r3, r2
 800100a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800100c:	68fb      	ldr	r3, [r7, #12]
}
 800100e:	bf00      	nop
 8001010:	3714      	adds	r7, #20
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <LL_APB1_GRP1_EnableClock>:
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001020:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001024:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001026:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4313      	orrs	r3, r2
 800102e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001034:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800103c:	68fb      	ldr	r3, [r7, #12]
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 800104e:	4a23      	ldr	r2, [pc, #140]	@ (80010dc <MX_USART2_UART_Init+0x94>)
 8001050:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001052:	4b21      	ldr	r3, [pc, #132]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 8001054:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001058:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800105a:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 800106e:	220c      	movs	r2, #12
 8001070:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 8001074:	2200      	movs	r2, #0
 8001076:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 800107a:	2200      	movs	r2, #0
 800107c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 8001080:	2200      	movs	r2, #0
 8001082:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001084:	4b14      	ldr	r3, [pc, #80]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 8001086:	2200      	movs	r2, #0
 8001088:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 800108c:	2200      	movs	r2, #0
 800108e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001090:	4811      	ldr	r0, [pc, #68]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 8001092:	f003 fcfa 	bl	8004a8a <HAL_UART_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800109c:	f7ff fee8 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a0:	2100      	movs	r1, #0
 80010a2:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 80010a4:	f004 fa2b 	bl	80054fe <HAL_UARTEx_SetTxFifoThreshold>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010ae:	f7ff fedf 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b2:	2100      	movs	r1, #0
 80010b4:	4808      	ldr	r0, [pc, #32]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 80010b6:	f004 fa60 	bl	800557a <HAL_UARTEx_SetRxFifoThreshold>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010c0:	f7ff fed6 	bl	8000e70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010c4:	4804      	ldr	r0, [pc, #16]	@ (80010d8 <MX_USART2_UART_Init+0x90>)
 80010c6:	f004 f9e2 	bl	800548e <HAL_UARTEx_DisableFifoMode>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80010d0:	f7ff fece 	bl	8000e70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200000ac 	.word	0x200000ac
 80010dc:	40004400 	.word	0x40004400

080010e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b096      	sub	sp, #88	@ 0x58
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f8:	f107 030c 	add.w	r3, r7, #12
 80010fc:	2238      	movs	r2, #56	@ 0x38
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f004 fb35 	bl	8005770 <memset>
  if(uartHandle->Instance==USART2)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <HAL_UART_MspInit+0x88>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d126      	bne.n	800115e <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001110:	2302      	movs	r3, #2
 8001112:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001114:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8001118:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	4618      	mov	r0, r3
 8001120:	f002 febe 	bl	8003ea0 <HAL_RCCEx_PeriphCLKConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800112a:	f7ff fea1 	bl	8000e70 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112e:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001132:	f7ff ff71 	bl	8001018 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff ff56 	bl	8000fe8 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 800113c:	230c      	movs	r3, #12
 800113e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114c:	2307      	movs	r3, #7
 800114e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001154:	4619      	mov	r1, r3
 8001156:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115a:	f001 fafd 	bl	8002758 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	3758      	adds	r7, #88	@ 0x58
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40004400 	.word	0x40004400

0800116c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800116c:	480d      	ldr	r0, [pc, #52]	@ (80011a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800116e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001170:	f7ff ff34 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001176:	490d      	ldr	r1, [pc, #52]	@ (80011ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001178:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <LoopForever+0xe>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800118c:	4c0a      	ldr	r4, [pc, #40]	@ (80011b8 <LoopForever+0x16>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800119a:	f004 fb09 	bl	80057b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119e:	f7ff fa17 	bl	80005d0 <main>

080011a2 <LoopForever>:

LoopForever:
    b LoopForever
 80011a2:	e7fe      	b.n	80011a2 <LoopForever>
  ldr   r0, =_estack
 80011a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011b0:	080063a8 	.word	0x080063a8
  ldr r2, =_sbss
 80011b4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011b8:	2000029c 	.word	0x2000029c

080011bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>

080011be <LL_AHB2_GRP1_EnableClock>:
{
 80011be:	b480      	push	{r7}
 80011c0:	b085      	sub	sp, #20
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4013      	ands	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011e2:	68fb      	ldr	r3, [r7, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr
	...

080011f0 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800120a:	2002      	movs	r0, #2
 800120c:	f7ff ffd7 	bl	80011be <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	4a12      	ldr	r2, [pc, #72]	@ (800125c <BSP_LED_Init+0x6c>)
 8001214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001218:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001222:	2302      	movs	r3, #2
 8001224:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a0d      	ldr	r2, [pc, #52]	@ (8001260 <BSP_LED_Init+0x70>)
 800122a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122e:	f107 020c 	add.w	r2, r7, #12
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f001 fa8f 	bl	8002758 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	4a08      	ldr	r2, [pc, #32]	@ (8001260 <BSP_LED_Init+0x70>)
 800123e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4a05      	ldr	r2, [pc, #20]	@ (800125c <BSP_LED_Init+0x6c>)
 8001246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800124a:	2200      	movs	r2, #0
 800124c:	4619      	mov	r1, r3
 800124e:	f001 fbe3 	bl	8002a18 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3720      	adds	r7, #32
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	08006334 	.word	0x08006334
 8001260:	20000004 	.word	0x20000004

08001264 <BSP_LED_Off>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <BSP_LED_Off+0x2c>)
 8001272:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	4a06      	ldr	r2, [pc, #24]	@ (8001294 <BSP_LED_Off+0x30>)
 800127a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	f001 fbc9 	bl	8002a18 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000004 	.word	0x20000004
 8001294:	08006334 	.word	0x08006334

08001298 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	4a07      	ldr	r2, [pc, #28]	@ (80012c4 <BSP_LED_Toggle+0x2c>)
 80012a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4906      	ldr	r1, [pc, #24]	@ (80012c8 <BSP_LED_Toggle+0x30>)
 80012ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012b2:	4619      	mov	r1, r3
 80012b4:	4610      	mov	r0, r2
 80012b6:	f001 fbc6 	bl	8002a46 <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000004 	.word	0x20000004
 80012c8:	08006334 	.word	0x08006334

080012cc <LL_AHB2_GRP1_EnableClock>:
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4013      	ands	r3, r2
 80012ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012f0:	68fb      	ldr	r3, [r7, #12]
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8001310:	2004      	movs	r0, #4
 8001312:	f7ff ffdb 	bl	80012cc <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8001316:	2310      	movs	r3, #16
 8001318:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	4619      	mov	r1, r3
 800132a:	4812      	ldr	r0, [pc, #72]	@ (8001374 <BSP_RADIO_Init+0x78>)
 800132c:	f001 fa14 	bl	8002758 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8001330:	2320      	movs	r3, #32
 8001332:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	480e      	ldr	r0, [pc, #56]	@ (8001374 <BSP_RADIO_Init+0x78>)
 800133a:	f001 fa0d 	bl	8002758 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 800133e:	2308      	movs	r3, #8
 8001340:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	4619      	mov	r1, r3
 8001346:	480b      	ldr	r0, [pc, #44]	@ (8001374 <BSP_RADIO_Init+0x78>)
 8001348:	f001 fa06 	bl	8002758 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800134c:	2200      	movs	r2, #0
 800134e:	2120      	movs	r1, #32
 8001350:	4808      	ldr	r0, [pc, #32]	@ (8001374 <BSP_RADIO_Init+0x78>)
 8001352:	f001 fb61 	bl	8002a18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8001356:	2200      	movs	r2, #0
 8001358:	2110      	movs	r1, #16
 800135a:	4806      	ldr	r0, [pc, #24]	@ (8001374 <BSP_RADIO_Init+0x78>)
 800135c:	f001 fb5c 	bl	8002a18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8001360:	2200      	movs	r2, #0
 8001362:	2108      	movs	r1, #8
 8001364:	4803      	ldr	r0, [pc, #12]	@ (8001374 <BSP_RADIO_Init+0x78>)
 8001366:	f001 fb57 	bl	8002a18 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	48000800 	.word	0x48000800

08001378 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	2b03      	cmp	r3, #3
 8001386:	d84b      	bhi.n	8001420 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8001388:	a201      	add	r2, pc, #4	@ (adr r2, 8001390 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138e:	bf00      	nop
 8001390:	080013a1 	.word	0x080013a1
 8001394:	080013c1 	.word	0x080013c1
 8001398:	080013e1 	.word	0x080013e1
 800139c:	08001401 	.word	0x08001401
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2108      	movs	r1, #8
 80013a4:	4821      	ldr	r0, [pc, #132]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80013a6:	f001 fb37 	bl	8002a18 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2110      	movs	r1, #16
 80013ae:	481f      	ldr	r0, [pc, #124]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80013b0:	f001 fb32 	bl	8002a18 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2120      	movs	r1, #32
 80013b8:	481c      	ldr	r0, [pc, #112]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80013ba:	f001 fb2d 	bl	8002a18 <HAL_GPIO_WritePin>
      break;      
 80013be:	e030      	b.n	8001422 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2108      	movs	r1, #8
 80013c4:	4819      	ldr	r0, [pc, #100]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80013c6:	f001 fb27 	bl	8002a18 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80013ca:	2201      	movs	r2, #1
 80013cc:	2110      	movs	r1, #16
 80013ce:	4817      	ldr	r0, [pc, #92]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80013d0:	f001 fb22 	bl	8002a18 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80013d4:	2200      	movs	r2, #0
 80013d6:	2120      	movs	r1, #32
 80013d8:	4814      	ldr	r0, [pc, #80]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80013da:	f001 fb1d 	bl	8002a18 <HAL_GPIO_WritePin>
      break;
 80013de:	e020      	b.n	8001422 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2108      	movs	r1, #8
 80013e4:	4811      	ldr	r0, [pc, #68]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80013e6:	f001 fb17 	bl	8002a18 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80013ea:	2201      	movs	r2, #1
 80013ec:	2110      	movs	r1, #16
 80013ee:	480f      	ldr	r0, [pc, #60]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80013f0:	f001 fb12 	bl	8002a18 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80013f4:	2201      	movs	r2, #1
 80013f6:	2120      	movs	r1, #32
 80013f8:	480c      	ldr	r0, [pc, #48]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80013fa:	f001 fb0d 	bl	8002a18 <HAL_GPIO_WritePin>
      break;
 80013fe:	e010      	b.n	8001422 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2108      	movs	r1, #8
 8001404:	4809      	ldr	r0, [pc, #36]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001406:	f001 fb07 	bl	8002a18 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800140a:	2200      	movs	r2, #0
 800140c:	2110      	movs	r1, #16
 800140e:	4807      	ldr	r0, [pc, #28]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8001410:	f001 fb02 	bl	8002a18 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8001414:	2201      	movs	r2, #1
 8001416:	2120      	movs	r1, #32
 8001418:	4804      	ldr	r0, [pc, #16]	@ (800142c <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800141a:	f001 fafd 	bl	8002a18 <HAL_GPIO_WritePin>
      break;
 800141e:	e000      	b.n	8001422 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 8001420:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	48000800 	.word	0x48000800

08001430 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8001450:	2301      	movs	r3, #1
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	4603      	mov	r3, r0
 8001462:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800146a:	230f      	movs	r3, #15
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e001      	b.n	8001474 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8001470:	2316      	movs	r3, #22
 8001472:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001474:	68fb      	ldr	r3, [r7, #12]
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8001484:	f7ff ff3a 	bl	80012fc <BSP_RADIO_Init>
 8001488:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800148a:	4618      	mov	r0, r3
 800148c:	bd80      	pop	{r7, pc}

0800148e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	4603      	mov	r3, r0
 8001496:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff ff6c 	bl	8001378 <BSP_RADIO_ConfigRFSwitch>
 80014a0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80014ae:	f7ff ffbf 	bl	8001430 <BSP_RADIO_GetTxConfig>
 80014b2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80014bc:	f7ff ffbf 	bl	800143e <BSP_RADIO_IsTCXO>
 80014c0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80014ca:	f7ff ffbf 	bl	800144c <BSP_RADIO_IsDCDC>
 80014ce:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ffba 	bl	800145a <BSP_RADIO_GetRFOMaxPowerConfig>
 80014e6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80014fe:	4a1d      	ldr	r2, [pc, #116]	@ (8001574 <SUBGRF_Init+0x84>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8001504:	f7ff fd0e 	bl	8000f24 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8001508:	2002      	movs	r0, #2
 800150a:	f000 ff5d 	bl	80023c8 <Radio_SMPS_Set>

    ImageCalibrated = false;
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <SUBGRF_Init+0x88>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8001514:	2000      	movs	r0, #0
 8001516:	f000 f8b9 	bl	800168c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800151a:	f7ff ffcd 	bl	80014b8 <RBI_IsTCXO>
 800151e:	4603      	mov	r3, r0
 8001520:	2b01      	cmp	r3, #1
 8001522:	d10e      	bne.n	8001542 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8001524:	2140      	movs	r1, #64	@ 0x40
 8001526:	2001      	movs	r0, #1
 8001528:	f000 fa1e 	bl	8001968 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800152c:	2100      	movs	r1, #0
 800152e:	f640 1011 	movw	r0, #2321	@ 0x911
 8001532:	f000 fd7b 	bl	800202c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8001536:	237f      	movs	r3, #127	@ 0x7f
 8001538:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800153a:	7b38      	ldrb	r0, [r7, #12]
 800153c:	f000 f928 	bl	8001790 <SUBGRF_Calibrate>
 8001540:	e009      	b.n	8001556 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8001542:	2120      	movs	r1, #32
 8001544:	f640 1011 	movw	r0, #2321	@ 0x911
 8001548:	f000 fd70 	bl	800202c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800154c:	2120      	movs	r1, #32
 800154e:	f640 1012 	movw	r0, #2322	@ 0x912
 8001552:	f000 fd6b 	bl	800202c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8001556:	210e      	movs	r1, #14
 8001558:	f640 101f 	movw	r0, #2335	@ 0x91f
 800155c:	f000 fd66 	bl	800202c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 8001560:	f7ff ff8e 	bl	8001480 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <SUBGRF_Init+0x8c>)
 8001566:	2201      	movs	r2, #1
 8001568:	701a      	strb	r2, [r3, #0]
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000014c 	.word	0x2000014c
 8001578:	20000148 	.word	0x20000148
 800157c:	20000140 	.word	0x20000140

08001580 <SUBGRF_SetPayload>:
{
    return OperatingMode;
}

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	461a      	mov	r2, r3
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	2000      	movs	r0, #0
 8001594:	f000 fd94 	bl	80020c0 <SUBGRF_WriteBuffer>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	4613      	mov	r3, r2
 80015ac:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80015b2:	f107 0317 	add.w	r3, r7, #23
 80015b6:	4619      	mov	r1, r3
 80015b8:	68b8      	ldr	r0, [r7, #8]
 80015ba:	f000 fcb9 	bl	8001f30 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	79fa      	ldrb	r2, [r7, #7]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d201      	bcs.n	80015cc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e007      	b.n	80015dc <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80015cc:	7df8      	ldrb	r0, [r7, #23]
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68f9      	ldr	r1, [r7, #12]
 80015d6:	f000 fd95 	bl	8002104 <SUBGRF_ReadBuffer>

    return 0;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	460b      	mov	r3, r1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 80015f2:	7afb      	ldrb	r3, [r7, #11]
 80015f4:	4619      	mov	r1, r3
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff ffc2 	bl	8001580 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f861 	bl	80016c4 <SUBGRF_SetTx>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <SUBGRF_SetCrcSeed>:
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
    return 0;
}

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	b29b      	uxth	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001624:	f000 fa24 	bl	8001a70 <SUBGRF_GetPacketType>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800162e:	f107 030c 	add.w	r3, r7, #12
 8001632:	2202      	movs	r2, #2
 8001634:	4619      	mov	r1, r3
 8001636:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 800163a:	f000 fd1f 	bl	800207c <SUBGRF_WriteRegisters>
            break;
 800163e:	e000      	b.n	8001642 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8001640:	bf00      	nop
    }
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	0a1b      	lsrs	r3, r3, #8
 8001658:	b29b      	uxth	r3, r3
 800165a:	b2db      	uxtb	r3, r3
 800165c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8001664:	f000 fa04 	bl	8001a70 <SUBGRF_GetPacketType>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d108      	bne.n	8001680 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	2202      	movs	r2, #2
 8001674:	4619      	mov	r1, r3
 8001676:	f240 60be 	movw	r0, #1726	@ 0x6be
 800167a:	f000 fcff 	bl	800207c <SUBGRF_WriteRegisters>
            break;
 800167e:	e000      	b.n	8001682 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8001680:	bf00      	nop
    }
}
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <SUBGRF_SetStandby>:
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
    OperatingMode = MODE_SLEEP;
}

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	2201      	movs	r2, #1
 800169a:	4619      	mov	r1, r3
 800169c:	2080      	movs	r0, #128	@ 0x80
 800169e:	f000 fd53 	bl	8002148 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80016a2:	79fb      	ldrb	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d103      	bne.n	80016b0 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <SUBGRF_SetStandby+0x34>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 80016ae:	e002      	b.n	80016b6 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 80016b0:	4b03      	ldr	r3, [pc, #12]	@ (80016c0 <SUBGRF_SetStandby+0x34>)
 80016b2:	2202      	movs	r2, #2
 80016b4:	701a      	strb	r2, [r3, #0]
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000140 	.word	0x20000140

080016c4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <SUBGRF_SetTx+0x3c>)
 80016ce:	2204      	movs	r2, #4
 80016d0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	0c1b      	lsrs	r3, r3, #16
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	0a1b      	lsrs	r3, r3, #8
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80016e8:	f107 030c 	add.w	r3, r7, #12
 80016ec:	2203      	movs	r2, #3
 80016ee:	4619      	mov	r1, r3
 80016f0:	2083      	movs	r0, #131	@ 0x83
 80016f2:	f000 fd29 	bl	8002148 <SUBGRF_WriteCommand>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000140 	.word	0x20000140

08001704 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <SUBGRF_SetRx+0x3c>)
 800170e:	2205      	movs	r2, #5
 8001710:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	b2db      	uxtb	r3, r3
 8001718:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	b2db      	uxtb	r3, r3
 8001720:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	2203      	movs	r2, #3
 800172e:	4619      	mov	r1, r3
 8001730:	2082      	movs	r0, #130	@ 0x82
 8001732:	f000 fd09 	bl	8002148 <SUBGRF_WriteCommand>
}
 8001736:	bf00      	nop
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000140 	.word	0x20000140

08001744 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
}

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	2201      	movs	r2, #1
 8001752:	4619      	mov	r1, r3
 8001754:	209f      	movs	r0, #159	@ 0x9f
 8001756:	f000 fcf7 	bl	8002148 <SUBGRF_WriteCommand>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <SUBGRF_SetRegulatorMode>:
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
    }
}

void SUBGRF_SetRegulatorMode( void )
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8001768:	f7ff fead 	bl	80014c6 <RBI_IsDCDC>
 800176c:	4603      	mov	r3, r0
 800176e:	2b01      	cmp	r3, #1
 8001770:	d102      	bne.n	8001778 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8001772:	2301      	movs	r3, #1
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	e001      	b.n	800177c <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8001778:	2300      	movs	r3, #0
 800177a:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800177c:	1dfb      	adds	r3, r7, #7
 800177e:	2201      	movs	r2, #1
 8001780:	4619      	mov	r1, r3
 8001782:	2096      	movs	r0, #150	@ 0x96
 8001784:	f000 fce0 	bl	8002148 <SUBGRF_WriteCommand>
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001798:	793b      	ldrb	r3, [r7, #4]
 800179a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80017a4:	793b      	ldrb	r3, [r7, #4]
 80017a6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	4313      	orrs	r3, r2
 80017b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80017b4:	793b      	ldrb	r3, [r7, #4]
 80017b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80017be:	b25b      	sxtb	r3, r3
 80017c0:	4313      	orrs	r3, r2
 80017c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80017c4:	793b      	ldrb	r3, [r7, #4]
 80017c6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80017ce:	b25b      	sxtb	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80017d4:	793b      	ldrb	r3, [r7, #4]
 80017d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80017de:	b25b      	sxtb	r3, r3
 80017e0:	4313      	orrs	r3, r2
 80017e2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80017e4:	793b      	ldrb	r3, [r7, #4]
 80017e6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80017ee:	b25b      	sxtb	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80017f4:	793b      	ldrb	r3, [r7, #4]
 80017f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80017fe:	4313      	orrs	r3, r2
 8001800:	b25b      	sxtb	r3, r3
 8001802:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8001804:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8001806:	f107 030f 	add.w	r3, r7, #15
 800180a:	2201      	movs	r2, #1
 800180c:	4619      	mov	r1, r3
 800180e:	2089      	movs	r0, #137	@ 0x89
 8001810:	f000 fc9a 	bl	8002148 <SUBGRF_WriteCommand>
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a1d      	ldr	r2, [pc, #116]	@ (800189c <SUBGRF_CalibrateImage+0x80>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d904      	bls.n	8001836 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800182c:	23e1      	movs	r3, #225	@ 0xe1
 800182e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8001830:	23e9      	movs	r3, #233	@ 0xe9
 8001832:	737b      	strb	r3, [r7, #13]
 8001834:	e027      	b.n	8001886 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a19      	ldr	r2, [pc, #100]	@ (80018a0 <SUBGRF_CalibrateImage+0x84>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d904      	bls.n	8001848 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800183e:	23d7      	movs	r3, #215	@ 0xd7
 8001840:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8001842:	23db      	movs	r3, #219	@ 0xdb
 8001844:	737b      	strb	r3, [r7, #13]
 8001846:	e01e      	b.n	8001886 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a16      	ldr	r2, [pc, #88]	@ (80018a4 <SUBGRF_CalibrateImage+0x88>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d904      	bls.n	800185a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8001850:	23c1      	movs	r3, #193	@ 0xc1
 8001852:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8001854:	23c5      	movs	r3, #197	@ 0xc5
 8001856:	737b      	strb	r3, [r7, #13]
 8001858:	e015      	b.n	8001886 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <SUBGRF_CalibrateImage+0x8c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d904      	bls.n	800186c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8001862:	2375      	movs	r3, #117	@ 0x75
 8001864:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8001866:	2381      	movs	r3, #129	@ 0x81
 8001868:	737b      	strb	r3, [r7, #13]
 800186a:	e00c      	b.n	8001886 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a0f      	ldr	r2, [pc, #60]	@ (80018ac <SUBGRF_CalibrateImage+0x90>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d904      	bls.n	800187e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8001874:	236b      	movs	r3, #107	@ 0x6b
 8001876:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8001878:	236f      	movs	r3, #111	@ 0x6f
 800187a:	737b      	strb	r3, [r7, #13]
 800187c:	e003      	b.n	8001886 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800187e:	2329      	movs	r3, #41	@ 0x29
 8001880:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8001882:	232b      	movs	r3, #43	@ 0x2b
 8001884:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	2202      	movs	r2, #2
 800188c:	4619      	mov	r1, r3
 800188e:	2098      	movs	r0, #152	@ 0x98
 8001890:	f000 fc5a 	bl	8002148 <SUBGRF_WriteCommand>
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	35a4e900 	.word	0x35a4e900
 80018a0:	32a9f880 	.word	0x32a9f880
 80018a4:	2de54480 	.word	0x2de54480
 80018a8:	1b6b0b00 	.word	0x1b6b0b00
 80018ac:	1954fc40 	.word	0x1954fc40

080018b0 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	4603      	mov	r3, r0
 80018c4:	71bb      	strb	r3, [r7, #6]
 80018c6:	460b      	mov	r3, r1
 80018c8:	717b      	strb	r3, [r7, #5]
 80018ca:	4613      	mov	r3, r2
 80018cc:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80018d2:	79bb      	ldrb	r3, [r7, #6]
 80018d4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80018d6:	797b      	ldrb	r3, [r7, #5]
 80018d8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80018da:	793b      	ldrb	r3, [r7, #4]
 80018dc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2204      	movs	r2, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	2095      	movs	r0, #149	@ 0x95
 80018e8:	f000 fc2e 	bl	8002148 <SUBGRF_WriteCommand>
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd90      	pop	{r4, r7, pc}

080018f4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4604      	mov	r4, r0
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4623      	mov	r3, r4
 8001904:	80fb      	strh	r3, [r7, #6]
 8001906:	4603      	mov	r3, r0
 8001908:	80bb      	strh	r3, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
 800190e:	4613      	mov	r3, r2
 8001910:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	b29b      	uxth	r3, r3
 8001918:	b2db      	uxtb	r3, r3
 800191a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800191c:	88fb      	ldrh	r3, [r7, #6]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8001922:	88bb      	ldrh	r3, [r7, #4]
 8001924:	0a1b      	lsrs	r3, r3, #8
 8001926:	b29b      	uxth	r3, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800192c:	88bb      	ldrh	r3, [r7, #4]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	b29b      	uxth	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	b2db      	uxtb	r3, r3
 8001940:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8001942:	883b      	ldrh	r3, [r7, #0]
 8001944:	0a1b      	lsrs	r3, r3, #8
 8001946:	b29b      	uxth	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800194c:	883b      	ldrh	r3, [r7, #0]
 800194e:	b2db      	uxtb	r3, r3
 8001950:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8001952:	f107 0308 	add.w	r3, r7, #8
 8001956:	2208      	movs	r2, #8
 8001958:	4619      	mov	r1, r3
 800195a:	2008      	movs	r0, #8
 800195c:	f000 fbf4 	bl	8002148 <SUBGRF_WriteCommand>
}
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}

08001968 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	b2db      	uxtb	r3, r3
 800197c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	b2db      	uxtb	r3, r3
 8001984:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	b2db      	uxtb	r3, r3
 800198c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2204      	movs	r2, #4
 800199a:	4619      	mov	r1, r3
 800199c:	2097      	movs	r0, #151	@ 0x97
 800199e:	f000 fbd3 	bl	8002148 <SUBGRF_WriteCommand>
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80019ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019b0:	b084      	sub	sp, #16
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <SUBGRF_SetRfFrequency+0x84>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	f083 0301 	eor.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff27 	bl	800181c <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80019ce:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <SUBGRF_SetRfFrequency+0x84>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	461c      	mov	r4, r3
 80019da:	4615      	mov	r5, r2
 80019dc:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80019e0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80019e4:	4a13      	ldr	r2, [pc, #76]	@ (8001a34 <SUBGRF_SetRfFrequency+0x88>)
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	4640      	mov	r0, r8
 80019ec:	4649      	mov	r1, r9
 80019ee:	f7fe fc1f 	bl	8000230 <__aeabi_uldivmod>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4613      	mov	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0e1b      	lsrs	r3, r3, #24
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0c1b      	lsrs	r3, r3, #16
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8001a18:	f107 0308 	add.w	r3, r7, #8
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	4619      	mov	r1, r3
 8001a20:	2086      	movs	r0, #134	@ 0x86
 8001a22:	f000 fb91 	bl	8002148 <SUBGRF_WriteCommand>
}
 8001a26:	bf00      	nop
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a30:	20000148 	.word	0x20000148
 8001a34:	01e84800 	.word	0x01e84800

08001a38 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8001a42:	79fa      	ldrb	r2, [r7, #7]
 8001a44:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <SUBGRF_SetPacketType+0x34>)
 8001a46:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d104      	bne.n	8001a58 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8001a4e:	2100      	movs	r1, #0
 8001a50:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8001a54:	f000 faea 	bl	800202c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8001a58:	1dfb      	adds	r3, r7, #7
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	208a      	movs	r0, #138	@ 0x8a
 8001a60:	f000 fb72 	bl	8002148 <SUBGRF_WriteCommand>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000141 	.word	0x20000141

08001a70 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
    return PacketType;
 8001a74:	4b02      	ldr	r3, [pc, #8]	@ (8001a80 <SUBGRF_GetPacketType+0x10>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr
 8001a80:	20000141 	.word	0x20000141

08001a84 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	71bb      	strb	r3, [r7, #6]
 8001a92:	4613      	mov	r3, r2
 8001a94:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8001a96:	79fb      	ldrb	r3, [r7, #7]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d149      	bne.n	8001b30 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fd19 	bl	80014d4 <RBI_GetRFOMaxPowerConfig>
 8001aa2:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8001aa4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	da01      	bge.n	8001ab2 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2b0e      	cmp	r3, #14
 8001ab6:	d10e      	bne.n	8001ad6 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8001ab8:	2301      	movs	r3, #1
 8001aba:	2201      	movs	r2, #1
 8001abc:	2100      	movs	r1, #0
 8001abe:	2004      	movs	r0, #4
 8001ac0:	f7ff fef6 	bl	80018b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001ac4:	79ba      	ldrb	r2, [r7, #6]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	330e      	adds	r3, #14
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	71bb      	strb	r3, [r7, #6]
 8001ad4:	e01f      	b.n	8001b16 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b0a      	cmp	r3, #10
 8001ada:	d10e      	bne.n	8001afa <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8001adc:	2301      	movs	r3, #1
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f7ff fee4 	bl	80018b0 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8001ae8:	79ba      	ldrb	r2, [r7, #6]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	330d      	adds	r3, #13
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	71bb      	strb	r3, [r7, #6]
 8001af8:	e00d      	b.n	8001b16 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8001afa:	2301      	movs	r3, #1
 8001afc:	2201      	movs	r2, #1
 8001afe:	2100      	movs	r1, #0
 8001b00:	2007      	movs	r0, #7
 8001b02:	f7ff fed5 	bl	80018b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001b06:	79ba      	ldrb	r2, [r7, #6]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	330e      	adds	r3, #14
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8001b16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b1a:	f113 0f11 	cmn.w	r3, #17
 8001b1e:	da01      	bge.n	8001b24 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8001b20:	23ef      	movs	r3, #239	@ 0xef
 8001b22:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8001b24:	2118      	movs	r1, #24
 8001b26:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001b2a:	f000 fa7f 	bl	800202c <SUBGRF_WriteRegister>
 8001b2e:	e067      	b.n	8001c00 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8001b30:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001b34:	f000 fa8e 	bl	8002054 <SUBGRF_ReadRegister>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f043 031e 	orr.w	r3, r3, #30
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	4619      	mov	r1, r3
 8001b42:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8001b46:	f000 fa71 	bl	800202c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	f7ff fcc2 	bl	80014d4 <RBI_GetRFOMaxPowerConfig>
 8001b50:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8001b52:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	da01      	bge.n	8001b60 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b14      	cmp	r3, #20
 8001b64:	d10e      	bne.n	8001b84 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8001b66:	2301      	movs	r3, #1
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2105      	movs	r1, #5
 8001b6c:	2003      	movs	r0, #3
 8001b6e:	f7ff fe9f 	bl	80018b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001b72:	79ba      	ldrb	r2, [r7, #6]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	3316      	adds	r3, #22
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	71bb      	strb	r3, [r7, #6]
 8001b82:	e031      	b.n	8001be8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b11      	cmp	r3, #17
 8001b88:	d10e      	bne.n	8001ba8 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2103      	movs	r1, #3
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7ff fe8d 	bl	80018b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001b96:	79ba      	ldrb	r2, [r7, #6]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3316      	adds	r3, #22
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	71bb      	strb	r3, [r7, #6]
 8001ba6:	e01f      	b.n	8001be8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b0e      	cmp	r3, #14
 8001bac:	d10e      	bne.n	8001bcc <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	2002      	movs	r0, #2
 8001bb6:	f7ff fe7b 	bl	80018b0 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8001bba:	79ba      	ldrb	r2, [r7, #6]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	330e      	adds	r3, #14
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	71bb      	strb	r3, [r7, #6]
 8001bca:	e00d      	b.n	8001be8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8001bcc:	2301      	movs	r3, #1
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2107      	movs	r1, #7
 8001bd2:	2004      	movs	r0, #4
 8001bd4:	f7ff fe6c 	bl	80018b0 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8001bd8:	79ba      	ldrb	r2, [r7, #6]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	3316      	adds	r3, #22
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8001be8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001bec:	f113 0f09 	cmn.w	r3, #9
 8001bf0:	da01      	bge.n	8001bf6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8001bf2:	23f7      	movs	r3, #247	@ 0xf7
 8001bf4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8001bf6:	2138      	movs	r1, #56	@ 0x38
 8001bf8:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8001bfc:	f000 fa16 	bl	800202c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8001c00:	79bb      	ldrb	r3, [r7, #6]
 8001c02:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8001c04:	797b      	ldrb	r3, [r7, #5]
 8001c06:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	208e      	movs	r0, #142	@ 0x8e
 8001c12:	f000 fa99 	bl	8002148 <SUBGRF_WriteCommand>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8001c20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001c2e:	4a61      	ldr	r2, [pc, #388]	@ (8001db4 <SUBGRF_SetModulationParams+0x194>)
 8001c30:	f107 0308 	add.w	r3, r7, #8
 8001c34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c38:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	4b5d      	ldr	r3, [pc, #372]	@ (8001db8 <SUBGRF_SetModulationParams+0x198>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d004      	beq.n	8001c52 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fef3 	bl	8001a38 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	f200 80a5 	bhi.w	8001da6 <SUBGRF_SetModulationParams+0x186>
 8001c5c:	a201      	add	r2, pc, #4	@ (adr r2, 8001c64 <SUBGRF_SetModulationParams+0x44>)
 8001c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c62:	bf00      	nop
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001d35 	.word	0x08001d35
 8001c6c:	08001cf7 	.word	0x08001cf7
 8001c70:	08001d63 	.word	0x08001d63
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8001c74:	2308      	movs	r3, #8
 8001c76:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dbc <SUBGRF_SetModulationParams+0x19c>)
 8001c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c82:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	0c1b      	lsrs	r3, r3, #16
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7b1b      	ldrb	r3, [r3, #12]
 8001c9e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	7b5b      	ldrb	r3, [r3, #13]
 8001ca4:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	2200      	movs	r2, #0
 8001cac:	461c      	mov	r4, r3
 8001cae:	4615      	mov	r5, r2
 8001cb0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8001cb4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8001cb8:	4a41      	ldr	r2, [pc, #260]	@ (8001dc0 <SUBGRF_SetModulationParams+0x1a0>)
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	4640      	mov	r0, r8
 8001cc0:	4649      	mov	r1, r9
 8001cc2:	f7fe fab5 	bl	8000230 <__aeabi_uldivmod>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4613      	mov	r3, r2
 8001ccc:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001ce4:	7cfb      	ldrb	r3, [r7, #19]
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	4619      	mov	r1, r3
 8001cee:	208b      	movs	r0, #139	@ 0x8b
 8001cf0:	f000 fa2a 	bl	8002148 <SUBGRF_WriteCommand>
        break;
 8001cf4:	e058      	b.n	8001da8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	4a2f      	ldr	r2, [pc, #188]	@ (8001dbc <SUBGRF_SetModulationParams+0x19c>)
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	7d1b      	ldrb	r3, [r3, #20]
 8001d20:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001d22:	7cfb      	ldrb	r3, [r7, #19]
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	208b      	movs	r0, #139	@ 0x8b
 8001d2e:	f000 fa0b 	bl	8002148 <SUBGRF_WriteCommand>
        break;
 8001d32:	e039      	b.n	8001da8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 8001d34:	2304      	movs	r3, #4
 8001d36:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	7e1b      	ldrb	r3, [r3, #24]
 8001d3c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7e5b      	ldrb	r3, [r3, #25]
 8001d42:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7e9b      	ldrb	r3, [r3, #26]
 8001d48:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7edb      	ldrb	r3, [r3, #27]
 8001d4e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001d50:	7cfb      	ldrb	r3, [r7, #19]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	f107 0308 	add.w	r3, r7, #8
 8001d58:	4619      	mov	r1, r3
 8001d5a:	208b      	movs	r0, #139	@ 0x8b
 8001d5c:	f000 f9f4 	bl	8002148 <SUBGRF_WriteCommand>

        break;
 8001d60:	e022      	b.n	8001da8 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 8001d62:	2305      	movs	r3, #5
 8001d64:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	4a14      	ldr	r2, [pc, #80]	@ (8001dbc <SUBGRF_SetModulationParams+0x19c>)
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	0a1b      	lsrs	r3, r3, #8
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7b1b      	ldrb	r3, [r3, #12]
 8001d8c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7b5b      	ldrb	r3, [r3, #13]
 8001d92:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8001d94:	7cfb      	ldrb	r3, [r7, #19]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f107 0308 	add.w	r3, r7, #8
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	208b      	movs	r0, #139	@ 0x8b
 8001da0:	f000 f9d2 	bl	8002148 <SUBGRF_WriteCommand>
        break;
 8001da4:	e000      	b.n	8001da8 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8001da6:	bf00      	nop
    }
}
 8001da8:	bf00      	nop
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001db2:	bf00      	nop
 8001db4:	08006264 	.word	0x08006264
 8001db8:	20000141 	.word	0x20000141
 8001dbc:	3d090000 	.word	0x3d090000
 8001dc0:	01e84800 	.word	0x01e84800

08001dc4 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8001dd0:	4a48      	ldr	r2, [pc, #288]	@ (8001ef4 <SUBGRF_SetPacketParams+0x130>)
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dd8:	c303      	stmia	r3!, {r0, r1}
 8001dda:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	4b45      	ldr	r3, [pc, #276]	@ (8001ef8 <SUBGRF_SetPacketParams+0x134>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d004      	beq.n	8001df2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fe23 	bl	8001a38 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d878      	bhi.n	8001eec <SUBGRF_SetPacketParams+0x128>
 8001dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8001e00 <SUBGRF_SetPacketParams+0x3c>)
 8001dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001ea1 	.word	0x08001ea1
 8001e08:	08001e95 	.word	0x08001e95
 8001e0c:	08001e11 	.word	0x08001e11
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7a5b      	ldrb	r3, [r3, #9]
 8001e14:	2bf1      	cmp	r3, #241	@ 0xf1
 8001e16:	d10a      	bne.n	8001e2e <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8001e18:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001e1c:	f7ff fbf5 	bl	800160a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8001e20:	f248 0005 	movw	r0, #32773	@ 0x8005
 8001e24:	f7ff fc11 	bl	800164a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	75bb      	strb	r3, [r7, #22]
 8001e2c:	e011      	b.n	8001e52 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7a5b      	ldrb	r3, [r3, #9]
 8001e32:	2bf2      	cmp	r3, #242	@ 0xf2
 8001e34:	d10a      	bne.n	8001e4c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8001e36:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8001e3a:	f7ff fbe6 	bl	800160a <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8001e3e:	f241 0021 	movw	r0, #4129	@ 0x1021
 8001e42:	f7ff fc02 	bl	800164a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8001e46:	2306      	movs	r3, #6
 8001e48:	75bb      	strb	r3, [r7, #22]
 8001e4a:	e002      	b.n	8001e52 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7a5b      	ldrb	r3, [r3, #9]
 8001e50:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8001e52:	2309      	movs	r3, #9
 8001e54:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	885b      	ldrh	r3, [r3, #2]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	885b      	ldrh	r3, [r3, #2]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	791b      	ldrb	r3, [r3, #4]
 8001e6e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	795b      	ldrb	r3, [r3, #5]
 8001e74:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	799b      	ldrb	r3, [r3, #6]
 8001e7a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	79db      	ldrb	r3, [r3, #7]
 8001e80:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7a1b      	ldrb	r3, [r3, #8]
 8001e86:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8001e88:	7dbb      	ldrb	r3, [r7, #22]
 8001e8a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7a9b      	ldrb	r3, [r3, #10]
 8001e90:	753b      	strb	r3, [r7, #20]
        break;
 8001e92:	e022      	b.n	8001eda <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8001e94:	2301      	movs	r3, #1
 8001e96:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7b1b      	ldrb	r3, [r3, #12]
 8001e9c:	733b      	strb	r3, [r7, #12]
        break;
 8001e9e:	e01c      	b.n	8001eda <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8001ea0:	2306      	movs	r3, #6
 8001ea2:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	89db      	ldrh	r3, [r3, #14]
 8001ea8:	0a1b      	lsrs	r3, r3, #8
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	89db      	ldrh	r3, [r3, #14]
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7c1a      	ldrb	r2, [r3, #16]
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <SUBGRF_SetPacketParams+0x138>)
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	7019      	strb	r1, [r3, #0]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7c5b      	ldrb	r3, [r3, #17]
 8001eca:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7c9b      	ldrb	r3, [r3, #18]
 8001ed0:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	7cdb      	ldrb	r3, [r3, #19]
 8001ed6:	747b      	strb	r3, [r7, #17]
        break;
 8001ed8:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8001eda:	7dfb      	ldrb	r3, [r7, #23]
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	208c      	movs	r0, #140	@ 0x8c
 8001ee6:	f000 f92f 	bl	8002148 <SUBGRF_WriteCommand>
 8001eea:	e000      	b.n	8001eee <SUBGRF_SetPacketParams+0x12a>
        return;
 8001eec:	bf00      	nop
}
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	0800626c 	.word	0x0800626c
 8001ef8:	20000141 	.word	0x20000141
 8001efc:	20000142 	.word	0x20000142

08001f00 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	460a      	mov	r2, r1
 8001f0a:	71fb      	strb	r3, [r7, #7]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8001f14:	79bb      	ldrb	r3, [r7, #6]
 8001f16:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	208f      	movs	r0, #143	@ 0x8f
 8001f22:	f000 f911 	bl	8002148 <SUBGRF_WriteCommand>
}
 8001f26:	bf00      	nop
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <SUBGRF_GetRxBufferStatus>:
    rssi = -buf[0] >> 1;
    return rssi;
}

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	2202      	movs	r2, #2
 8001f40:	4619      	mov	r1, r3
 8001f42:	2013      	movs	r0, #19
 8001f44:	f000 f922 	bl	800218c <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8001f48:	f7ff fd92 	bl	8001a70 <SUBGRF_GetPacketType>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10d      	bne.n	8001f6e <SUBGRF_GetRxBufferStatus+0x3e>
 8001f52:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <SUBGRF_GetRxBufferStatus+0x54>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d108      	bne.n	8001f6e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8001f5c:	f240 7002 	movw	r0, #1794	@ 0x702
 8001f60:	f000 f878 	bl	8002054 <SUBGRF_ReadRegister>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461a      	mov	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	701a      	strb	r2, [r3, #0]
 8001f6c:	e002      	b.n	8001f74 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8001f6e:	7b3a      	ldrb	r2, [r7, #12]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8001f74:	7b7a      	ldrb	r2, [r7, #13]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	701a      	strb	r2, [r3, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000142 	.word	0x20000142

08001f88 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8001f90:	f107 030c 	add.w	r3, r7, #12
 8001f94:	2203      	movs	r2, #3
 8001f96:	4619      	mov	r1, r3
 8001f98:	2014      	movs	r0, #20
 8001f9a:	f000 f8f7 	bl	800218c <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8001f9e:	f7ff fd67 	bl	8001a70 <SUBGRF_GetPacketType>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <SUBGRF_GetPacketStatus+0x30>
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d013      	beq.n	8001fde <SUBGRF_GetPacketStatus+0x56>
 8001fb6:	e02a      	b.n	800200e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8001fb8:	7b3a      	ldrb	r2, [r7, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8001fbe:	7b7b      	ldrb	r3, [r7, #13]
 8001fc0:	425b      	negs	r3, r3
 8001fc2:	105b      	asrs	r3, r3, #1
 8001fc4:	b25a      	sxtb	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8001fca:	7bbb      	ldrb	r3, [r7, #14]
 8001fcc:	425b      	negs	r3, r3
 8001fce:	105b      	asrs	r3, r3, #1
 8001fd0:	b25a      	sxtb	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
            break;
 8001fdc:	e020      	b.n	8002020 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8001fde:	7b3b      	ldrb	r3, [r7, #12]
 8001fe0:	425b      	negs	r3, r3
 8001fe2:	105b      	asrs	r3, r3, #1
 8001fe4:	b25a      	sxtb	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8001fea:	7b7b      	ldrb	r3, [r7, #13]
 8001fec:	b25b      	sxtb	r3, r3
 8001fee:	3302      	adds	r3, #2
 8001ff0:	109b      	asrs	r3, r3, #2
 8001ff2:	b25a      	sxtb	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8001ff8:	7bbb      	ldrb	r3, [r7, #14]
 8001ffa:	425b      	negs	r3, r3
 8001ffc:	105b      	asrs	r3, r3, #1
 8001ffe:	b25a      	sxtb	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8002004:	4b08      	ldr	r3, [pc, #32]	@ (8002028 <SUBGRF_GetPacketStatus+0xa0>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	611a      	str	r2, [r3, #16]
            break;
 800200c:	e008      	b.n	8002020 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 800200e:	2214      	movs	r2, #20
 8002010:	2100      	movs	r1, #0
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f003 fb3c 	bl	8005690 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	220f      	movs	r2, #15
 800201c:	701a      	strb	r2, [r3, #0]
            break;
 800201e:	bf00      	nop
    }
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000144 	.word	0x20000144

0800202c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	460a      	mov	r2, r1
 8002036:	80fb      	strh	r3, [r7, #6]
 8002038:	4613      	mov	r3, r2
 800203a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 800203c:	1d7a      	adds	r2, r7, #5
 800203e:	88f9      	ldrh	r1, [r7, #6]
 8002040:	2301      	movs	r3, #1
 8002042:	4803      	ldr	r0, [pc, #12]	@ (8002050 <SUBGRF_WriteRegister+0x24>)
 8002044:	f002 f944 	bl	80042d0 <HAL_SUBGHZ_WriteRegisters>
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	2000009c 	.word	0x2000009c

08002054 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 800205e:	f107 020f 	add.w	r2, r7, #15
 8002062:	88f9      	ldrh	r1, [r7, #6]
 8002064:	2301      	movs	r3, #1
 8002066:	4804      	ldr	r0, [pc, #16]	@ (8002078 <SUBGRF_ReadRegister+0x24>)
 8002068:	f002 f991 	bl	800438e <HAL_SUBGHZ_ReadRegisters>
    return data;
 800206c:	7bfb      	ldrb	r3, [r7, #15]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	2000009c 	.word	0x2000009c

0800207c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	80fb      	strh	r3, [r7, #6]
 8002088:	4613      	mov	r3, r2
 800208a:	80bb      	strh	r3, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800208c:	f3ef 8310 	mrs	r3, PRIMASK
 8002090:	60fb      	str	r3, [r7, #12]
  return(result);
 8002092:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002094:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002096:	b672      	cpsid	i
}
 8002098:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	88f9      	ldrh	r1, [r7, #6]
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	4806      	ldr	r0, [pc, #24]	@ (80020bc <SUBGRF_WriteRegisters+0x40>)
 80020a2:	f002 f915 	bl	80042d0 <HAL_SUBGHZ_WriteRegisters>
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f383 8810 	msr	PRIMASK, r3
}
 80020b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80020b2:	bf00      	nop
 80020b4:	3718      	adds	r7, #24
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	2000009c 	.word	0x2000009c

080020c0 <SUBGRF_WriteBuffer>:
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
    CRITICAL_SECTION_END();
}

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d0:	f3ef 8310 	mrs	r3, PRIMASK
 80020d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80020d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80020d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80020da:	b672      	cpsid	i
}
 80020dc:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80020de:	79bb      	ldrb	r3, [r7, #6]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	79f9      	ldrb	r1, [r7, #7]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4806      	ldr	r0, [pc, #24]	@ (8002100 <SUBGRF_WriteBuffer+0x40>)
 80020e8:	f002 fa65 	bl	80045b6 <HAL_SUBGHZ_WriteBuffer>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	f383 8810 	msr	PRIMASK, r3
}
 80020f6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80020f8:	bf00      	nop
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	2000009c 	.word	0x2000009c

08002104 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	6039      	str	r1, [r7, #0]
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	4613      	mov	r3, r2
 8002112:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002114:	f3ef 8310 	mrs	r3, PRIMASK
 8002118:	60fb      	str	r3, [r7, #12]
  return(result);
 800211a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 800211c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800211e:	b672      	cpsid	i
}
 8002120:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	b29b      	uxth	r3, r3
 8002126:	79f9      	ldrb	r1, [r7, #7]
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	4806      	ldr	r0, [pc, #24]	@ (8002144 <SUBGRF_ReadBuffer+0x40>)
 800212c:	f002 fa96 	bl	800465c <HAL_SUBGHZ_ReadBuffer>
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	f383 8810 	msr	PRIMASK, r3
}
 800213a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800213c:	bf00      	nop
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	2000009c 	.word	0x2000009c

08002148 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
 8002154:	4613      	mov	r3, r2
 8002156:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002158:	f3ef 8310 	mrs	r3, PRIMASK
 800215c:	60fb      	str	r3, [r7, #12]
  return(result);
 800215e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8002160:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002162:	b672      	cpsid	i
}
 8002164:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8002166:	88bb      	ldrh	r3, [r7, #4]
 8002168:	79f9      	ldrb	r1, [r7, #7]
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	4806      	ldr	r0, [pc, #24]	@ (8002188 <SUBGRF_WriteCommand+0x40>)
 800216e:	f002 f96f 	bl	8004450 <HAL_SUBGHZ_ExecSetCmd>
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f383 8810 	msr	PRIMASK, r3
}
 800217c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000009c 	.word	0x2000009c

0800218c <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	71fb      	strb	r3, [r7, #7]
 8002198:	4613      	mov	r3, r2
 800219a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219c:	f3ef 8310 	mrs	r3, PRIMASK
 80021a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80021a2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80021a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80021a6:	b672      	cpsid	i
}
 80021a8:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80021aa:	88bb      	ldrh	r3, [r7, #4]
 80021ac:	79f9      	ldrb	r1, [r7, #7]
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	4806      	ldr	r0, [pc, #24]	@ (80021cc <SUBGRF_ReadCommand+0x40>)
 80021b2:	f002 f9ac 	bl	800450e <HAL_SUBGHZ_ExecGetCmd>
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f383 8810 	msr	PRIMASK, r3
}
 80021c0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	2000009c 	.word	0x2000009c

080021d0 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	460a      	mov	r2, r1
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	4613      	mov	r3, r2
 80021de:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d10d      	bne.n	8002206 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 80021ea:	79fb      	ldrb	r3, [r7, #7]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d104      	bne.n	80021fa <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 80021f0:	2302      	movs	r3, #2
 80021f2:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80021f4:	2004      	movs	r0, #4
 80021f6:	f000 f8e7 	bl	80023c8 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d107      	bne.n	8002210 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8002200:	2303      	movs	r3, #3
 8002202:	73fb      	strb	r3, [r7, #15]
 8002204:	e004      	b.n	8002210 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8002206:	79bb      	ldrb	r3, [r7, #6]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 800220c:	2301      	movs	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff f93b 	bl	800148e <RBI_ConfigRFSwitch>
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 800222e:	f7ff f93c 	bl	80014aa <RBI_GetTxConfig>
 8002232:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2b02      	cmp	r3, #2
 8002238:	d016      	beq.n	8002268 <SUBGRF_SetRfTxPower+0x48>
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b02      	cmp	r3, #2
 800223e:	dc16      	bgt.n	800226e <SUBGRF_SetRfTxPower+0x4e>
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <SUBGRF_SetRfTxPower+0x2e>
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d00a      	beq.n	8002262 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 800224c:	e00f      	b.n	800226e <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 800224e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002252:	2b0f      	cmp	r3, #15
 8002254:	dd02      	ble.n	800225c <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8002256:	2302      	movs	r3, #2
 8002258:	73fb      	strb	r3, [r7, #15]
            break;
 800225a:	e009      	b.n	8002270 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 800225c:	2301      	movs	r3, #1
 800225e:	73fb      	strb	r3, [r7, #15]
            break;
 8002260:	e006      	b.n	8002270 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
            break;
 8002266:	e003      	b.n	8002270 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8002268:	2302      	movs	r3, #2
 800226a:	73fb      	strb	r3, [r7, #15]
            break;
 800226c:	e000      	b.n	8002270 <SUBGRF_SetRfTxPower+0x50>
            break;
 800226e:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8002270:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002274:	7bfb      	ldrb	r3, [r7, #15]
 8002276:	2202      	movs	r2, #2
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fc03 	bl	8001a84 <SUBGRF_SetTxParams>

    return paSelect;
 800227e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_SUBGHZ_TxCpltCallback>:
    return RF_WAKEUP_TIME;
}

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2001      	movs	r0, #1
 8002296:	4798      	blx	r3
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	2000014c 	.word	0x2000014c

080022a4 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80022ac:	4b03      	ldr	r3, [pc, #12]	@ (80022bc <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2002      	movs	r0, #2
 80022b2:	4798      	blx	r3
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	2000014c 	.word	0x2000014c

080022c0 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2040      	movs	r0, #64	@ 0x40
 80022ce:	4798      	blx	r3
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	2000014c 	.word	0x2000014c

080022dc <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d002      	beq.n	80022f4 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d005      	beq.n	80022fe <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80022f2:	e00a      	b.n	800230a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80022f4:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2080      	movs	r0, #128	@ 0x80
 80022fa:	4798      	blx	r3
            break;
 80022fc:	e005      	b.n	800230a <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80022fe:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002306:	4798      	blx	r3
            break;
 8002308:	bf00      	nop
    }
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	2000014c 	.word	0x2000014c

08002318 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8002320:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002328:	4798      	blx	r3
}
 800232a:	bf00      	nop
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	2000014c 	.word	0x2000014c

08002338 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8002340:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2020      	movs	r0, #32
 8002346:	4798      	blx	r3
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	2000014c 	.word	0x2000014c

08002354 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 800235c:	4b03      	ldr	r3, [pc, #12]	@ (800236c <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2004      	movs	r0, #4
 8002362:	4798      	blx	r3
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2000014c 	.word	0x2000014c

08002370 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8002378:	4b03      	ldr	r3, [pc, #12]	@ (8002388 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2008      	movs	r0, #8
 800237e:	4798      	blx	r3
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	2000014c 	.word	0x2000014c

0800238c <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8002394:	4b03      	ldr	r3, [pc, #12]	@ (80023a4 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2010      	movs	r0, #16
 800239a:	4798      	blx	r3
}
 800239c:	bf00      	nop
 800239e:	3708      	adds	r7, #8
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	2000014c 	.word	0x2000014c

080023a8 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80023b8:	4798      	blx	r3
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000014c 	.word	0x2000014c

080023c8 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 80023d2:	f7ff f878 	bl	80014c6 <RBI_IsDCDC>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d112      	bne.n	8002402 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80023dc:	f640 1023 	movw	r0, #2339	@ 0x923
 80023e0:	f7ff fe38 	bl	8002054 <SUBGRF_ReadRegister>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	f023 0306 	bic.w	r3, r3, #6
 80023ee:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80023f0:	7bfa      	ldrb	r2, [r7, #15]
 80023f2:	79fb      	ldrb	r3, [r7, #7]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4619      	mov	r1, r3
 80023fa:	f640 1023 	movw	r0, #2339	@ 0x923
 80023fe:	f7ff fe15 	bl	800202c <SUBGRF_WriteRegister>
  }
}
 8002402:	bf00      	nop
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
	...

0800240c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002416:	2003      	movs	r0, #3
 8002418:	f000 f95e 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800241c:	f001 fb62 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8002420:	4603      	mov	r3, r0
 8002422:	4a09      	ldr	r2, [pc, #36]	@ (8002448 <HAL_Init+0x3c>)
 8002424:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002426:	2000      	movs	r0, #0
 8002428:	f000 f810 	bl	800244c <HAL_InitTick>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	71fb      	strb	r3, [r7, #7]
 8002436:	e001      	b.n	800243c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002438:	f7fe fd20 	bl	8000e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800243c:	79fb      	ldrb	r3, [r7, #7]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000000 	.word	0x20000000

0800244c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002458:	4b17      	ldr	r3, [pc, #92]	@ (80024b8 <HAL_InitTick+0x6c>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d024      	beq.n	80024aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002460:	f001 fb40 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b14      	ldr	r3, [pc, #80]	@ (80024b8 <HAL_InitTick+0x6c>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	4619      	mov	r1, r3
 800246c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002470:	fbb3 f3f1 	udiv	r3, r3, r1
 8002474:	fbb2 f3f3 	udiv	r3, r2, r3
 8002478:	4618      	mov	r0, r3
 800247a:	f000 f960 	bl	800273e <HAL_SYSTICK_Config>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10f      	bne.n	80024a4 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	d809      	bhi.n	800249e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800248a:	2200      	movs	r2, #0
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	f04f 30ff 	mov.w	r0, #4294967295
 8002492:	f000 f92c 	bl	80026ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002496:	4a09      	ldr	r2, [pc, #36]	@ (80024bc <HAL_InitTick+0x70>)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	e007      	b.n	80024ae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	e004      	b.n	80024ae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	20000014 	.word	0x20000014
 80024bc:	20000010 	.word	0x20000010

080024c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_IncTick+0x1c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_IncTick+0x20>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a03      	ldr	r2, [pc, #12]	@ (80024e0 <HAL_IncTick+0x20>)
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	20000014 	.word	0x20000014
 80024e0:	20000150 	.word	0x20000150

080024e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return uwTick;
 80024e8:	4b02      	ldr	r3, [pc, #8]	@ (80024f4 <HAL_GetTick+0x10>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	20000150 	.word	0x20000150

080024f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff fff0 	bl	80024e4 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d005      	beq.n	800251e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <HAL_Delay+0x44>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251e:	bf00      	nop
 8002520:	f7ff ffe0 	bl	80024e4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d8f7      	bhi.n	8002520 <HAL_Delay+0x28>
  {
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	20000014 	.word	0x20000014

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800256c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	@ (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db0b      	blt.n	80025ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4906      	ldr	r1, [pc, #24]	@ (80025d8 <__NVIC_EnableIRQ+0x34>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2001      	movs	r0, #1
 80025c6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100

080025dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	@ (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	@ (800262c <__NVIC_SetPriority+0x50>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	@ 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1c3 0307 	rsb	r3, r3, #7
 800264a:	2b04      	cmp	r3, #4
 800264c:	bf28      	it	cs
 800264e:	2304      	movcs	r3, #4
 8002650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3304      	adds	r3, #4
 8002656:	2b06      	cmp	r3, #6
 8002658:	d902      	bls.n	8002660 <NVIC_EncodePriority+0x30>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3b03      	subs	r3, #3
 800265e:	e000      	b.n	8002662 <NVIC_EncodePriority+0x32>
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43d9      	mvns	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	4313      	orrs	r3, r2
         );
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	@ 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff90 	bl	80025dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff2d 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026fc:	f7ff ff44 	bl	8002588 <__NVIC_GetPriorityGrouping>
 8002700:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	68b9      	ldr	r1, [r7, #8]
 8002706:	6978      	ldr	r0, [r7, #20]
 8002708:	f7ff ff92 	bl	8002630 <NVIC_EncodePriority>
 800270c:	4602      	mov	r2, r0
 800270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff61 	bl	80025dc <__NVIC_SetPriority>
}
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	4603      	mov	r3, r0
 800272a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff ff37 	bl	80025a4 <__NVIC_EnableIRQ>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ffa4 	bl	8002694 <SysTick_Config>
 800274c:	4603      	mov	r3, r0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002766:	e140      	b.n	80029ea <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	fa01 f303 	lsl.w	r3, r1, r3
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8132 	beq.w	80029e4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 0303 	and.w	r3, r3, #3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d005      	beq.n	8002798 <HAL_GPIO_Init+0x40>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d130      	bne.n	80027fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	4013      	ands	r3, r2
 80027ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	693a      	ldr	r2, [r7, #16]
 80027be:	4313      	orrs	r3, r2
 80027c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027ce:	2201      	movs	r2, #1
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	091b      	lsrs	r3, r3, #4
 80027e4:	f003 0201 	and.w	r2, r3, #1
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b03      	cmp	r3, #3
 8002804:	d017      	beq.n	8002836 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	2203      	movs	r2, #3
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43db      	mvns	r3, r3
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4013      	ands	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d123      	bne.n	800288a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	08da      	lsrs	r2, r3, #3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3208      	adds	r2, #8
 800284a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	220f      	movs	r2, #15
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	43db      	mvns	r3, r3
 8002860:	693a      	ldr	r2, [r7, #16]
 8002862:	4013      	ands	r3, r2
 8002864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	08da      	lsrs	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3208      	adds	r2, #8
 8002884:	6939      	ldr	r1, [r7, #16]
 8002886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	2203      	movs	r2, #3
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43db      	mvns	r3, r3
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f003 0203 	and.w	r2, r3, #3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 808c 	beq.w	80029e4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80028cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002a08 <HAL_GPIO_Init+0x2b0>)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	2207      	movs	r2, #7
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80028f6:	d00d      	beq.n	8002914 <HAL_GPIO_Init+0x1bc>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a44      	ldr	r2, [pc, #272]	@ (8002a0c <HAL_GPIO_Init+0x2b4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d007      	beq.n	8002910 <HAL_GPIO_Init+0x1b8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a43      	ldr	r2, [pc, #268]	@ (8002a10 <HAL_GPIO_Init+0x2b8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_GPIO_Init+0x1b4>
 8002908:	2302      	movs	r3, #2
 800290a:	e004      	b.n	8002916 <HAL_GPIO_Init+0x1be>
 800290c:	2307      	movs	r3, #7
 800290e:	e002      	b.n	8002916 <HAL_GPIO_Init+0x1be>
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_GPIO_Init+0x1be>
 8002914:	2300      	movs	r3, #0
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	f002 0203 	and.w	r2, r2, #3
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	4093      	lsls	r3, r2
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002926:	4938      	ldr	r1, [pc, #224]	@ (8002a08 <HAL_GPIO_Init+0x2b0>)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	089b      	lsrs	r3, r3, #2
 800292c:	3302      	adds	r3, #2
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002934:	4b37      	ldr	r3, [pc, #220]	@ (8002a14 <HAL_GPIO_Init+0x2bc>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	43db      	mvns	r3, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002958:	4a2e      	ldr	r2, [pc, #184]	@ (8002a14 <HAL_GPIO_Init+0x2bc>)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800295e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a14 <HAL_GPIO_Init+0x2bc>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43db      	mvns	r3, r3
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002982:	4a24      	ldr	r2, [pc, #144]	@ (8002a14 <HAL_GPIO_Init+0x2bc>)
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002988:	4b22      	ldr	r3, [pc, #136]	@ (8002a14 <HAL_GPIO_Init+0x2bc>)
 800298a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800298e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43db      	mvns	r3, r3
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4013      	ands	r3, r2
 8002998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80029ae:	4a19      	ldr	r2, [pc, #100]	@ (8002a14 <HAL_GPIO_Init+0x2bc>)
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80029b6:	4b17      	ldr	r3, [pc, #92]	@ (8002a14 <HAL_GPIO_Init+0x2bc>)
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029bc:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80029dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a14 <HAL_GPIO_Init+0x2bc>)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	3301      	adds	r3, #1
 80029e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	fa22 f303 	lsr.w	r3, r2, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f47f aeb7 	bne.w	8002768 <HAL_GPIO_Init+0x10>
  }
}
 80029fa:	bf00      	nop
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40010000 	.word	0x40010000
 8002a0c:	48000400 	.word	0x48000400
 8002a10:	48000800 	.word	0x48000800
 8002a14:	58000800 	.word	0x58000800

08002a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	807b      	strh	r3, [r7, #2]
 8002a24:	4613      	mov	r3, r2
 8002a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a28:	787b      	ldrb	r3, [r7, #1]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a2e:	887a      	ldrh	r2, [r7, #2]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a36:	887a      	ldrh	r2, [r7, #2]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr

08002a46 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b085      	sub	sp, #20
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
 8002a4e:	460b      	mov	r3, r1
 8002a50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a58:	887a      	ldrh	r2, [r7, #2]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	041a      	lsls	r2, r3, #16
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	400b      	ands	r3, r1
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	619a      	str	r2, [r3, #24]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a7c:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a03      	ldr	r2, [pc, #12]	@ (8002a90 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	58000400 	.word	0x58000400

08002a94 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002a98:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <HAL_PWREx_GetVoltageRange+0x14>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	58000400 	.word	0x58000400

08002aac <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002ab0:	4b06      	ldr	r3, [pc, #24]	@ (8002acc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002abc:	d101      	bne.n	8002ac2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr
 8002acc:	58000400 	.word	0x58000400

08002ad0 <LL_RCC_HSE_EnableTcxo>:
  * @note PB0 must be configured in analog mode prior enabling VDDTCXO supply
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_EnableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableTcxo(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ade:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <LL_RCC_HSE_DisableTcxo>:
  * @brief  Disable HSE VDDTCXO output on package pin PB0-VDDTCXO
  * @rmtoll CR           HSEBYPPWR        LL_RCC_HSE_DisableTcxo
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableTcxo(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002afa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler  division by 2
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b1a:	d101      	bne.n	8002b20 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr

08002b2a <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b3c:	6013      	str	r3, [r2, #0]
}
 8002b3e:	bf00      	nop
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bc80      	pop	{r7}
 8002b44:	4770      	bx	lr

08002b46 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
}
 8002b5a:	bf00      	nop
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b74:	d101      	bne.n	8002b7a <LL_RCC_HSE_IsReady+0x18>
 8002b76:	2301      	movs	r3, #1
 8002b78:	e000      	b.n	8002b7c <LL_RCC_HSE_IsReady+0x1a>
 8002b7a:	2300      	movs	r3, #0
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002bae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bb2:	6013      	str	r3, [r2, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr

08002bbc <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bce:	d101      	bne.n	8002bd4 <LL_RCC_HSI_IsReady+0x18>
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e000      	b.n	8002bd6 <LL_RCC_HSI_IsReady+0x1a>
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bc80      	pop	{r7}
 8002bdc:	4770      	bx	lr

08002bde <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002be6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	061b      	lsls	r3, r3, #24
 8002bf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	604b      	str	r3, [r1, #4]
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d101      	bne.n	8002c1e <LL_RCC_LSE_IsReady+0x18>
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e000      	b.n	8002c20 <LL_RCC_LSE_IsReady+0x1a>
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c58:	f023 0301 	bic.w	r3, r3, #1
 8002c5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr

08002c68 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d101      	bne.n	8002c80 <LL_RCC_LSI_IsReady+0x18>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <LL_RCC_LSI_IsReady+0x1a>
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr

08002c8a <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6013      	str	r3, [r2, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr

08002ca6 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002cb4:	f023 0301 	bic.w	r3, r3, #1
 8002cb8:	6013      	str	r3, [r2, #0]
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002cc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d101      	bne.n	8002cd8 <LL_RCC_MSI_IsReady+0x16>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <LL_RCC_MSI_IsReady+0x18>
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bc80      	pop	{r7}
 8002ce0:	4770      	bx	lr

08002ce2 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d101      	bne.n	8002cf8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr

08002d02 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002d02:	b480      	push	{r7}
 8002d04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002d1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d24:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr

08002d30 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	604b      	str	r3, [r1, #4]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr

08002d58 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f023 0203 	bic.w	r2, r3, #3
 8002d6a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	608b      	str	r3, [r1, #8]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr

08002d7e <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 030c 	and.w	r3, r3, #12
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dc6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002dca:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002df4:	f023 020f 	bic.w	r2, r3, #15
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8002e06:	bf00      	nop
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	608b      	str	r3, [r1, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bc80      	pop	{r7}
 8002e5a:	4770      	bx	lr

08002e5c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr

08002ea2 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ea6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr

08002eb8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002ebc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eca:	6013      	str	r3, [r2, #0]
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ee2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr

08002ef0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002f02:	d101      	bne.n	8002f08 <LL_RCC_PLL_IsReady+0x18>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <LL_RCC_PLL_IsReady+0x1a>
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002f12:	b480      	push	{r7}
 8002f14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	0a1b      	lsrs	r3, r3, #8
 8002f1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr

08002f40 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr

08002f56 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f003 0303 	and.w	r3, r3, #3
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f7e:	d101      	bne.n	8002f84 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002f92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f96:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fa2:	d101      	bne.n	8002fa8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bc80      	pop	{r7}
 8002fb0:	4770      	bx	lr

08002fb2 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fba:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8002fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc6:	d101      	bne.n	8002fcc <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr

08002fd6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fe8:	d101      	bne.n	8002fee <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003006:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800300a:	d101      	bne.n	8003010 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr
	...

0800301c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e36f      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800302e:	f7ff fea6 	bl	8002d7e <LL_RCC_GetSysClkSource>
 8003032:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003034:	f7ff ff8f 	bl	8002f56 <LL_RCC_PLL_GetMainSource>
 8003038:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80c4 	beq.w	80031d0 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d005      	beq.n	800305a <HAL_RCC_OscConfig+0x3e>
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b0c      	cmp	r3, #12
 8003052:	d176      	bne.n	8003142 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d173      	bne.n	8003142 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e353      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800306a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_RCC_OscConfig+0x68>
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003082:	e006      	b.n	8003092 <HAL_RCC_OscConfig+0x76>
 8003084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003088:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003092:	4293      	cmp	r3, r2
 8003094:	d222      	bcs.n	80030dc <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fd5a 	bl	8003b54 <RCC_SetFlashLatencyFromMSIRange>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e331      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fe2b 	bl	8002d30 <LL_RCC_MSI_SetCalibTrimming>
 80030da:	e021      	b.n	8003120 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030e6:	f043 0308 	orr.w	r3, r3, #8
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff fe12 	bl	8002d30 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fd1f 	bl	8003b54 <RCC_SetFlashLatencyFromMSIRange>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e2f6      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003120:	f000 fce0 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003124:	4603      	mov	r3, r0
 8003126:	4aa7      	ldr	r2, [pc, #668]	@ (80033c4 <HAL_RCC_OscConfig+0x3a8>)
 8003128:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800312a:	4ba7      	ldr	r3, [pc, #668]	@ (80033c8 <HAL_RCC_OscConfig+0x3ac>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7ff f98c 	bl	800244c <HAL_InitTick>
 8003134:	4603      	mov	r3, r0
 8003136:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003138:	7cfb      	ldrb	r3, [r7, #19]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d047      	beq.n	80031ce <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800313e:	7cfb      	ldrb	r3, [r7, #19]
 8003140:	e2e5      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d02c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800314a:	f7ff fd9e 	bl	8002c8a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800314e:	f7ff f9c9 	bl	80024e4 <HAL_GetTick>
 8003152:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003156:	f7ff f9c5 	bl	80024e4 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e2d2      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003168:	f7ff fdab 	bl	8002cc2 <LL_RCC_MSI_IsReady>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0f1      	beq.n	8003156 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800317c:	f043 0308 	orr.w	r3, r3, #8
 8003180:	6013      	str	r3, [r2, #0]
 8003182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003190:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003194:	4313      	orrs	r3, r2
 8003196:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff fdc7 	bl	8002d30 <LL_RCC_MSI_SetCalibTrimming>
 80031a2:	e015      	b.n	80031d0 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031a4:	f7ff fd7f 	bl	8002ca6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031a8:	f7ff f99c 	bl	80024e4 <HAL_GetTick>
 80031ac:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031b0:	f7ff f998 	bl	80024e4 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e2a5      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80031c2:	f7ff fd7e 	bl	8002cc2 <LL_RCC_MSI_IsReady>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1f1      	bne.n	80031b0 <HAL_RCC_OscConfig+0x194>
 80031cc:	e000      	b.n	80031d0 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80031ce:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d058      	beq.n	800328e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b08      	cmp	r3, #8
 80031e0:	d005      	beq.n	80031ee <HAL_RCC_OscConfig+0x1d2>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b0c      	cmp	r3, #12
 80031e6:	d108      	bne.n	80031fa <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	2b03      	cmp	r3, #3
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d14b      	bne.n	800328e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e289      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003218:	d102      	bne.n	8003220 <HAL_RCC_OscConfig+0x204>
 800321a:	f7ff fc86 	bl	8002b2a <LL_RCC_HSE_Enable>
 800321e:	e00d      	b.n	800323c <HAL_RCC_OscConfig+0x220>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003228:	d104      	bne.n	8003234 <HAL_RCC_OscConfig+0x218>
 800322a:	f7ff fc51 	bl	8002ad0 <LL_RCC_HSE_EnableTcxo>
 800322e:	f7ff fc7c 	bl	8002b2a <LL_RCC_HSE_Enable>
 8003232:	e003      	b.n	800323c <HAL_RCC_OscConfig+0x220>
 8003234:	f7ff fc87 	bl	8002b46 <LL_RCC_HSE_Disable>
 8003238:	f7ff fc58 	bl	8002aec <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d012      	beq.n	800326a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003244:	f7ff f94e 	bl	80024e4 <HAL_GetTick>
 8003248:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800324a:	e008      	b.n	800325e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800324c:	f7ff f94a 	bl	80024e4 <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	2b64      	cmp	r3, #100	@ 0x64
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e257      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800325e:	f7ff fc80 	bl	8002b62 <LL_RCC_HSE_IsReady>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d0f1      	beq.n	800324c <HAL_RCC_OscConfig+0x230>
 8003268:	e011      	b.n	800328e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326a:	f7ff f93b 	bl	80024e4 <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003270:	e008      	b.n	8003284 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003272:	f7ff f937 	bl	80024e4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b64      	cmp	r3, #100	@ 0x64
 800327e:	d901      	bls.n	8003284 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e244      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003284:	f7ff fc6d 	bl	8002b62 <LL_RCC_HSE_IsReady>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f1      	bne.n	8003272 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d046      	beq.n	8003328 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d005      	beq.n	80032ac <HAL_RCC_OscConfig+0x290>
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	2b0c      	cmp	r3, #12
 80032a4:	d10e      	bne.n	80032c4 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d10b      	bne.n	80032c4 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e22a      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fc8e 	bl	8002bde <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80032c2:	e031      	b.n	8003328 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d019      	beq.n	8003300 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032cc:	f7ff fc5a 	bl	8002b84 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7ff f908 	bl	80024e4 <HAL_GetTick>
 80032d4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d8:	f7ff f904 	bl	80024e4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e211      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032ea:	f7ff fc67 	bl	8002bbc <LL_RCC_HSI_IsReady>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f1      	beq.n	80032d8 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7ff fc70 	bl	8002bde <LL_RCC_HSI_SetCalibTrimming>
 80032fe:	e013      	b.n	8003328 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003300:	f7ff fc4e 	bl	8002ba0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7ff f8ee 	bl	80024e4 <HAL_GetTick>
 8003308:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330c:	f7ff f8ea 	bl	80024e4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1f7      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800331e:	f7ff fc4d 	bl	8002bbc <LL_RCC_HSI_IsReady>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f1      	bne.n	800330c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d06e      	beq.n	8003412 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d056      	beq.n	80033ea <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 800333c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003340:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003344:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	429a      	cmp	r2, r3
 8003352:	d031      	beq.n	80033b8 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e1d0      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d013      	beq.n	800339e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003376:	f7ff fc67 	bl	8002c48 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800337a:	f7ff f8b3 	bl	80024e4 <HAL_GetTick>
 800337e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003382:	f7ff f8af 	bl	80024e4 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b11      	cmp	r3, #17
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e1bc      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003394:	f7ff fc68 	bl	8002c68 <LL_RCC_LSI_IsReady>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f1      	bne.n	8003382 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800339e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a6:	f023 0210 	bic.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033b2:	4313      	orrs	r3, r2
 80033b4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b8:	f7ff fc36 	bl	8002c28 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7ff f892 	bl	80024e4 <HAL_GetTick>
 80033c0:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80033c2:	e00c      	b.n	80033de <HAL_RCC_OscConfig+0x3c2>
 80033c4:	20000000 	.word	0x20000000
 80033c8:	20000010 	.word	0x20000010
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033cc:	f7ff f88a 	bl	80024e4 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b11      	cmp	r3, #17
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e197      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80033de:	f7ff fc43 	bl	8002c68 <LL_RCC_LSI_IsReady>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d0f1      	beq.n	80033cc <HAL_RCC_OscConfig+0x3b0>
 80033e8:	e013      	b.n	8003412 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033ea:	f7ff fc2d 	bl	8002c48 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ee:	f7ff f879 	bl	80024e4 <HAL_GetTick>
 80033f2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033f6:	f7ff f875 	bl	80024e4 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b11      	cmp	r3, #17
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e182      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003408:	f7ff fc2e 	bl	8002c68 <LL_RCC_LSI_IsReady>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f1      	bne.n	80033f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b00      	cmp	r3, #0
 800341c:	f000 80d8 	beq.w	80035d0 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003420:	f7ff fb44 	bl	8002aac <LL_PWR_IsEnabledBkUpAccess>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d113      	bne.n	8003452 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800342a:	f7ff fb25 	bl	8002a78 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342e:	f7ff f859 	bl	80024e4 <HAL_GetTick>
 8003432:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003434:	e008      	b.n	8003448 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003436:	f7ff f855 	bl	80024e4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	2b02      	cmp	r3, #2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e162      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003448:	f7ff fb30 	bl	8002aac <LL_PWR_IsEnabledBkUpAccess>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f1      	beq.n	8003436 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d07b      	beq.n	8003552 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2b85      	cmp	r3, #133	@ 0x85
 8003460:	d003      	beq.n	800346a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	2b05      	cmp	r3, #5
 8003468:	d109      	bne.n	800347e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800346a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003472:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7ff f831 	bl	80024e4 <HAL_GetTick>
 8003482:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7ff f823 	bl	80024e4 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e12e      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80034b0:	f7ff fba9 	bl	8002c06 <LL_RCC_LSE_IsReady>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0ef      	beq.n	800349a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b81      	cmp	r3, #129	@ 0x81
 80034c0:	d003      	beq.n	80034ca <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b85      	cmp	r3, #133	@ 0x85
 80034c8:	d121      	bne.n	800350e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7ff f80b 	bl	80024e4 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fe fffd 	bl	80024e4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e108      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0ec      	beq.n	80034e6 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800350c:	e060      	b.n	80035d0 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fe ffe9 	bl	80024e4 <HAL_GetTick>
 8003512:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003514:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800351c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003520:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fe ffdb 	bl	80024e4 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0e6      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003548:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ec      	bne.n	800352a <HAL_RCC_OscConfig+0x50e>
 8003550:	e03e      	b.n	80035d0 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003552:	f7fe ffc7 	bl	80024e4 <HAL_GetTick>
 8003556:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003560:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003564:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800356c:	e00a      	b.n	8003584 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356e:	f7fe ffb9 	bl	80024e4 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357c:	4293      	cmp	r3, r2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e0c4      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003590:	2b00      	cmp	r3, #0
 8003592:	d1ec      	bne.n	800356e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003594:	f7fe ffa6 	bl	80024e4 <HAL_GetTick>
 8003598:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800359a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035a6:	f023 0301 	bic.w	r3, r3, #1
 80035aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035b0:	f7fe ff98 	bl	80024e4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e0a3      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80035c6:	f7ff fb1e 	bl	8002c06 <LL_RCC_LSE_IsReady>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d1ef      	bne.n	80035b0 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8099 	beq.w	800370c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d06c      	beq.n	80036ba <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d14b      	bne.n	8003680 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	f7ff fc74 	bl	8002ed4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe ff7a 	bl	80024e4 <HAL_GetTick>
 80035f0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fe ff76 	bl	80024e4 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b0a      	cmp	r3, #10
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e083      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003606:	f7ff fc73 	bl	8002ef0 <LL_RCC_PLL_IsReady>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f1      	bne.n	80035f4 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	4b40      	ldr	r3, [pc, #256]	@ (8003718 <HAL_RCC_OscConfig+0x6fc>)
 8003618:	4013      	ands	r3, r2
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003622:	4311      	orrs	r1, r2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003628:	0212      	lsls	r2, r2, #8
 800362a:	4311      	orrs	r1, r2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003630:	4311      	orrs	r1, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003636:	4311      	orrs	r1, r2
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800363c:	430a      	orrs	r2, r1
 800363e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003642:	4313      	orrs	r3, r2
 8003644:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003646:	f7ff fc37 	bl	8002eb8 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003658:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fe ff43 	bl	80024e4 <HAL_GetTick>
 800365e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003662:	f7fe ff3f 	bl	80024e4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b0a      	cmp	r3, #10
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e04c      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003674:	f7ff fc3c 	bl	8002ef0 <LL_RCC_PLL_IsReady>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f1      	beq.n	8003662 <HAL_RCC_OscConfig+0x646>
 800367e:	e045      	b.n	800370c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003680:	f7ff fc28 	bl	8002ed4 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe ff2e 	bl	80024e4 <HAL_GetTick>
 8003688:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fe ff2a 	bl	80024e4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b0a      	cmp	r3, #10
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e037      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800369e:	f7ff fc27 	bl	8002ef0 <LL_RCC_PLL_IsReady>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f1      	bne.n	800368c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036b2:	4b1a      	ldr	r3, [pc, #104]	@ (800371c <HAL_RCC_OscConfig+0x700>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	60cb      	str	r3, [r1, #12]
 80036b8:	e028      	b.n	800370c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e023      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0203 	and.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d8:	429a      	cmp	r2, r3
 80036da:	d115      	bne.n	8003708 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d10e      	bne.n	8003708 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d106      	bne.n	8003708 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3720      	adds	r7, #32
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	11c1808c 	.word	0x11c1808c
 800371c:	eefefffc 	.word	0xeefefffc

08003720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d101      	bne.n	8003734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e12c      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003734:	4b98      	ldr	r3, [pc, #608]	@ (8003998 <HAL_RCC_ClockConfig+0x278>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d91b      	bls.n	800377a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003742:	4b95      	ldr	r3, [pc, #596]	@ (8003998 <HAL_RCC_ClockConfig+0x278>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f023 0207 	bic.w	r2, r3, #7
 800374a:	4993      	ldr	r1, [pc, #588]	@ (8003998 <HAL_RCC_ClockConfig+0x278>)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	4313      	orrs	r3, r2
 8003750:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003752:	f7fe fec7 	bl	80024e4 <HAL_GetTick>
 8003756:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003758:	e008      	b.n	800376c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800375a:	f7fe fec3 	bl	80024e4 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e110      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800376c:	4b8a      	ldr	r3, [pc, #552]	@ (8003998 <HAL_RCC_ClockConfig+0x278>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d1ef      	bne.n	800375a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d016      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff fb02 	bl	8002d94 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003790:	f7fe fea8 	bl	80024e4 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003798:	f7fe fea4 	bl	80024e4 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0f1      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80037aa:	f7ff fbdf 	bl	8002f6c <LL_RCC_IsActiveFlag_HPRE>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f1      	beq.n	8003798 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0320 	and.w	r3, r3, #32
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d016      	beq.n	80037ee <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff faf8 	bl	8002dba <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037ca:	f7fe fe8b 	bl	80024e4 <HAL_GetTick>
 80037ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037d2:	f7fe fe87 	bl	80024e4 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e0d4      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80037e4:	f7ff fbd3 	bl	8002f8e <LL_RCC_IsActiveFlag_C2HPRE>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f1      	beq.n	80037d2 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	4618      	mov	r0, r3
 8003800:	f7ff faf0 	bl	8002de4 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003804:	f7fe fe6e 	bl	80024e4 <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800380c:	f7fe fe6a 	bl	80024e4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e0b7      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800381e:	f7ff fbc8 	bl	8002fb2 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f1      	beq.n	800380c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d016      	beq.n	8003862 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fae9 	bl	8002e10 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800383e:	f7fe fe51 	bl	80024e4 <HAL_GetTick>
 8003842:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003844:	e008      	b.n	8003858 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003846:	f7fe fe4d 	bl	80024e4 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e09a      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003858:	f7ff fbbd 	bl	8002fd6 <LL_RCC_IsActiveFlag_PPRE1>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f1      	beq.n	8003846 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d017      	beq.n	800389e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fade 	bl	8002e36 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800387a:	f7fe fe33 	bl	80024e4 <HAL_GetTick>
 800387e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003880:	e008      	b.n	8003894 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003882:	f7fe fe2f 	bl	80024e4 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e07c      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003894:	f7ff fbb0 	bl	8002ff8 <LL_RCC_IsActiveFlag_PPRE2>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0f1      	beq.n	8003882 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d043      	beq.n	8003932 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d106      	bne.n	80038c0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80038b2:	f7ff f956 	bl	8002b62 <LL_RCC_HSE_IsReady>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d11e      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e066      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d106      	bne.n	80038d6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80038c8:	f7ff fb12 	bl	8002ef0 <LL_RCC_PLL_IsReady>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d113      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e05b      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d106      	bne.n	80038ec <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80038de:	f7ff f9f0 	bl	8002cc2 <LL_RCC_MSI_IsReady>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d108      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e050      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80038ec:	f7ff f966 	bl	8002bbc <LL_RCC_HSI_IsReady>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e049      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fa2a 	bl	8002d58 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003904:	f7fe fdee 	bl	80024e4 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fe fdea 	bl	80024e4 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e035      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	f7ff fa2c 	bl	8002d7e <LL_RCC_GetSysClkSource>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	429a      	cmp	r2, r3
 8003930:	d1ec      	bne.n	800390c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003932:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <HAL_RCC_ClockConfig+0x278>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d21b      	bcs.n	8003978 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003940:	4b15      	ldr	r3, [pc, #84]	@ (8003998 <HAL_RCC_ClockConfig+0x278>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f023 0207 	bic.w	r2, r3, #7
 8003948:	4913      	ldr	r1, [pc, #76]	@ (8003998 <HAL_RCC_ClockConfig+0x278>)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003950:	f7fe fdc8 	bl	80024e4 <HAL_GetTick>
 8003954:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003956:	e008      	b.n	800396a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003958:	f7fe fdc4 	bl	80024e4 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e011      	b.n	800398e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396a:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCC_ClockConfig+0x278>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0307 	and.w	r3, r3, #7
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	429a      	cmp	r2, r3
 8003976:	d1ef      	bne.n	8003958 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003978:	f000 f8b4 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 800397c:	4603      	mov	r3, r0
 800397e:	4a07      	ldr	r2, [pc, #28]	@ (800399c <HAL_RCC_ClockConfig+0x27c>)
 8003980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003982:	4b07      	ldr	r3, [pc, #28]	@ (80039a0 <HAL_RCC_ClockConfig+0x280>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fe fd60 	bl	800244c <HAL_InitTick>
 800398c:	4603      	mov	r3, r0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	58004000 	.word	0x58004000
 800399c:	20000000 	.word	0x20000000
 80039a0:	20000010 	.word	0x20000010

080039a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b2:	f7ff f9e4 	bl	8002d7e <LL_RCC_GetSysClkSource>
 80039b6:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b8:	f7ff facd 	bl	8002f56 <LL_RCC_PLL_GetMainSource>
 80039bc:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x2c>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d139      	bne.n	8003a3e <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d136      	bne.n	8003a3e <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80039d0:	f7ff f987 	bl	8002ce2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d115      	bne.n	8003a06 <HAL_RCC_GetSysClockFreq+0x62>
 80039da:	f7ff f982 	bl	8002ce2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d106      	bne.n	80039f2 <HAL_RCC_GetSysClockFreq+0x4e>
 80039e4:	f7ff f98d 	bl	8002d02 <LL_RCC_MSI_GetRange>
 80039e8:	4603      	mov	r3, r0
 80039ea:	0a1b      	lsrs	r3, r3, #8
 80039ec:	f003 030f 	and.w	r3, r3, #15
 80039f0:	e005      	b.n	80039fe <HAL_RCC_GetSysClockFreq+0x5a>
 80039f2:	f7ff f991 	bl	8002d18 <LL_RCC_MSI_GetRangeAfterStandby>
 80039f6:	4603      	mov	r3, r0
 80039f8:	0a1b      	lsrs	r3, r3, #8
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	4a36      	ldr	r2, [pc, #216]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a04:	e014      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x8c>
 8003a06:	f7ff f96c 	bl	8002ce2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d106      	bne.n	8003a1e <HAL_RCC_GetSysClockFreq+0x7a>
 8003a10:	f7ff f977 	bl	8002d02 <LL_RCC_MSI_GetRange>
 8003a14:	4603      	mov	r3, r0
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	f003 030f 	and.w	r3, r3, #15
 8003a1c:	e005      	b.n	8003a2a <HAL_RCC_GetSysClockFreq+0x86>
 8003a1e:	f7ff f97b 	bl	8002d18 <LL_RCC_MSI_GetRangeAfterStandby>
 8003a22:	4603      	mov	r3, r0
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x134>)
 8003a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a30:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d115      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a3c:	e012      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d102      	bne.n	8003a4a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a44:	4b25      	ldr	r3, [pc, #148]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x138>)
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	e00c      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d109      	bne.n	8003a64 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a50:	f7ff f85a 	bl	8002b08 <LL_RCC_HSE_IsEnabledDiv2>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d102      	bne.n	8003a60 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003a5a:	4b20      	ldr	r3, [pc, #128]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x138>)
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e001      	b.n	8003a64 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003a60:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a62:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a64:	f7ff f98b 	bl	8002d7e <LL_RCC_GetSysClkSource>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d12f      	bne.n	8003ace <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003a6e:	f7ff fa72 	bl	8002f56 <LL_RCC_PLL_GetMainSource>
 8003a72:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d003      	beq.n	8003a82 <HAL_RCC_GetSysClockFreq+0xde>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d003      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0xe4>
 8003a80:	e00d      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a82:	4b16      	ldr	r3, [pc, #88]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x138>)
 8003a84:	60fb      	str	r3, [r7, #12]
        break;
 8003a86:	e00d      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a88:	f7ff f83e 	bl	8002b08 <LL_RCC_HSE_IsEnabledDiv2>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d102      	bne.n	8003a98 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x138>)
 8003a94:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a96:	e005      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003a98:	4b11      	ldr	r3, [pc, #68]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a9a:	60fb      	str	r3, [r7, #12]
        break;
 8003a9c:	e002      	b.n	8003aa4 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	60fb      	str	r3, [r7, #12]
        break;
 8003aa2:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003aa4:	f7ff fa35 	bl	8002f12 <LL_RCC_PLL_GetN>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	fb03 f402 	mul.w	r4, r3, r2
 8003ab0:	f7ff fa46 	bl	8002f40 <LL_RCC_PLL_GetDivider>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	3301      	adds	r3, #1
 8003aba:	fbb4 f4f3 	udiv	r4, r4, r3
 8003abe:	f7ff fa34 	bl	8002f2a <LL_RCC_PLL_GetR>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	0f5b      	lsrs	r3, r3, #29
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	fbb4 f3f3 	udiv	r3, r4, r3
 8003acc:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003ace:	697b      	ldr	r3, [r7, #20]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd90      	pop	{r4, r7, pc}
 8003ad8:	080062f4 	.word	0x080062f4
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	01e84800 	.word	0x01e84800

08003ae4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ae4:	b598      	push	{r3, r4, r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003ae8:	f7ff ff5c 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8003aec:	4604      	mov	r4, r0
 8003aee:	f7ff f9b5 	bl	8002e5c <LL_RCC_GetAHBPrescaler>
 8003af2:	4603      	mov	r3, r0
 8003af4:	091b      	lsrs	r3, r3, #4
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	4a03      	ldr	r2, [pc, #12]	@ (8003b08 <HAL_RCC_GetHCLKFreq+0x24>)
 8003afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b00:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd98      	pop	{r3, r4, r7, pc}
 8003b08:	08006294 	.word	0x08006294

08003b0c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b0c:	b598      	push	{r3, r4, r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b10:	f7ff ffe8 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b14:	4604      	mov	r4, r0
 8003b16:	f7ff f9b9 	bl	8002e8c <LL_RCC_GetAPB1Prescaler>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	4a03      	ldr	r2, [pc, #12]	@ (8003b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b24:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	bd98      	pop	{r3, r4, r7, pc}
 8003b2c:	080062d4 	.word	0x080062d4

08003b30 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b30:	b598      	push	{r3, r4, r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003b34:	f7ff ffd6 	bl	8003ae4 <HAL_RCC_GetHCLKFreq>
 8003b38:	4604      	mov	r4, r0
 8003b3a:	f7ff f9b2 	bl	8002ea2 <LL_RCC_GetAPB2Prescaler>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	0adb      	lsrs	r3, r3, #11
 8003b42:	4a03      	ldr	r2, [pc, #12]	@ (8003b50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b48:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd98      	pop	{r3, r4, r7, pc}
 8003b50:	080062d4 	.word	0x080062d4

08003b54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b54:	b590      	push	{r4, r7, lr}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	4a10      	ldr	r2, [pc, #64]	@ (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b6a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003b6c:	f7ff f981 	bl	8002e72 <LL_RCC_GetAHB3Prescaler>
 8003b70:	4603      	mov	r3, r0
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	4a0c      	ldr	r2, [pc, #48]	@ (8003bac <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b84:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	4a09      	ldr	r2, [pc, #36]	@ (8003bb0 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8e:	0c9c      	lsrs	r4, r3, #18
 8003b90:	f7fe ff80 	bl	8002a94 <HAL_PWREx_GetVoltageRange>
 8003b94:	4603      	mov	r3, r0
 8003b96:	4619      	mov	r1, r3
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f000 f80b 	bl	8003bb4 <RCC_SetFlashLatency>
 8003b9e:	4603      	mov	r3, r0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd90      	pop	{r4, r7, pc}
 8003ba8:	080062f4 	.word	0x080062f4
 8003bac:	08006294 	.word	0x08006294
 8003bb0:	431bde83 	.word	0x431bde83

08003bb4 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b08e      	sub	sp, #56	@ 0x38
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003bbe:	4a3a      	ldr	r2, [pc, #232]	@ (8003ca8 <RCC_SetFlashLatency+0xf4>)
 8003bc0:	f107 0320 	add.w	r3, r7, #32
 8003bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bc8:	6018      	str	r0, [r3, #0]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003bce:	4a37      	ldr	r2, [pc, #220]	@ (8003cac <RCC_SetFlashLatency+0xf8>)
 8003bd0:	f107 0318 	add.w	r3, r7, #24
 8003bd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bd8:	6018      	str	r0, [r3, #0]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003bde:	4a34      	ldr	r2, [pc, #208]	@ (8003cb0 <RCC_SetFlashLatency+0xfc>)
 8003be0:	f107 030c 	add.w	r3, r7, #12
 8003be4:	ca07      	ldmia	r2, {r0, r1, r2}
 8003be6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003bea:	2300      	movs	r3, #0
 8003bec:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bf4:	d11b      	bne.n	8003c2e <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bfa:	e014      	b.n	8003c26 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	3338      	adds	r3, #56	@ 0x38
 8003c02:	443b      	add	r3, r7
 8003c04:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d807      	bhi.n	8003c20 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	3338      	adds	r3, #56	@ 0x38
 8003c16:	443b      	add	r3, r7
 8003c18:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c1e:	e021      	b.n	8003c64 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	3301      	adds	r3, #1
 8003c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d9e7      	bls.n	8003bfc <RCC_SetFlashLatency+0x48>
 8003c2c:	e01a      	b.n	8003c64 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c2e:	2300      	movs	r3, #0
 8003c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c32:	e014      	b.n	8003c5e <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	3338      	adds	r3, #56	@ 0x38
 8003c3a:	443b      	add	r3, r7
 8003c3c:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003c40:	461a      	mov	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d807      	bhi.n	8003c58 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	3338      	adds	r3, #56	@ 0x38
 8003c4e:	443b      	add	r3, r7
 8003c50:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8003c56:	e005      	b.n	8003c64 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d9e7      	bls.n	8003c34 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c64:	4b13      	ldr	r3, [pc, #76]	@ (8003cb4 <RCC_SetFlashLatency+0x100>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 0207 	bic.w	r2, r3, #7
 8003c6c:	4911      	ldr	r1, [pc, #68]	@ (8003cb4 <RCC_SetFlashLatency+0x100>)
 8003c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c74:	f7fe fc36 	bl	80024e4 <HAL_GetTick>
 8003c78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c7a:	e008      	b.n	8003c8e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c7c:	f7fe fc32 	bl	80024e4 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e007      	b.n	8003c9e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c8e:	4b09      	ldr	r3, [pc, #36]	@ (8003cb4 <RCC_SetFlashLatency+0x100>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d1ef      	bne.n	8003c7c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3738      	adds	r7, #56	@ 0x38
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	08006278 	.word	0x08006278
 8003cac:	08006280 	.word	0x08006280
 8003cb0:	08006288 	.word	0x08006288
 8003cb4:	58004000 	.word	0x58004000

08003cb8 <LL_RCC_LSE_IsReady>:
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d101      	bne.n	8003cd0 <LL_RCC_LSE_IsReady+0x18>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <LL_RCC_LSE_IsReady+0x1a>
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <LL_RCC_SetUSARTClockSource>:
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ce6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	0c1b      	lsrs	r3, r3, #16
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <LL_RCC_SetI2SClockSource>:
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d1a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr

08003d34 <LL_RCC_SetLPUARTClockSource>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d44:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003d48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr

08003d5e <LL_RCC_SetI2CClockSource>:
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d76:	43db      	mvns	r3, r3
 8003d78:	401a      	ands	r2, r3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003d82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bc80      	pop	{r7}
 8003d94:	4770      	bx	lr

08003d96 <LL_RCC_SetLPTIMClockSource>:
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003da2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0c1b      	lsrs	r3, r3, #16
 8003daa:	041b      	lsls	r3, r3, #16
 8003dac:	43db      	mvns	r3, r3
 8003dae:	401a      	ands	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	041b      	lsls	r3, r3, #16
 8003db4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr

08003dc8 <LL_RCC_SetRNGClockSource>:
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003ddc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bc80      	pop	{r7}
 8003df0:	4770      	bx	lr

08003df2 <LL_RCC_SetADCClockSource>:
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003e06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bc80      	pop	{r7}
 8003e1a:	4770      	bx	lr

08003e1c <LL_RCC_SetRTCClockSource>:
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003e24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <LL_RCC_GetRTCClockSource>:
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bc80      	pop	{r7}
 8003e5c:	4770      	bx	lr

08003e5e <LL_RCC_ForceBackupDomainReset>:
{
 8003e5e:	b480      	push	{r7}
 8003e60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e92:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bc80      	pop	{r7}
 8003e9c:	4770      	bx	lr
	...

08003ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003eac:	2300      	movs	r3, #0
 8003eae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d058      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003ec0:	f7fe fdda 	bl	8002a78 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ec4:	f7fe fb0e 	bl	80024e4 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003eca:	e009      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ecc:	f7fe fb0a 	bl	80024e4 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d902      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	74fb      	strb	r3, [r7, #19]
        break;
 8003ede:	e006      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ee0:	4b7b      	ldr	r3, [pc, #492]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003eec:	d1ee      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003eee:	7cfb      	ldrb	r3, [r7, #19]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d13c      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003ef4:	f7ff ffa7 	bl	8003e46 <LL_RCC_GetRTCClockSource>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d00f      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f0e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f10:	f7ff ffa5 	bl	8003e5e <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f14:	f7ff ffb3 	bl	8003e7e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d014      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fada 	bl	80024e4 <HAL_GetTick>
 8003f30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f32:	e00b      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f34:	f7fe fad6 	bl	80024e4 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d902      	bls.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	74fb      	strb	r3, [r7, #19]
            break;
 8003f4a:	e004      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f4c:	f7ff feb4 	bl	8003cb8 <LL_RCC_LSE_IsReady>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d1ee      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003f56:	7cfb      	ldrb	r3, [r7, #19]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff ff5b 	bl	8003e1c <LL_RCC_SetRTCClockSource>
 8003f66:	e004      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f68:	7cfb      	ldrb	r3, [r7, #19]
 8003f6a:	74bb      	strb	r3, [r7, #18]
 8003f6c:	e001      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	7cfb      	ldrb	r3, [r7, #19]
 8003f70:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d004      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff fea9 	bl	8003cda <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fe9e 	bl	8003cda <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0320 	and.w	r3, r3, #32
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d004      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fec0 	bl	8003d34 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7ff fee6 	bl	8003d96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d004      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fedb 	bl	8003d96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7ff fed0 	bl	8003d96 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d004      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fea9 	bl	8003d5e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004014:	2b00      	cmp	r3, #0
 8004016:	d004      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fe9e 	bl	8003d5e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800402a:	2b00      	cmp	r3, #0
 800402c:	d004      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fe93 	bl	8003d5e <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0310 	and.w	r3, r3, #16
 8004040:	2b00      	cmp	r3, #0
 8004042:	d011      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fe5e 	bl	8003d0a <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004056:	d107      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004066:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004070:	2b00      	cmp	r3, #0
 8004072:	d010      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff fea5 	bl	8003dc8 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004082:	2b00      	cmp	r3, #0
 8004084:	d107      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004090:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004094:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d011      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff fea3 	bl	8003df2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040b4:	d107      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040c4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80040c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	58000400 	.word	0x58000400

080040d4 <LL_PWR_SetRadioBusyTrigger>:
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_NONE
  *         @arg @ref LL_PWR_RADIO_BUSY_TRIGGER_WU_IT
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRadioBusyTrigger(uint32_t RadioBusyTrigger)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80040dc:	4b06      	ldr	r3, [pc, #24]	@ (80040f8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040e4:	4904      	ldr	r1, [pc, #16]	@ (80040f8 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	608b      	str	r3, [r1, #8]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	58000400 	.word	0x58000400

080040fc <LL_PWR_UnselectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level high.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_UnselectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_UnselectSUBGHZSPI_NSS(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004100:	4b05      	ldr	r3, [pc, #20]	@ (8004118 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004106:	4a04      	ldr	r2, [pc, #16]	@ (8004118 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8004108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800410c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	58000400 	.word	0x58000400

0800411c <LL_PWR_SelectSUBGHZSPI_NSS>:
  * @brief  Set sub-GHz radio SPI NSS at logical level low.
  * @rmtoll SUBGHZSPICR  NSS           LL_PWR_SelectSUBGHZSPI_NSS
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SelectSUBGHZSPI_NSS(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004120:	4b05      	ldr	r3, [pc, #20]	@ (8004138 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004126:	4a04      	ldr	r2, [pc, #16]	@ (8004138 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8004128:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800412c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr
 8004138:	58000400 	.word	0x58000400

0800413c <LL_PWR_ClearFlag_RFBUSY>:
  * @brief  Clear radio busy flag
  * @rmtoll SCR          CRFBUSYF      LL_PWR_ClearFlag_RFBUSY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_RFBUSY(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004140:	4b03      	ldr	r3, [pc, #12]	@ (8004150 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004142:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004146:	619a      	str	r2, [r3, #24]
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	58000400 	.word	0x58000400

08004154 <LL_PWR_IsActiveFlag_RFBUSYS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYS       LL_PWR_IsActiveFlag_RFBUSYS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYS(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8004158:	4b06      	ldr	r3, [pc, #24]	@ (8004174 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b02      	cmp	r3, #2
 8004162:	d101      	bne.n	8004168 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	58000400 	.word	0x58000400

08004178 <LL_PWR_IsActiveFlag_RFBUSYMS>:
  *         @ref LL_PWR_IsActiveFlag_RFBUSY()
  * @rmtoll SR2          RFBUSYMS      LL_PWR_IsActiveFlag_RFBUSYMS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_RFBUSYMS(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800417c:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	f003 0304 	and.w	r3, r3, #4
 8004184:	2b04      	cmp	r3, #4
 8004186:	d101      	bne.n	800418c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	46bd      	mov	sp, r7
 8004192:	bc80      	pop	{r7}
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	58000400 	.word	0x58000400

0800419c <LL_RCC_RF_DisableReset>:
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80041a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80041b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80041b4:	bf00      	nop
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bc80      	pop	{r7}
 80041ba:	4770      	bx	lr

080041bc <LL_RCC_IsRFUnderReset>:
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80041c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041d0:	d101      	bne.n	80041d6 <LL_RCC_IsRFUnderReset+0x1a>
 80041d2:	2301      	movs	r3, #1
 80041d4:	e000      	b.n	80041d8 <LL_RCC_IsRFUnderReset+0x1c>
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80041e8:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <LL_EXTI_EnableIT_32_63+0x24>)
 80041ea:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80041ee:	4905      	ldr	r1, [pc, #20]	@ (8004204 <LL_EXTI_EnableIT_32_63+0x24>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80041f8:	bf00      	nop
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bc80      	pop	{r7}
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	58000800 	.word	0x58000800

08004208 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
    return status;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
 800421c:	e052      	b.n	80042c4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	799b      	ldrb	r3, [r3, #6]
 8004226:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8004228:	7bbb      	ldrb	r3, [r7, #14]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d002      	beq.n	8004234 <HAL_SUBGHZ_Init+0x2c>
 800422e:	7bbb      	ldrb	r3, [r7, #14]
 8004230:	2b03      	cmp	r3, #3
 8004232:	d109      	bne.n	8004248 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7fc fe84 	bl	8000f48 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004240:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004244:	f7ff ffcc 	bl	80041e0 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8004248:	7bbb      	ldrb	r3, [r7, #14]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d126      	bne.n	800429c <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8004254:	f7ff ffa2 	bl	800419c <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004258:	4b1c      	ldr	r3, [pc, #112]	@ (80042cc <HAL_SUBGHZ_Init+0xc4>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	0cdb      	lsrs	r3, r3, #19
 8004266:	2264      	movs	r2, #100	@ 0x64
 8004268:	fb02 f303 	mul.w	r3, r2, r3
 800426c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d105      	bne.n	8004280 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	609a      	str	r2, [r3, #8]
        break;
 800427e:	e007      	b.n	8004290 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	3b01      	subs	r3, #1
 8004284:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004286:	f7ff ff99 	bl	80041bc <LL_RCC_IsRFUnderReset>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1ee      	bne.n	800426e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004290:	f7ff ff34 	bl	80040fc <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8004294:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004298:	f7ff ff1c 	bl	80040d4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800429c:	f7ff ff4e 	bl	800413c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 faac 	bl	8004808 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	719a      	strb	r2, [r3, #6]

  return status;
 80042c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	20000000 	.word	0x20000000

080042d0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	607a      	str	r2, [r7, #4]
 80042da:	461a      	mov	r2, r3
 80042dc:	460b      	mov	r3, r1
 80042de:	817b      	strh	r3, [r7, #10]
 80042e0:	4613      	mov	r3, r2
 80042e2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	799b      	ldrb	r3, [r3, #6]
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d14a      	bne.n	8004384 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	795b      	ldrb	r3, [r3, #5]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d101      	bne.n	80042fa <HAL_SUBGHZ_WriteRegisters+0x2a>
 80042f6:	2302      	movs	r3, #2
 80042f8:	e045      	b.n	8004386 <HAL_SUBGHZ_WriteRegisters+0xb6>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2201      	movs	r2, #1
 80042fe:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2202      	movs	r2, #2
 8004304:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fb4c 	bl	80049a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800430c:	f7ff ff06 	bl	800411c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8004310:	210d      	movs	r1, #13
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 fa98 	bl	8004848 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004318:	897b      	ldrh	r3, [r7, #10]
 800431a:	0a1b      	lsrs	r3, r3, #8
 800431c:	b29b      	uxth	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	4619      	mov	r1, r3
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fa90 	bl	8004848 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8004328:	897b      	ldrh	r3, [r7, #10]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	4619      	mov	r1, r3
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fa8a 	bl	8004848 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004334:	2300      	movs	r3, #0
 8004336:	82bb      	strh	r3, [r7, #20]
 8004338:	e00a      	b.n	8004350 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800433a:	8abb      	ldrh	r3, [r7, #20]
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	4619      	mov	r1, r3
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 fa7f 	bl	8004848 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800434a:	8abb      	ldrh	r3, [r7, #20]
 800434c:	3301      	adds	r3, #1
 800434e:	82bb      	strh	r3, [r7, #20]
 8004350:	8aba      	ldrh	r2, [r7, #20]
 8004352:	893b      	ldrh	r3, [r7, #8]
 8004354:	429a      	cmp	r2, r3
 8004356:	d3f0      	bcc.n	800433a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004358:	f7ff fed0 	bl	80040fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f000 fb45 	bl	80049ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
 800436e:	e001      	b.n	8004374 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	715a      	strb	r2, [r3, #5]

    return status;
 8004380:	7dfb      	ldrb	r3, [r7, #23]
 8004382:	e000      	b.n	8004386 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004384:	2302      	movs	r3, #2
  }
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b088      	sub	sp, #32
 8004392:	af00      	add	r7, sp, #0
 8004394:	60f8      	str	r0, [r7, #12]
 8004396:	607a      	str	r2, [r7, #4]
 8004398:	461a      	mov	r2, r3
 800439a:	460b      	mov	r3, r1
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	4613      	mov	r3, r2
 80043a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	799b      	ldrb	r3, [r3, #6]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d14a      	bne.n	8004446 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	795b      	ldrb	r3, [r3, #5]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_SUBGHZ_ReadRegisters+0x2e>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e045      	b.n	8004448 <HAL_SUBGHZ_ReadRegisters+0xba>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 faee 	bl	80049a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80043c8:	f7ff fea8 	bl	800411c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80043cc:	211d      	movs	r1, #29
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 fa3a 	bl	8004848 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80043d4:	897b      	ldrh	r3, [r7, #10]
 80043d6:	0a1b      	lsrs	r3, r3, #8
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	4619      	mov	r1, r3
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fa32 	bl	8004848 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80043e4:	897b      	ldrh	r3, [r7, #10]
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	4619      	mov	r1, r3
 80043ea:	68f8      	ldr	r0, [r7, #12]
 80043ec:	f000 fa2c 	bl	8004848 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80043f0:	2100      	movs	r1, #0
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fa28 	bl	8004848 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80043f8:	2300      	movs	r3, #0
 80043fa:	82fb      	strh	r3, [r7, #22]
 80043fc:	e009      	b.n	8004412 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80043fe:	69b9      	ldr	r1, [r7, #24]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fa77 	bl	80048f4 <SUBGHZSPI_Receive>
      pData++;
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	3301      	adds	r3, #1
 800440a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800440c:	8afb      	ldrh	r3, [r7, #22]
 800440e:	3301      	adds	r3, #1
 8004410:	82fb      	strh	r3, [r7, #22]
 8004412:	8afa      	ldrh	r2, [r7, #22]
 8004414:	893b      	ldrh	r3, [r7, #8]
 8004416:	429a      	cmp	r2, r3
 8004418:	d3f1      	bcc.n	80043fe <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800441a:	f7ff fe6f 	bl	80040fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fae4 	bl	80049ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	77fb      	strb	r3, [r7, #31]
 8004430:	e001      	b.n	8004436 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	715a      	strb	r2, [r3, #5]

    return status;
 8004442:	7ffb      	ldrb	r3, [r7, #31]
 8004444:	e000      	b.n	8004448 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8004446:	2302      	movs	r3, #2
  }
}
 8004448:	4618      	mov	r0, r3
 800444a:	3720      	adds	r7, #32
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	461a      	mov	r2, r3
 800445c:	460b      	mov	r3, r1
 800445e:	72fb      	strb	r3, [r7, #11]
 8004460:	4613      	mov	r3, r2
 8004462:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	799b      	ldrb	r3, [r3, #6]
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	d14a      	bne.n	8004504 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	795b      	ldrb	r3, [r3, #5]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8004476:	2302      	movs	r3, #2
 8004478:	e045      	b.n	8004506 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2201      	movs	r2, #1
 800447e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fa8f 	bl	80049a4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	2b84      	cmp	r3, #132	@ 0x84
 800448a:	d002      	beq.n	8004492 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800448c:	7afb      	ldrb	r3, [r7, #11]
 800448e:	2b94      	cmp	r3, #148	@ 0x94
 8004490:	d103      	bne.n	800449a <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	711a      	strb	r2, [r3, #4]
 8004498:	e002      	b.n	80044a0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80044a0:	f7ff fe3c 	bl	800411c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	4619      	mov	r1, r3
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f9cd 	bl	8004848 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80044ae:	2300      	movs	r3, #0
 80044b0:	82bb      	strh	r3, [r7, #20]
 80044b2:	e00a      	b.n	80044ca <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80044b4:	8abb      	ldrh	r3, [r7, #20]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	4413      	add	r3, r2
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	4619      	mov	r1, r3
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f9c2 	bl	8004848 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80044c4:	8abb      	ldrh	r3, [r7, #20]
 80044c6:	3301      	adds	r3, #1
 80044c8:	82bb      	strh	r3, [r7, #20]
 80044ca:	8aba      	ldrh	r2, [r7, #20]
 80044cc:	893b      	ldrh	r3, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d3f0      	bcc.n	80044b4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80044d2:	f7ff fe13 	bl	80040fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80044d6:	7afb      	ldrb	r3, [r7, #11]
 80044d8:	2b84      	cmp	r3, #132	@ 0x84
 80044da:	d002      	beq.n	80044e2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 fa85 	bl	80049ec <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75fb      	strb	r3, [r7, #23]
 80044ee:	e001      	b.n	80044f4 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80044f0:	2300      	movs	r3, #0
 80044f2:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2201      	movs	r2, #1
 80044f8:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	715a      	strb	r2, [r3, #5]

    return status;
 8004500:	7dfb      	ldrb	r3, [r7, #23]
 8004502:	e000      	b.n	8004506 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8004504:	2302      	movs	r3, #2
  }
}
 8004506:	4618      	mov	r0, r3
 8004508:	3718      	adds	r7, #24
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b088      	sub	sp, #32
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	461a      	mov	r2, r3
 800451a:	460b      	mov	r3, r1
 800451c:	72fb      	strb	r3, [r7, #11]
 800451e:	4613      	mov	r3, r2
 8004520:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	799b      	ldrb	r3, [r3, #6]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	2b01      	cmp	r3, #1
 800452e:	d13d      	bne.n	80045ac <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	795b      	ldrb	r3, [r3, #5]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8004538:	2302      	movs	r3, #2
 800453a:	e038      	b.n	80045ae <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2201      	movs	r2, #1
 8004540:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fa2e 	bl	80049a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004548:	f7ff fde8 	bl	800411c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800454c:	7afb      	ldrb	r3, [r7, #11]
 800454e:	4619      	mov	r1, r3
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 f979 	bl	8004848 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004556:	2100      	movs	r1, #0
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f975 	bl	8004848 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800455e:	2300      	movs	r3, #0
 8004560:	82fb      	strh	r3, [r7, #22]
 8004562:	e009      	b.n	8004578 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004564:	69b9      	ldr	r1, [r7, #24]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f9c4 	bl	80048f4 <SUBGHZSPI_Receive>
      pData++;
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	3301      	adds	r3, #1
 8004570:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004572:	8afb      	ldrh	r3, [r7, #22]
 8004574:	3301      	adds	r3, #1
 8004576:	82fb      	strh	r3, [r7, #22]
 8004578:	8afa      	ldrh	r2, [r7, #22]
 800457a:	893b      	ldrh	r3, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	d3f1      	bcc.n	8004564 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004580:	f7ff fdbc 	bl	80040fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fa31 	bl	80049ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	77fb      	strb	r3, [r7, #31]
 8004596:	e001      	b.n	800459c <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004598:	2300      	movs	r3, #0
 800459a:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2201      	movs	r2, #1
 80045a0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2200      	movs	r2, #0
 80045a6:	715a      	strb	r2, [r3, #5]

    return status;
 80045a8:	7ffb      	ldrb	r3, [r7, #31]
 80045aa:	e000      	b.n	80045ae <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b086      	sub	sp, #24
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	60f8      	str	r0, [r7, #12]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	461a      	mov	r2, r3
 80045c2:	460b      	mov	r3, r1
 80045c4:	72fb      	strb	r3, [r7, #11]
 80045c6:	4613      	mov	r3, r2
 80045c8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	799b      	ldrb	r3, [r3, #6]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d13e      	bne.n	8004652 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	795b      	ldrb	r3, [r3, #5]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80045dc:	2302      	movs	r3, #2
 80045de:	e039      	b.n	8004654 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f000 f9dc 	bl	80049a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80045ec:	f7ff fd96 	bl	800411c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80045f0:	210e      	movs	r1, #14
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f928 	bl	8004848 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80045f8:	7afb      	ldrb	r3, [r7, #11]
 80045fa:	4619      	mov	r1, r3
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 f923 	bl	8004848 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004602:	2300      	movs	r3, #0
 8004604:	82bb      	strh	r3, [r7, #20]
 8004606:	e00a      	b.n	800461e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8004608:	8abb      	ldrh	r3, [r7, #20]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	4413      	add	r3, r2
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	4619      	mov	r1, r3
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 f918 	bl	8004848 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004618:	8abb      	ldrh	r3, [r7, #20]
 800461a:	3301      	adds	r3, #1
 800461c:	82bb      	strh	r3, [r7, #20]
 800461e:	8aba      	ldrh	r2, [r7, #20]
 8004620:	893b      	ldrh	r3, [r7, #8]
 8004622:	429a      	cmp	r2, r3
 8004624:	d3f0      	bcc.n	8004608 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004626:	f7ff fd69 	bl	80040fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f9de 	bl	80049ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d002      	beq.n	800463e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	75fb      	strb	r3, [r7, #23]
 800463c:	e001      	b.n	8004642 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	715a      	strb	r2, [r3, #5]

    return status;
 800464e:	7dfb      	ldrb	r3, [r7, #23]
 8004650:	e000      	b.n	8004654 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004652:	2302      	movs	r3, #2
  }
}
 8004654:	4618      	mov	r0, r3
 8004656:	3718      	adds	r7, #24
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	607a      	str	r2, [r7, #4]
 8004666:	461a      	mov	r2, r3
 8004668:	460b      	mov	r3, r1
 800466a:	72fb      	strb	r3, [r7, #11]
 800466c:	4613      	mov	r3, r2
 800466e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	799b      	ldrb	r3, [r3, #6]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	d141      	bne.n	8004702 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	795b      	ldrb	r3, [r3, #5]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8004686:	2302      	movs	r3, #2
 8004688:	e03c      	b.n	8004704 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2201      	movs	r2, #1
 800468e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f987 	bl	80049a4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004696:	f7ff fd41 	bl	800411c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800469a:	211e      	movs	r1, #30
 800469c:	68f8      	ldr	r0, [r7, #12]
 800469e:	f000 f8d3 	bl	8004848 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80046a2:	7afb      	ldrb	r3, [r7, #11]
 80046a4:	4619      	mov	r1, r3
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f8ce 	bl	8004848 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80046ac:	2100      	movs	r1, #0
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f8ca 	bl	8004848 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80046b4:	2300      	movs	r3, #0
 80046b6:	82fb      	strh	r3, [r7, #22]
 80046b8:	e009      	b.n	80046ce <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80046ba:	69b9      	ldr	r1, [r7, #24]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f919 	bl	80048f4 <SUBGHZSPI_Receive>
      pData++;
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	3301      	adds	r3, #1
 80046c6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80046c8:	8afb      	ldrh	r3, [r7, #22]
 80046ca:	3301      	adds	r3, #1
 80046cc:	82fb      	strh	r3, [r7, #22]
 80046ce:	8afa      	ldrh	r2, [r7, #22]
 80046d0:	893b      	ldrh	r3, [r7, #8]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d3f1      	bcc.n	80046ba <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80046d6:	f7ff fd11 	bl	80040fc <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f986 	bl	80049ec <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e001      	b.n	80046f2 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	715a      	strb	r2, [r3, #5]

    return status;
 80046fe:	7ffb      	ldrb	r3, [r7, #31]
 8004700:	e000      	b.n	8004704 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8004702:	2302      	movs	r3, #2
  }
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8004714:	2300      	movs	r3, #0
 8004716:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8004718:	f107 020c 	add.w	r2, r7, #12
 800471c:	2302      	movs	r3, #2
 800471e:	2112      	movs	r1, #18
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff fef4 	bl	800450e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8004726:	7b3b      	ldrb	r3, [r7, #12]
 8004728:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800472a:	89fb      	ldrh	r3, [r7, #14]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	b21a      	sxth	r2, r3
 8004730:	7b7b      	ldrb	r3, [r7, #13]
 8004732:	b21b      	sxth	r3, r3
 8004734:	4313      	orrs	r3, r2
 8004736:	b21b      	sxth	r3, r3
 8004738:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800473a:	f107 020c 	add.w	r2, r7, #12
 800473e:	2302      	movs	r3, #2
 8004740:	2102      	movs	r1, #2
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fe84 	bl	8004450 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8004748:	89fb      	ldrh	r3, [r7, #14]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd fd98 	bl	8002288 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004758:	89fb      	ldrh	r3, [r7, #14]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fd fd9e 	bl	80022a4 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004768:	89fb      	ldrh	r3, [r7, #14]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fd fdee 	bl	8002354 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004778:	89fb      	ldrh	r3, [r7, #14]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd fdf4 	bl	8002370 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004788:	89fb      	ldrh	r3, [r7, #14]
 800478a:	f003 0310 	and.w	r3, r3, #16
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fd fdfa 	bl	800238c <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8004798:	89fb      	ldrh	r3, [r7, #14]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fd fdc8 	bl	8002338 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80047a8:	89fb      	ldrh	r3, [r7, #14]
 80047aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fd fd84 	bl	80022c0 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80047b8:	89fb      	ldrh	r3, [r7, #14]
 80047ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00d      	beq.n	80047de <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80047c2:	89fb      	ldrh	r3, [r7, #14]
 80047c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80047cc:	2101      	movs	r1, #1
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fd fd84 	bl	80022dc <HAL_SUBGHZ_CADStatusCallback>
 80047d4:	e003      	b.n	80047de <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80047d6:	2100      	movs	r1, #0
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7fd fd7f 	bl	80022dc <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80047de:	89fb      	ldrh	r3, [r7, #14]
 80047e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7fd fd95 	bl	8002318 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80047ee:	89fb      	ldrh	r3, [r7, #14]
 80047f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7fd fdd5 	bl	80023a8 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8004810:	4b0c      	ldr	r3, [pc, #48]	@ (8004844 <SUBGHZSPI_Init+0x3c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a0b      	ldr	r2, [pc, #44]	@ (8004844 <SUBGHZSPI_Init+0x3c>)
 8004816:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800481a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800481c:	4a09      	ldr	r2, [pc, #36]	@ (8004844 <SUBGHZSPI_Init+0x3c>)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8004824:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8004826:	4b07      	ldr	r3, [pc, #28]	@ (8004844 <SUBGHZSPI_Init+0x3c>)
 8004828:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 800482c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800482e:	4b05      	ldr	r3, [pc, #20]	@ (8004844 <SUBGHZSPI_Init+0x3c>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a04      	ldr	r2, [pc, #16]	@ (8004844 <SUBGHZSPI_Init+0x3c>)
 8004834:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004838:	6013      	str	r3, [r2, #0]
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	58010000 	.word	0x58010000

08004848 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004858:	4b23      	ldr	r3, [pc, #140]	@ (80048e8 <SUBGHZSPI_Transmit+0xa0>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	0cdb      	lsrs	r3, r3, #19
 8004866:	2264      	movs	r2, #100	@ 0x64
 8004868:	fb02 f303 	mul.w	r3, r2, r3
 800486c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d105      	bne.n	8004880 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	609a      	str	r2, [r3, #8]
      break;
 800487e:	e008      	b.n	8004892 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3b01      	subs	r3, #1
 8004884:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004886:	4b19      	ldr	r3, [pc, #100]	@ (80048ec <SUBGHZSPI_Transmit+0xa4>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b02      	cmp	r3, #2
 8004890:	d1ed      	bne.n	800486e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004892:	4b17      	ldr	r3, [pc, #92]	@ (80048f0 <SUBGHZSPI_Transmit+0xa8>)
 8004894:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800489c:	4b12      	ldr	r3, [pc, #72]	@ (80048e8 <SUBGHZSPI_Transmit+0xa0>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	4613      	mov	r3, r2
 80048a2:	00db      	lsls	r3, r3, #3
 80048a4:	1a9b      	subs	r3, r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	0cdb      	lsrs	r3, r3, #19
 80048aa:	2264      	movs	r2, #100	@ 0x64
 80048ac:	fb02 f303 	mul.w	r3, r2, r3
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d105      	bne.n	80048c4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	609a      	str	r2, [r3, #8]
      break;
 80048c2:	e008      	b.n	80048d6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80048ca:	4b08      	ldr	r3, [pc, #32]	@ (80048ec <SUBGHZSPI_Transmit+0xa4>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d1ed      	bne.n	80048b2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80048d6:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <SUBGHZSPI_Transmit+0xa4>)
 80048d8:	68db      	ldr	r3, [r3, #12]

  return status;
 80048da:	7dfb      	ldrb	r3, [r7, #23]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	371c      	adds	r7, #28
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bc80      	pop	{r7}
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000000 	.word	0x20000000
 80048ec:	58010000 	.word	0x58010000
 80048f0:	5801000c 	.word	0x5801000c

080048f4 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004902:	4b25      	ldr	r3, [pc, #148]	@ (8004998 <SUBGHZSPI_Receive+0xa4>)
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4613      	mov	r3, r2
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	1a9b      	subs	r3, r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	0cdb      	lsrs	r3, r3, #19
 8004910:	2264      	movs	r2, #100	@ 0x64
 8004912:	fb02 f303 	mul.w	r3, r2, r3
 8004916:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d105      	bne.n	800492a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	609a      	str	r2, [r3, #8]
      break;
 8004928:	e008      	b.n	800493c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3b01      	subs	r3, #1
 800492e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004930:	4b1a      	ldr	r3, [pc, #104]	@ (800499c <SUBGHZSPI_Receive+0xa8>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d1ed      	bne.n	8004918 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800493c:	4b18      	ldr	r3, [pc, #96]	@ (80049a0 <SUBGHZSPI_Receive+0xac>)
 800493e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	22ff      	movs	r2, #255	@ 0xff
 8004944:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004946:	4b14      	ldr	r3, [pc, #80]	@ (8004998 <SUBGHZSPI_Receive+0xa4>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	0cdb      	lsrs	r3, r3, #19
 8004954:	2264      	movs	r2, #100	@ 0x64
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	609a      	str	r2, [r3, #8]
      break;
 800496c:	e008      	b.n	8004980 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	3b01      	subs	r3, #1
 8004972:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004974:	4b09      	ldr	r3, [pc, #36]	@ (800499c <SUBGHZSPI_Receive+0xa8>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	2b01      	cmp	r3, #1
 800497e:	d1ed      	bne.n	800495c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004980:	4b06      	ldr	r3, [pc, #24]	@ (800499c <SUBGHZSPI_Receive+0xa8>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	701a      	strb	r2, [r3, #0]

  return status;
 800498a:	7dfb      	ldrb	r3, [r7, #23]
}
 800498c:	4618      	mov	r0, r3
 800498e:	371c      	adds	r7, #28
 8004990:	46bd      	mov	sp, r7
 8004992:	bc80      	pop	{r7}
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000000 	.word	0x20000000
 800499c:	58010000 	.word	0x58010000
 80049a0:	5801000c 	.word	0x5801000c

080049a4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	791b      	ldrb	r3, [r3, #4]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d111      	bne.n	80049d8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80049b4:	4b0c      	ldr	r3, [pc, #48]	@ (80049e8 <SUBGHZ_CheckDeviceReady+0x44>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4613      	mov	r3, r2
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	4413      	add	r3, r2
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	0c1b      	lsrs	r3, r3, #16
 80049c2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80049c4:	f7ff fbaa 	bl	800411c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f9      	bne.n	80049c8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80049d4:	f7ff fb92 	bl	80040fc <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f807 	bl	80049ec <SUBGHZ_WaitOnBusy>
 80049de:	4603      	mov	r3, r0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3710      	adds	r7, #16
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20000000 	.word	0x20000000

080049ec <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80049f8:	4b12      	ldr	r3, [pc, #72]	@ (8004a44 <SUBGHZ_WaitOnBusy+0x58>)
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	4613      	mov	r3, r2
 80049fe:	005b      	lsls	r3, r3, #1
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	0d1b      	lsrs	r3, r3, #20
 8004a06:	2264      	movs	r2, #100	@ 0x64
 8004a08:	fb02 f303 	mul.w	r3, r2, r3
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004a0e:	f7ff fbb3 	bl	8004178 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004a12:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d105      	bne.n	8004a26 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2202      	movs	r2, #2
 8004a22:	609a      	str	r2, [r3, #8]
      break;
 8004a24:	e009      	b.n	8004a3a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004a2c:	f7ff fb92 	bl	8004154 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004a30:	4602      	mov	r2, r0
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d0e9      	beq.n	8004a0e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004a3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3718      	adds	r7, #24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	20000000 	.word	0x20000000

08004a48 <LL_RCC_GetUSARTClockSource>:
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a54:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	401a      	ands	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	041b      	lsls	r3, r3, #16
 8004a60:	4313      	orrs	r3, r2
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <LL_RCC_GetLPUARTClockSource>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a78:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4013      	ands	r3, r2
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bc80      	pop	{r7}
 8004a88:	4770      	bx	lr

08004a8a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b082      	sub	sp, #8
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e042      	b.n	8004b22 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fc fb16 	bl	80010e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2224      	movs	r2, #36	@ 0x24
 8004ab8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f8b3 	bl	8004c38 <UART_SetConfig>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e022      	b.n	8004b22 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d002      	beq.n	8004aea <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 fb1b 	bl	8005120 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004af8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b08:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f042 0201 	orr.w	r2, r2, #1
 8004b18:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fba1 	bl	8005262 <UART_CheckIdleState>
 8004b20:	4603      	mov	r3, r0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3708      	adds	r7, #8
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b08a      	sub	sp, #40	@ 0x28
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d173      	bne.n	8004c2c <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Transmit+0x26>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e06c      	b.n	8004c2e <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2221      	movs	r2, #33	@ 0x21
 8004b60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b64:	f7fd fcbe 	bl	80024e4 <HAL_GetTick>
 8004b68:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	88fa      	ldrh	r2, [r7, #6]
 8004b6e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	88fa      	ldrh	r2, [r7, #6]
 8004b76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b82:	d108      	bne.n	8004b96 <HAL_UART_Transmit+0x6c>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d104      	bne.n	8004b96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	e003      	b.n	8004b9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b9e:	e02c      	b.n	8004bfa <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	9300      	str	r3, [sp, #0]
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2180      	movs	r1, #128	@ 0x80
 8004baa:	68f8      	ldr	r0, [r7, #12]
 8004bac:	f000 fba7 	bl	80052fe <UART_WaitOnFlagUntilTimeout>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e039      	b.n	8004c2e <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	3302      	adds	r3, #2
 8004bd4:	61bb      	str	r3, [r7, #24]
 8004bd6:	e007      	b.n	8004be8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	781a      	ldrb	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	3301      	adds	r3, #1
 8004be6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1cc      	bne.n	8004ba0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2140      	movs	r1, #64	@ 0x40
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 fb74 	bl	80052fe <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e006      	b.n	8004c2e <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	e000      	b.n	8004c2e <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004c2c:	2302      	movs	r3, #2
  }
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3720      	adds	r7, #32
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
	...

08004c38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c3c:	b08c      	sub	sp, #48	@ 0x30
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	431a      	orrs	r2, r3
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	431a      	orrs	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	69db      	ldr	r3, [r3, #28]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b94      	ldr	r3, [pc, #592]	@ (8004eb8 <UART_SetConfig+0x280>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	6812      	ldr	r2, [r2, #0]
 8004c6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a89      	ldr	r2, [pc, #548]	@ (8004ebc <UART_SetConfig+0x284>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d004      	beq.n	8004ca4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6a1b      	ldr	r3, [r3, #32]
 8004c9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004cae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc2:	f023 010f 	bic.w	r1, r3, #15
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a7a      	ldr	r2, [pc, #488]	@ (8004ec0 <UART_SetConfig+0x288>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d127      	bne.n	8004d2c <UART_SetConfig+0xf4>
 8004cdc:	2003      	movs	r0, #3
 8004cde:	f7ff feb3 	bl	8004a48 <LL_RCC_GetUSARTClockSource>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d81b      	bhi.n	8004d24 <UART_SetConfig+0xec>
 8004cec:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf4 <UART_SetConfig+0xbc>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d05 	.word	0x08004d05
 8004cf8:	08004d15 	.word	0x08004d15
 8004cfc:	08004d0d 	.word	0x08004d0d
 8004d00:	08004d1d 	.word	0x08004d1d
 8004d04:	2301      	movs	r3, #1
 8004d06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d0a:	e080      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d12:	e07c      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004d14:	2304      	movs	r3, #4
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1a:	e078      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004d1c:	2308      	movs	r3, #8
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d22:	e074      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004d24:	2310      	movs	r3, #16
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d2a:	e070      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a64      	ldr	r2, [pc, #400]	@ (8004ec4 <UART_SetConfig+0x28c>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d138      	bne.n	8004da8 <UART_SetConfig+0x170>
 8004d36:	200c      	movs	r0, #12
 8004d38:	f7ff fe86 	bl	8004a48 <LL_RCC_GetUSARTClockSource>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8004d42:	2b0c      	cmp	r3, #12
 8004d44:	d82c      	bhi.n	8004da0 <UART_SetConfig+0x168>
 8004d46:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <UART_SetConfig+0x114>)
 8004d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4c:	08004d81 	.word	0x08004d81
 8004d50:	08004da1 	.word	0x08004da1
 8004d54:	08004da1 	.word	0x08004da1
 8004d58:	08004da1 	.word	0x08004da1
 8004d5c:	08004d91 	.word	0x08004d91
 8004d60:	08004da1 	.word	0x08004da1
 8004d64:	08004da1 	.word	0x08004da1
 8004d68:	08004da1 	.word	0x08004da1
 8004d6c:	08004d89 	.word	0x08004d89
 8004d70:	08004da1 	.word	0x08004da1
 8004d74:	08004da1 	.word	0x08004da1
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004d99 	.word	0x08004d99
 8004d80:	2300      	movs	r3, #0
 8004d82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d86:	e042      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d8e:	e03e      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004d90:	2304      	movs	r3, #4
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d96:	e03a      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004d98:	2308      	movs	r3, #8
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d9e:	e036      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004da0:	2310      	movs	r3, #16
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004da6:	e032      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a43      	ldr	r2, [pc, #268]	@ (8004ebc <UART_SetConfig+0x284>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d12a      	bne.n	8004e08 <UART_SetConfig+0x1d0>
 8004db2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8004db6:	f7ff fe59 	bl	8004a6c <LL_RCC_GetLPUARTClockSource>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dc0:	d01a      	beq.n	8004df8 <UART_SetConfig+0x1c0>
 8004dc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004dc6:	d81b      	bhi.n	8004e00 <UART_SetConfig+0x1c8>
 8004dc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dcc:	d00c      	beq.n	8004de8 <UART_SetConfig+0x1b0>
 8004dce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004dd2:	d815      	bhi.n	8004e00 <UART_SetConfig+0x1c8>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d003      	beq.n	8004de0 <UART_SetConfig+0x1a8>
 8004dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ddc:	d008      	beq.n	8004df0 <UART_SetConfig+0x1b8>
 8004dde:	e00f      	b.n	8004e00 <UART_SetConfig+0x1c8>
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004de6:	e012      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004de8:	2302      	movs	r3, #2
 8004dea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dee:	e00e      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004df0:	2304      	movs	r3, #4
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004df6:	e00a      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004df8:	2308      	movs	r3, #8
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dfe:	e006      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004e00:	2310      	movs	r3, #16
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e06:	e002      	b.n	8004e0e <UART_SetConfig+0x1d6>
 8004e08:	2310      	movs	r3, #16
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a2a      	ldr	r2, [pc, #168]	@ (8004ebc <UART_SetConfig+0x284>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	f040 80a4 	bne.w	8004f62 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d823      	bhi.n	8004e6a <UART_SetConfig+0x232>
 8004e22:	a201      	add	r2, pc, #4	@ (adr r2, 8004e28 <UART_SetConfig+0x1f0>)
 8004e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e28:	08004e4d 	.word	0x08004e4d
 8004e2c:	08004e6b 	.word	0x08004e6b
 8004e30:	08004e55 	.word	0x08004e55
 8004e34:	08004e6b 	.word	0x08004e6b
 8004e38:	08004e5b 	.word	0x08004e5b
 8004e3c:	08004e6b 	.word	0x08004e6b
 8004e40:	08004e6b 	.word	0x08004e6b
 8004e44:	08004e6b 	.word	0x08004e6b
 8004e48:	08004e63 	.word	0x08004e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f7fe fe5e 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8004e50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e52:	e010      	b.n	8004e76 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e54:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec8 <UART_SetConfig+0x290>)
 8004e56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e58:	e00d      	b.n	8004e76 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e5a:	f7fe fda3 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8004e5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e60:	e009      	b.n	8004e76 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e68:	e005      	b.n	8004e76 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8137 	beq.w	80050ec <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e82:	4a12      	ldr	r2, [pc, #72]	@ (8004ecc <UART_SetConfig+0x294>)
 8004e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	4413      	add	r3, r2
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d305      	bcc.n	8004eae <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d910      	bls.n	8004ed0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004eb4:	e11a      	b.n	80050ec <UART_SetConfig+0x4b4>
 8004eb6:	bf00      	nop
 8004eb8:	cfff69f3 	.word	0xcfff69f3
 8004ebc:	40008000 	.word	0x40008000
 8004ec0:	40013800 	.word	0x40013800
 8004ec4:	40004400 	.word	0x40004400
 8004ec8:	00f42400 	.word	0x00f42400
 8004ecc:	0800633c 	.word	0x0800633c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	60fa      	str	r2, [r7, #12]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	4a8e      	ldr	r2, [pc, #568]	@ (8005118 <UART_SetConfig+0x4e0>)
 8004ede:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004eee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ef2:	f7fb f99d 	bl	8000230 <__aeabi_uldivmod>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4610      	mov	r0, r2
 8004efc:	4619      	mov	r1, r3
 8004efe:	f04f 0200 	mov.w	r2, #0
 8004f02:	f04f 0300 	mov.w	r3, #0
 8004f06:	020b      	lsls	r3, r1, #8
 8004f08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f0c:	0202      	lsls	r2, r0, #8
 8004f0e:	6979      	ldr	r1, [r7, #20]
 8004f10:	6849      	ldr	r1, [r1, #4]
 8004f12:	0849      	lsrs	r1, r1, #1
 8004f14:	2000      	movs	r0, #0
 8004f16:	460c      	mov	r4, r1
 8004f18:	4605      	mov	r5, r0
 8004f1a:	eb12 0804 	adds.w	r8, r2, r4
 8004f1e:	eb43 0905 	adc.w	r9, r3, r5
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	469a      	mov	sl, r3
 8004f2a:	4693      	mov	fp, r2
 8004f2c:	4652      	mov	r2, sl
 8004f2e:	465b      	mov	r3, fp
 8004f30:	4640      	mov	r0, r8
 8004f32:	4649      	mov	r1, r9
 8004f34:	f7fb f97c 	bl	8000230 <__aeabi_uldivmod>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f46:	d308      	bcc.n	8004f5a <UART_SetConfig+0x322>
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f4e:	d204      	bcs.n	8004f5a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	60da      	str	r2, [r3, #12]
 8004f58:	e0c8      	b.n	80050ec <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f60:	e0c4      	b.n	80050ec <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f6a:	d167      	bne.n	800503c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004f6c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d828      	bhi.n	8004fc6 <UART_SetConfig+0x38e>
 8004f74:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <UART_SetConfig+0x344>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa9 	.word	0x08004fa9
 8004f84:	08004fb1 	.word	0x08004fb1
 8004f88:	08004fc7 	.word	0x08004fc7
 8004f8c:	08004fb7 	.word	0x08004fb7
 8004f90:	08004fc7 	.word	0x08004fc7
 8004f94:	08004fc7 	.word	0x08004fc7
 8004f98:	08004fc7 	.word	0x08004fc7
 8004f9c:	08004fbf 	.word	0x08004fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fe fdb4 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8004fa4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fa6:	e014      	b.n	8004fd2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fa8:	f7fe fdc2 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 8004fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fae:	e010      	b.n	8004fd2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800511c <UART_SetConfig+0x4e4>)
 8004fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fb4:	e00d      	b.n	8004fd2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb6:	f7fe fcf5 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 8004fba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fbc:	e009      	b.n	8004fd2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fc4:	e005      	b.n	8004fd2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8089 	beq.w	80050ec <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	4a4e      	ldr	r2, [pc, #312]	@ (8005118 <UART_SetConfig+0x4e0>)
 8004fe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fec:	005a      	lsls	r2, r3, #1
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	441a      	add	r2, r3
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	d916      	bls.n	8005034 <UART_SetConfig+0x3fc>
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800500c:	d212      	bcs.n	8005034 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800500e:	6a3b      	ldr	r3, [r7, #32]
 8005010:	b29b      	uxth	r3, r3
 8005012:	f023 030f 	bic.w	r3, r3, #15
 8005016:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005018:	6a3b      	ldr	r3, [r7, #32]
 800501a:	085b      	lsrs	r3, r3, #1
 800501c:	b29b      	uxth	r3, r3
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	b29a      	uxth	r2, r3
 8005024:	8bfb      	ldrh	r3, [r7, #30]
 8005026:	4313      	orrs	r3, r2
 8005028:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	8bfa      	ldrh	r2, [r7, #30]
 8005030:	60da      	str	r2, [r3, #12]
 8005032:	e05b      	b.n	80050ec <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800503a:	e057      	b.n	80050ec <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800503c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005040:	2b08      	cmp	r3, #8
 8005042:	d828      	bhi.n	8005096 <UART_SetConfig+0x45e>
 8005044:	a201      	add	r2, pc, #4	@ (adr r2, 800504c <UART_SetConfig+0x414>)
 8005046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800504a:	bf00      	nop
 800504c:	08005071 	.word	0x08005071
 8005050:	08005079 	.word	0x08005079
 8005054:	08005081 	.word	0x08005081
 8005058:	08005097 	.word	0x08005097
 800505c:	08005087 	.word	0x08005087
 8005060:	08005097 	.word	0x08005097
 8005064:	08005097 	.word	0x08005097
 8005068:	08005097 	.word	0x08005097
 800506c:	0800508f 	.word	0x0800508f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005070:	f7fe fd4c 	bl	8003b0c <HAL_RCC_GetPCLK1Freq>
 8005074:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005076:	e014      	b.n	80050a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005078:	f7fe fd5a 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 800507c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800507e:	e010      	b.n	80050a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005080:	4b26      	ldr	r3, [pc, #152]	@ (800511c <UART_SetConfig+0x4e4>)
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005084:	e00d      	b.n	80050a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005086:	f7fe fc8d 	bl	80039a4 <HAL_RCC_GetSysClockFreq>
 800508a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800508c:	e009      	b.n	80050a2 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800508e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005092:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005094:	e005      	b.n	80050a2 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005096:	2300      	movs	r3, #0
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050a0:	bf00      	nop
    }

    if (pclk != 0U)
 80050a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d021      	beq.n	80050ec <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005118 <UART_SetConfig+0x4e0>)
 80050ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b2:	461a      	mov	r2, r3
 80050b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	085b      	lsrs	r3, r3, #1
 80050c0:	441a      	add	r2, r3
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	2b0f      	cmp	r3, #15
 80050d0:	d909      	bls.n	80050e6 <UART_SetConfig+0x4ae>
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050d8:	d205      	bcs.n	80050e6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	b29a      	uxth	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60da      	str	r2, [r3, #12]
 80050e4:	e002      	b.n	80050ec <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2200      	movs	r2, #0
 8005100:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2200      	movs	r2, #0
 8005106:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005108:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800510c:	4618      	mov	r0, r3
 800510e:	3730      	adds	r7, #48	@ 0x30
 8005110:	46bd      	mov	sp, r7
 8005112:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005116:	bf00      	nop
 8005118:	0800633c 	.word	0x0800633c
 800511c:	00f42400 	.word	0x00f42400

08005120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514e:	f003 0302 	and.w	r3, r3, #2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	430a      	orrs	r2, r1
 800518c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	f003 0310 	and.w	r3, r3, #16
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d01a      	beq.n	8005236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800521e:	d10a      	bne.n	8005236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	605a      	str	r2, [r3, #4]
  }
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr

08005262 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b086      	sub	sp, #24
 8005266:	af02      	add	r7, sp, #8
 8005268:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005272:	f7fd f937 	bl	80024e4 <HAL_GetTick>
 8005276:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b08      	cmp	r3, #8
 8005284:	d10e      	bne.n	80052a4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005286:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f832 	bl	80052fe <UART_WaitOnFlagUntilTimeout>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e028      	b.n	80052f6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d10e      	bne.n	80052d0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f81c 	bl	80052fe <UART_WaitOnFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e012      	b.n	80052f6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2220      	movs	r2, #32
 80052d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b09c      	sub	sp, #112	@ 0x70
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	603b      	str	r3, [r7, #0]
 800530a:	4613      	mov	r3, r2
 800530c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530e:	e0a9      	b.n	8005464 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005316:	f000 80a5 	beq.w	8005464 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800531a:	f7fd f8e3 	bl	80024e4 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005326:	429a      	cmp	r2, r3
 8005328:	d302      	bcc.n	8005330 <UART_WaitOnFlagUntilTimeout+0x32>
 800532a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800532c:	2b00      	cmp	r3, #0
 800532e:	d140      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800533e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005340:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005344:	667b      	str	r3, [r7, #100]	@ 0x64
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800534e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005350:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005354:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800535c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e6      	bne.n	8005330 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3308      	adds	r3, #8
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	663b      	str	r3, [r7, #96]	@ 0x60
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005382:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005384:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005388:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005390:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2220      	movs	r2, #32
 80053a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e069      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d051      	beq.n	8005464 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80053ce:	d149      	bne.n	8005464 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80053ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053fa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80053fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e6      	bne.n	80053da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3308      	adds	r3, #8
 8005412:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	e853 3f00 	ldrex	r3, [r3]
 800541a:	613b      	str	r3, [r7, #16]
   return(result);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	f023 0301 	bic.w	r3, r3, #1
 8005422:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800542c:	623a      	str	r2, [r7, #32]
 800542e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	69f9      	ldr	r1, [r7, #28]
 8005432:	6a3a      	ldr	r2, [r7, #32]
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	61bb      	str	r3, [r7, #24]
   return(result);
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e5      	bne.n	800540c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2220      	movs	r2, #32
 8005454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005460:	2303      	movs	r3, #3
 8005462:	e010      	b.n	8005486 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	69da      	ldr	r2, [r3, #28]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	4013      	ands	r3, r2
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	429a      	cmp	r2, r3
 8005472:	bf0c      	ite	eq
 8005474:	2301      	moveq	r3, #1
 8005476:	2300      	movne	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	79fb      	ldrb	r3, [r7, #7]
 800547e:	429a      	cmp	r2, r3
 8005480:	f43f af46 	beq.w	8005310 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3770      	adds	r7, #112	@ 0x70
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800548e:	b480      	push	{r7}
 8005490:	b085      	sub	sp, #20
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e027      	b.n	80054f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2224      	movs	r2, #36	@ 0x24
 80054b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0201 	bic.w	r2, r2, #1
 80054ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80054d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr

080054fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b084      	sub	sp, #16
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005512:	2302      	movs	r3, #2
 8005514:	e02d      	b.n	8005572 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2224      	movs	r2, #36	@ 0x24
 8005522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0201 	bic.w	r2, r2, #1
 800553c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f850 	bl	80055f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68fa      	ldr	r2, [r7, #12]
 800555e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b084      	sub	sp, #16
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800558e:	2302      	movs	r3, #2
 8005590:	e02d      	b.n	80055ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2224      	movs	r2, #36	@ 0x24
 800559e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0201 	bic.w	r2, r2, #1
 80055b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f812 	bl	80055f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68fa      	ldr	r2, [r7, #12]
 80055da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
	...

080055f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005604:	2b00      	cmp	r3, #0
 8005606:	d108      	bne.n	800561a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005618:	e031      	b.n	800567e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800561a:	2308      	movs	r3, #8
 800561c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800561e:	2308      	movs	r3, #8
 8005620:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	0e5b      	lsrs	r3, r3, #25
 800562a:	b2db      	uxtb	r3, r3
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	0f5b      	lsrs	r3, r3, #29
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005642:	7bbb      	ldrb	r3, [r7, #14]
 8005644:	7b3a      	ldrb	r2, [r7, #12]
 8005646:	4910      	ldr	r1, [pc, #64]	@ (8005688 <UARTEx_SetNbDataToProcess+0x90>)
 8005648:	5c8a      	ldrb	r2, [r1, r2]
 800564a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800564e:	7b3a      	ldrb	r2, [r7, #12]
 8005650:	490e      	ldr	r1, [pc, #56]	@ (800568c <UARTEx_SetNbDataToProcess+0x94>)
 8005652:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005654:	fb93 f3f2 	sdiv	r3, r3, r2
 8005658:	b29a      	uxth	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	7b7a      	ldrb	r2, [r7, #13]
 8005664:	4908      	ldr	r1, [pc, #32]	@ (8005688 <UARTEx_SetNbDataToProcess+0x90>)
 8005666:	5c8a      	ldrb	r2, [r1, r2]
 8005668:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800566c:	7b7a      	ldrb	r2, [r7, #13]
 800566e:	4907      	ldr	r1, [pc, #28]	@ (800568c <UARTEx_SetNbDataToProcess+0x94>)
 8005670:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005672:	fb93 f3f2 	sdiv	r3, r3, r2
 8005676:	b29a      	uxth	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800567e:	bf00      	nop
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr
 8005688:	08006354 	.word	0x08006354
 800568c:	0800635c 	.word	0x0800635c

08005690 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	70fb      	strb	r3, [r7, #3]
 800569c:	4613      	mov	r3, r2
 800569e:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80056a4:	e004      	b.n	80056b0 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	60fa      	str	r2, [r7, #12]
 80056ac:	78fa      	ldrb	r2, [r7, #3]
 80056ae:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80056b0:	883b      	ldrh	r3, [r7, #0]
 80056b2:	1e5a      	subs	r2, r3, #1
 80056b4:	803a      	strh	r2, [r7, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f5      	bne.n	80056a6 <UTIL_MEM_set_8+0x16>
  }
}
 80056ba:	bf00      	nop
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bc80      	pop	{r7}
 80056c4:	4770      	bx	lr
	...

080056c8 <sniprintf>:
 80056c8:	b40c      	push	{r2, r3}
 80056ca:	b530      	push	{r4, r5, lr}
 80056cc:	4b17      	ldr	r3, [pc, #92]	@ (800572c <sniprintf+0x64>)
 80056ce:	1e0c      	subs	r4, r1, #0
 80056d0:	681d      	ldr	r5, [r3, #0]
 80056d2:	b09d      	sub	sp, #116	@ 0x74
 80056d4:	da08      	bge.n	80056e8 <sniprintf+0x20>
 80056d6:	238b      	movs	r3, #139	@ 0x8b
 80056d8:	602b      	str	r3, [r5, #0]
 80056da:	f04f 30ff 	mov.w	r0, #4294967295
 80056de:	b01d      	add	sp, #116	@ 0x74
 80056e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056e4:	b002      	add	sp, #8
 80056e6:	4770      	bx	lr
 80056e8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80056ec:	f8ad 3014 	strh.w	r3, [sp, #20]
 80056f0:	bf14      	ite	ne
 80056f2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80056f6:	4623      	moveq	r3, r4
 80056f8:	9304      	str	r3, [sp, #16]
 80056fa:	9307      	str	r3, [sp, #28]
 80056fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005700:	9002      	str	r0, [sp, #8]
 8005702:	9006      	str	r0, [sp, #24]
 8005704:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005708:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800570a:	ab21      	add	r3, sp, #132	@ 0x84
 800570c:	a902      	add	r1, sp, #8
 800570e:	4628      	mov	r0, r5
 8005710:	9301      	str	r3, [sp, #4]
 8005712:	f000 f9c7 	bl	8005aa4 <_svfiprintf_r>
 8005716:	1c43      	adds	r3, r0, #1
 8005718:	bfbc      	itt	lt
 800571a:	238b      	movlt	r3, #139	@ 0x8b
 800571c:	602b      	strlt	r3, [r5, #0]
 800571e:	2c00      	cmp	r4, #0
 8005720:	d0dd      	beq.n	80056de <sniprintf+0x16>
 8005722:	9b02      	ldr	r3, [sp, #8]
 8005724:	2200      	movs	r2, #0
 8005726:	701a      	strb	r2, [r3, #0]
 8005728:	e7d9      	b.n	80056de <sniprintf+0x16>
 800572a:	bf00      	nop
 800572c:	20000018 	.word	0x20000018

08005730 <siprintf>:
 8005730:	b40e      	push	{r1, r2, r3}
 8005732:	b500      	push	{lr}
 8005734:	b09c      	sub	sp, #112	@ 0x70
 8005736:	ab1d      	add	r3, sp, #116	@ 0x74
 8005738:	9002      	str	r0, [sp, #8]
 800573a:	9006      	str	r0, [sp, #24]
 800573c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005740:	4809      	ldr	r0, [pc, #36]	@ (8005768 <siprintf+0x38>)
 8005742:	9107      	str	r1, [sp, #28]
 8005744:	9104      	str	r1, [sp, #16]
 8005746:	4909      	ldr	r1, [pc, #36]	@ (800576c <siprintf+0x3c>)
 8005748:	f853 2b04 	ldr.w	r2, [r3], #4
 800574c:	9105      	str	r1, [sp, #20]
 800574e:	6800      	ldr	r0, [r0, #0]
 8005750:	9301      	str	r3, [sp, #4]
 8005752:	a902      	add	r1, sp, #8
 8005754:	f000 f9a6 	bl	8005aa4 <_svfiprintf_r>
 8005758:	9b02      	ldr	r3, [sp, #8]
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	b01c      	add	sp, #112	@ 0x70
 8005760:	f85d eb04 	ldr.w	lr, [sp], #4
 8005764:	b003      	add	sp, #12
 8005766:	4770      	bx	lr
 8005768:	20000018 	.word	0x20000018
 800576c:	ffff0208 	.word	0xffff0208

08005770 <memset>:
 8005770:	4402      	add	r2, r0
 8005772:	4603      	mov	r3, r0
 8005774:	4293      	cmp	r3, r2
 8005776:	d100      	bne.n	800577a <memset+0xa>
 8005778:	4770      	bx	lr
 800577a:	f803 1b01 	strb.w	r1, [r3], #1
 800577e:	e7f9      	b.n	8005774 <memset+0x4>

08005780 <strncmp>:
 8005780:	b510      	push	{r4, lr}
 8005782:	b16a      	cbz	r2, 80057a0 <strncmp+0x20>
 8005784:	3901      	subs	r1, #1
 8005786:	1884      	adds	r4, r0, r2
 8005788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800578c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005790:	429a      	cmp	r2, r3
 8005792:	d103      	bne.n	800579c <strncmp+0x1c>
 8005794:	42a0      	cmp	r0, r4
 8005796:	d001      	beq.n	800579c <strncmp+0x1c>
 8005798:	2a00      	cmp	r2, #0
 800579a:	d1f5      	bne.n	8005788 <strncmp+0x8>
 800579c:	1ad0      	subs	r0, r2, r3
 800579e:	bd10      	pop	{r4, pc}
 80057a0:	4610      	mov	r0, r2
 80057a2:	e7fc      	b.n	800579e <strncmp+0x1e>

080057a4 <__errno>:
 80057a4:	4b01      	ldr	r3, [pc, #4]	@ (80057ac <__errno+0x8>)
 80057a6:	6818      	ldr	r0, [r3, #0]
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20000018 	.word	0x20000018

080057b0 <__libc_init_array>:
 80057b0:	b570      	push	{r4, r5, r6, lr}
 80057b2:	4d0d      	ldr	r5, [pc, #52]	@ (80057e8 <__libc_init_array+0x38>)
 80057b4:	4c0d      	ldr	r4, [pc, #52]	@ (80057ec <__libc_init_array+0x3c>)
 80057b6:	1b64      	subs	r4, r4, r5
 80057b8:	10a4      	asrs	r4, r4, #2
 80057ba:	2600      	movs	r6, #0
 80057bc:	42a6      	cmp	r6, r4
 80057be:	d109      	bne.n	80057d4 <__libc_init_array+0x24>
 80057c0:	4d0b      	ldr	r5, [pc, #44]	@ (80057f0 <__libc_init_array+0x40>)
 80057c2:	4c0c      	ldr	r4, [pc, #48]	@ (80057f4 <__libc_init_array+0x44>)
 80057c4:	f000 fc66 	bl	8006094 <_init>
 80057c8:	1b64      	subs	r4, r4, r5
 80057ca:	10a4      	asrs	r4, r4, #2
 80057cc:	2600      	movs	r6, #0
 80057ce:	42a6      	cmp	r6, r4
 80057d0:	d105      	bne.n	80057de <__libc_init_array+0x2e>
 80057d2:	bd70      	pop	{r4, r5, r6, pc}
 80057d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80057d8:	4798      	blx	r3
 80057da:	3601      	adds	r6, #1
 80057dc:	e7ee      	b.n	80057bc <__libc_init_array+0xc>
 80057de:	f855 3b04 	ldr.w	r3, [r5], #4
 80057e2:	4798      	blx	r3
 80057e4:	3601      	adds	r6, #1
 80057e6:	e7f2      	b.n	80057ce <__libc_init_array+0x1e>
 80057e8:	080063a0 	.word	0x080063a0
 80057ec:	080063a0 	.word	0x080063a0
 80057f0:	080063a0 	.word	0x080063a0
 80057f4:	080063a4 	.word	0x080063a4

080057f8 <__retarget_lock_acquire_recursive>:
 80057f8:	4770      	bx	lr

080057fa <__retarget_lock_release_recursive>:
 80057fa:	4770      	bx	lr

080057fc <_free_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4605      	mov	r5, r0
 8005800:	2900      	cmp	r1, #0
 8005802:	d041      	beq.n	8005888 <_free_r+0x8c>
 8005804:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005808:	1f0c      	subs	r4, r1, #4
 800580a:	2b00      	cmp	r3, #0
 800580c:	bfb8      	it	lt
 800580e:	18e4      	addlt	r4, r4, r3
 8005810:	f000 f8e0 	bl	80059d4 <__malloc_lock>
 8005814:	4a1d      	ldr	r2, [pc, #116]	@ (800588c <_free_r+0x90>)
 8005816:	6813      	ldr	r3, [r2, #0]
 8005818:	b933      	cbnz	r3, 8005828 <_free_r+0x2c>
 800581a:	6063      	str	r3, [r4, #4]
 800581c:	6014      	str	r4, [r2, #0]
 800581e:	4628      	mov	r0, r5
 8005820:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005824:	f000 b8dc 	b.w	80059e0 <__malloc_unlock>
 8005828:	42a3      	cmp	r3, r4
 800582a:	d908      	bls.n	800583e <_free_r+0x42>
 800582c:	6820      	ldr	r0, [r4, #0]
 800582e:	1821      	adds	r1, r4, r0
 8005830:	428b      	cmp	r3, r1
 8005832:	bf01      	itttt	eq
 8005834:	6819      	ldreq	r1, [r3, #0]
 8005836:	685b      	ldreq	r3, [r3, #4]
 8005838:	1809      	addeq	r1, r1, r0
 800583a:	6021      	streq	r1, [r4, #0]
 800583c:	e7ed      	b.n	800581a <_free_r+0x1e>
 800583e:	461a      	mov	r2, r3
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	b10b      	cbz	r3, 8005848 <_free_r+0x4c>
 8005844:	42a3      	cmp	r3, r4
 8005846:	d9fa      	bls.n	800583e <_free_r+0x42>
 8005848:	6811      	ldr	r1, [r2, #0]
 800584a:	1850      	adds	r0, r2, r1
 800584c:	42a0      	cmp	r0, r4
 800584e:	d10b      	bne.n	8005868 <_free_r+0x6c>
 8005850:	6820      	ldr	r0, [r4, #0]
 8005852:	4401      	add	r1, r0
 8005854:	1850      	adds	r0, r2, r1
 8005856:	4283      	cmp	r3, r0
 8005858:	6011      	str	r1, [r2, #0]
 800585a:	d1e0      	bne.n	800581e <_free_r+0x22>
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	6053      	str	r3, [r2, #4]
 8005862:	4408      	add	r0, r1
 8005864:	6010      	str	r0, [r2, #0]
 8005866:	e7da      	b.n	800581e <_free_r+0x22>
 8005868:	d902      	bls.n	8005870 <_free_r+0x74>
 800586a:	230c      	movs	r3, #12
 800586c:	602b      	str	r3, [r5, #0]
 800586e:	e7d6      	b.n	800581e <_free_r+0x22>
 8005870:	6820      	ldr	r0, [r4, #0]
 8005872:	1821      	adds	r1, r4, r0
 8005874:	428b      	cmp	r3, r1
 8005876:	bf04      	itt	eq
 8005878:	6819      	ldreq	r1, [r3, #0]
 800587a:	685b      	ldreq	r3, [r3, #4]
 800587c:	6063      	str	r3, [r4, #4]
 800587e:	bf04      	itt	eq
 8005880:	1809      	addeq	r1, r1, r0
 8005882:	6021      	streq	r1, [r4, #0]
 8005884:	6054      	str	r4, [r2, #4]
 8005886:	e7ca      	b.n	800581e <_free_r+0x22>
 8005888:	bd38      	pop	{r3, r4, r5, pc}
 800588a:	bf00      	nop
 800588c:	20000298 	.word	0x20000298

08005890 <sbrk_aligned>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	4e0f      	ldr	r6, [pc, #60]	@ (80058d0 <sbrk_aligned+0x40>)
 8005894:	460c      	mov	r4, r1
 8005896:	6831      	ldr	r1, [r6, #0]
 8005898:	4605      	mov	r5, r0
 800589a:	b911      	cbnz	r1, 80058a2 <sbrk_aligned+0x12>
 800589c:	f000 fba6 	bl	8005fec <_sbrk_r>
 80058a0:	6030      	str	r0, [r6, #0]
 80058a2:	4621      	mov	r1, r4
 80058a4:	4628      	mov	r0, r5
 80058a6:	f000 fba1 	bl	8005fec <_sbrk_r>
 80058aa:	1c43      	adds	r3, r0, #1
 80058ac:	d103      	bne.n	80058b6 <sbrk_aligned+0x26>
 80058ae:	f04f 34ff 	mov.w	r4, #4294967295
 80058b2:	4620      	mov	r0, r4
 80058b4:	bd70      	pop	{r4, r5, r6, pc}
 80058b6:	1cc4      	adds	r4, r0, #3
 80058b8:	f024 0403 	bic.w	r4, r4, #3
 80058bc:	42a0      	cmp	r0, r4
 80058be:	d0f8      	beq.n	80058b2 <sbrk_aligned+0x22>
 80058c0:	1a21      	subs	r1, r4, r0
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 fb92 	bl	8005fec <_sbrk_r>
 80058c8:	3001      	adds	r0, #1
 80058ca:	d1f2      	bne.n	80058b2 <sbrk_aligned+0x22>
 80058cc:	e7ef      	b.n	80058ae <sbrk_aligned+0x1e>
 80058ce:	bf00      	nop
 80058d0:	20000294 	.word	0x20000294

080058d4 <_malloc_r>:
 80058d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058d8:	1ccd      	adds	r5, r1, #3
 80058da:	f025 0503 	bic.w	r5, r5, #3
 80058de:	3508      	adds	r5, #8
 80058e0:	2d0c      	cmp	r5, #12
 80058e2:	bf38      	it	cc
 80058e4:	250c      	movcc	r5, #12
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	4606      	mov	r6, r0
 80058ea:	db01      	blt.n	80058f0 <_malloc_r+0x1c>
 80058ec:	42a9      	cmp	r1, r5
 80058ee:	d904      	bls.n	80058fa <_malloc_r+0x26>
 80058f0:	230c      	movs	r3, #12
 80058f2:	6033      	str	r3, [r6, #0]
 80058f4:	2000      	movs	r0, #0
 80058f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80059d0 <_malloc_r+0xfc>
 80058fe:	f000 f869 	bl	80059d4 <__malloc_lock>
 8005902:	f8d8 3000 	ldr.w	r3, [r8]
 8005906:	461c      	mov	r4, r3
 8005908:	bb44      	cbnz	r4, 800595c <_malloc_r+0x88>
 800590a:	4629      	mov	r1, r5
 800590c:	4630      	mov	r0, r6
 800590e:	f7ff ffbf 	bl	8005890 <sbrk_aligned>
 8005912:	1c43      	adds	r3, r0, #1
 8005914:	4604      	mov	r4, r0
 8005916:	d158      	bne.n	80059ca <_malloc_r+0xf6>
 8005918:	f8d8 4000 	ldr.w	r4, [r8]
 800591c:	4627      	mov	r7, r4
 800591e:	2f00      	cmp	r7, #0
 8005920:	d143      	bne.n	80059aa <_malloc_r+0xd6>
 8005922:	2c00      	cmp	r4, #0
 8005924:	d04b      	beq.n	80059be <_malloc_r+0xea>
 8005926:	6823      	ldr	r3, [r4, #0]
 8005928:	4639      	mov	r1, r7
 800592a:	4630      	mov	r0, r6
 800592c:	eb04 0903 	add.w	r9, r4, r3
 8005930:	f000 fb5c 	bl	8005fec <_sbrk_r>
 8005934:	4581      	cmp	r9, r0
 8005936:	d142      	bne.n	80059be <_malloc_r+0xea>
 8005938:	6821      	ldr	r1, [r4, #0]
 800593a:	1a6d      	subs	r5, r5, r1
 800593c:	4629      	mov	r1, r5
 800593e:	4630      	mov	r0, r6
 8005940:	f7ff ffa6 	bl	8005890 <sbrk_aligned>
 8005944:	3001      	adds	r0, #1
 8005946:	d03a      	beq.n	80059be <_malloc_r+0xea>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	442b      	add	r3, r5
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	f8d8 3000 	ldr.w	r3, [r8]
 8005952:	685a      	ldr	r2, [r3, #4]
 8005954:	bb62      	cbnz	r2, 80059b0 <_malloc_r+0xdc>
 8005956:	f8c8 7000 	str.w	r7, [r8]
 800595a:	e00f      	b.n	800597c <_malloc_r+0xa8>
 800595c:	6822      	ldr	r2, [r4, #0]
 800595e:	1b52      	subs	r2, r2, r5
 8005960:	d420      	bmi.n	80059a4 <_malloc_r+0xd0>
 8005962:	2a0b      	cmp	r2, #11
 8005964:	d917      	bls.n	8005996 <_malloc_r+0xc2>
 8005966:	1961      	adds	r1, r4, r5
 8005968:	42a3      	cmp	r3, r4
 800596a:	6025      	str	r5, [r4, #0]
 800596c:	bf18      	it	ne
 800596e:	6059      	strne	r1, [r3, #4]
 8005970:	6863      	ldr	r3, [r4, #4]
 8005972:	bf08      	it	eq
 8005974:	f8c8 1000 	streq.w	r1, [r8]
 8005978:	5162      	str	r2, [r4, r5]
 800597a:	604b      	str	r3, [r1, #4]
 800597c:	4630      	mov	r0, r6
 800597e:	f000 f82f 	bl	80059e0 <__malloc_unlock>
 8005982:	f104 000b 	add.w	r0, r4, #11
 8005986:	1d23      	adds	r3, r4, #4
 8005988:	f020 0007 	bic.w	r0, r0, #7
 800598c:	1ac2      	subs	r2, r0, r3
 800598e:	bf1c      	itt	ne
 8005990:	1a1b      	subne	r3, r3, r0
 8005992:	50a3      	strne	r3, [r4, r2]
 8005994:	e7af      	b.n	80058f6 <_malloc_r+0x22>
 8005996:	6862      	ldr	r2, [r4, #4]
 8005998:	42a3      	cmp	r3, r4
 800599a:	bf0c      	ite	eq
 800599c:	f8c8 2000 	streq.w	r2, [r8]
 80059a0:	605a      	strne	r2, [r3, #4]
 80059a2:	e7eb      	b.n	800597c <_malloc_r+0xa8>
 80059a4:	4623      	mov	r3, r4
 80059a6:	6864      	ldr	r4, [r4, #4]
 80059a8:	e7ae      	b.n	8005908 <_malloc_r+0x34>
 80059aa:	463c      	mov	r4, r7
 80059ac:	687f      	ldr	r7, [r7, #4]
 80059ae:	e7b6      	b.n	800591e <_malloc_r+0x4a>
 80059b0:	461a      	mov	r2, r3
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	42a3      	cmp	r3, r4
 80059b6:	d1fb      	bne.n	80059b0 <_malloc_r+0xdc>
 80059b8:	2300      	movs	r3, #0
 80059ba:	6053      	str	r3, [r2, #4]
 80059bc:	e7de      	b.n	800597c <_malloc_r+0xa8>
 80059be:	230c      	movs	r3, #12
 80059c0:	6033      	str	r3, [r6, #0]
 80059c2:	4630      	mov	r0, r6
 80059c4:	f000 f80c 	bl	80059e0 <__malloc_unlock>
 80059c8:	e794      	b.n	80058f4 <_malloc_r+0x20>
 80059ca:	6005      	str	r5, [r0, #0]
 80059cc:	e7d6      	b.n	800597c <_malloc_r+0xa8>
 80059ce:	bf00      	nop
 80059d0:	20000298 	.word	0x20000298

080059d4 <__malloc_lock>:
 80059d4:	4801      	ldr	r0, [pc, #4]	@ (80059dc <__malloc_lock+0x8>)
 80059d6:	f7ff bf0f 	b.w	80057f8 <__retarget_lock_acquire_recursive>
 80059da:	bf00      	nop
 80059dc:	20000290 	.word	0x20000290

080059e0 <__malloc_unlock>:
 80059e0:	4801      	ldr	r0, [pc, #4]	@ (80059e8 <__malloc_unlock+0x8>)
 80059e2:	f7ff bf0a 	b.w	80057fa <__retarget_lock_release_recursive>
 80059e6:	bf00      	nop
 80059e8:	20000290 	.word	0x20000290

080059ec <__ssputs_r>:
 80059ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f0:	688e      	ldr	r6, [r1, #8]
 80059f2:	461f      	mov	r7, r3
 80059f4:	42be      	cmp	r6, r7
 80059f6:	680b      	ldr	r3, [r1, #0]
 80059f8:	4682      	mov	sl, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	4690      	mov	r8, r2
 80059fe:	d82d      	bhi.n	8005a5c <__ssputs_r+0x70>
 8005a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005a08:	d026      	beq.n	8005a58 <__ssputs_r+0x6c>
 8005a0a:	6965      	ldr	r5, [r4, #20]
 8005a0c:	6909      	ldr	r1, [r1, #16]
 8005a0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a12:	eba3 0901 	sub.w	r9, r3, r1
 8005a16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a1a:	1c7b      	adds	r3, r7, #1
 8005a1c:	444b      	add	r3, r9
 8005a1e:	106d      	asrs	r5, r5, #1
 8005a20:	429d      	cmp	r5, r3
 8005a22:	bf38      	it	cc
 8005a24:	461d      	movcc	r5, r3
 8005a26:	0553      	lsls	r3, r2, #21
 8005a28:	d527      	bpl.n	8005a7a <__ssputs_r+0x8e>
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	f7ff ff52 	bl	80058d4 <_malloc_r>
 8005a30:	4606      	mov	r6, r0
 8005a32:	b360      	cbz	r0, 8005a8e <__ssputs_r+0xa2>
 8005a34:	6921      	ldr	r1, [r4, #16]
 8005a36:	464a      	mov	r2, r9
 8005a38:	f000 fae8 	bl	800600c <memcpy>
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005a42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a46:	81a3      	strh	r3, [r4, #12]
 8005a48:	6126      	str	r6, [r4, #16]
 8005a4a:	6165      	str	r5, [r4, #20]
 8005a4c:	444e      	add	r6, r9
 8005a4e:	eba5 0509 	sub.w	r5, r5, r9
 8005a52:	6026      	str	r6, [r4, #0]
 8005a54:	60a5      	str	r5, [r4, #8]
 8005a56:	463e      	mov	r6, r7
 8005a58:	42be      	cmp	r6, r7
 8005a5a:	d900      	bls.n	8005a5e <__ssputs_r+0x72>
 8005a5c:	463e      	mov	r6, r7
 8005a5e:	6820      	ldr	r0, [r4, #0]
 8005a60:	4632      	mov	r2, r6
 8005a62:	4641      	mov	r1, r8
 8005a64:	f000 faa8 	bl	8005fb8 <memmove>
 8005a68:	68a3      	ldr	r3, [r4, #8]
 8005a6a:	1b9b      	subs	r3, r3, r6
 8005a6c:	60a3      	str	r3, [r4, #8]
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	4433      	add	r3, r6
 8005a72:	6023      	str	r3, [r4, #0]
 8005a74:	2000      	movs	r0, #0
 8005a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a7a:	462a      	mov	r2, r5
 8005a7c:	f000 fad4 	bl	8006028 <_realloc_r>
 8005a80:	4606      	mov	r6, r0
 8005a82:	2800      	cmp	r0, #0
 8005a84:	d1e0      	bne.n	8005a48 <__ssputs_r+0x5c>
 8005a86:	6921      	ldr	r1, [r4, #16]
 8005a88:	4650      	mov	r0, sl
 8005a8a:	f7ff feb7 	bl	80057fc <_free_r>
 8005a8e:	230c      	movs	r3, #12
 8005a90:	f8ca 3000 	str.w	r3, [sl]
 8005a94:	89a3      	ldrh	r3, [r4, #12]
 8005a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a9a:	81a3      	strh	r3, [r4, #12]
 8005a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa0:	e7e9      	b.n	8005a76 <__ssputs_r+0x8a>
	...

08005aa4 <_svfiprintf_r>:
 8005aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aa8:	4698      	mov	r8, r3
 8005aaa:	898b      	ldrh	r3, [r1, #12]
 8005aac:	061b      	lsls	r3, r3, #24
 8005aae:	b09d      	sub	sp, #116	@ 0x74
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	460d      	mov	r5, r1
 8005ab4:	4614      	mov	r4, r2
 8005ab6:	d510      	bpl.n	8005ada <_svfiprintf_r+0x36>
 8005ab8:	690b      	ldr	r3, [r1, #16]
 8005aba:	b973      	cbnz	r3, 8005ada <_svfiprintf_r+0x36>
 8005abc:	2140      	movs	r1, #64	@ 0x40
 8005abe:	f7ff ff09 	bl	80058d4 <_malloc_r>
 8005ac2:	6028      	str	r0, [r5, #0]
 8005ac4:	6128      	str	r0, [r5, #16]
 8005ac6:	b930      	cbnz	r0, 8005ad6 <_svfiprintf_r+0x32>
 8005ac8:	230c      	movs	r3, #12
 8005aca:	603b      	str	r3, [r7, #0]
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad0:	b01d      	add	sp, #116	@ 0x74
 8005ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ad6:	2340      	movs	r3, #64	@ 0x40
 8005ad8:	616b      	str	r3, [r5, #20]
 8005ada:	2300      	movs	r3, #0
 8005adc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ade:	2320      	movs	r3, #32
 8005ae0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ae4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ae8:	2330      	movs	r3, #48	@ 0x30
 8005aea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005c88 <_svfiprintf_r+0x1e4>
 8005aee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005af2:	f04f 0901 	mov.w	r9, #1
 8005af6:	4623      	mov	r3, r4
 8005af8:	469a      	mov	sl, r3
 8005afa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005afe:	b10a      	cbz	r2, 8005b04 <_svfiprintf_r+0x60>
 8005b00:	2a25      	cmp	r2, #37	@ 0x25
 8005b02:	d1f9      	bne.n	8005af8 <_svfiprintf_r+0x54>
 8005b04:	ebba 0b04 	subs.w	fp, sl, r4
 8005b08:	d00b      	beq.n	8005b22 <_svfiprintf_r+0x7e>
 8005b0a:	465b      	mov	r3, fp
 8005b0c:	4622      	mov	r2, r4
 8005b0e:	4629      	mov	r1, r5
 8005b10:	4638      	mov	r0, r7
 8005b12:	f7ff ff6b 	bl	80059ec <__ssputs_r>
 8005b16:	3001      	adds	r0, #1
 8005b18:	f000 80a7 	beq.w	8005c6a <_svfiprintf_r+0x1c6>
 8005b1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b1e:	445a      	add	r2, fp
 8005b20:	9209      	str	r2, [sp, #36]	@ 0x24
 8005b22:	f89a 3000 	ldrb.w	r3, [sl]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 809f 	beq.w	8005c6a <_svfiprintf_r+0x1c6>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b36:	f10a 0a01 	add.w	sl, sl, #1
 8005b3a:	9304      	str	r3, [sp, #16]
 8005b3c:	9307      	str	r3, [sp, #28]
 8005b3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b42:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b44:	4654      	mov	r4, sl
 8005b46:	2205      	movs	r2, #5
 8005b48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b4c:	484e      	ldr	r0, [pc, #312]	@ (8005c88 <_svfiprintf_r+0x1e4>)
 8005b4e:	f7fa fb1f 	bl	8000190 <memchr>
 8005b52:	9a04      	ldr	r2, [sp, #16]
 8005b54:	b9d8      	cbnz	r0, 8005b8e <_svfiprintf_r+0xea>
 8005b56:	06d0      	lsls	r0, r2, #27
 8005b58:	bf44      	itt	mi
 8005b5a:	2320      	movmi	r3, #32
 8005b5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b60:	0711      	lsls	r1, r2, #28
 8005b62:	bf44      	itt	mi
 8005b64:	232b      	movmi	r3, #43	@ 0x2b
 8005b66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b70:	d015      	beq.n	8005b9e <_svfiprintf_r+0xfa>
 8005b72:	9a07      	ldr	r2, [sp, #28]
 8005b74:	4654      	mov	r4, sl
 8005b76:	2000      	movs	r0, #0
 8005b78:	f04f 0c0a 	mov.w	ip, #10
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b82:	3b30      	subs	r3, #48	@ 0x30
 8005b84:	2b09      	cmp	r3, #9
 8005b86:	d94b      	bls.n	8005c20 <_svfiprintf_r+0x17c>
 8005b88:	b1b0      	cbz	r0, 8005bb8 <_svfiprintf_r+0x114>
 8005b8a:	9207      	str	r2, [sp, #28]
 8005b8c:	e014      	b.n	8005bb8 <_svfiprintf_r+0x114>
 8005b8e:	eba0 0308 	sub.w	r3, r0, r8
 8005b92:	fa09 f303 	lsl.w	r3, r9, r3
 8005b96:	4313      	orrs	r3, r2
 8005b98:	9304      	str	r3, [sp, #16]
 8005b9a:	46a2      	mov	sl, r4
 8005b9c:	e7d2      	b.n	8005b44 <_svfiprintf_r+0xa0>
 8005b9e:	9b03      	ldr	r3, [sp, #12]
 8005ba0:	1d19      	adds	r1, r3, #4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	9103      	str	r1, [sp, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	bfbb      	ittet	lt
 8005baa:	425b      	neglt	r3, r3
 8005bac:	f042 0202 	orrlt.w	r2, r2, #2
 8005bb0:	9307      	strge	r3, [sp, #28]
 8005bb2:	9307      	strlt	r3, [sp, #28]
 8005bb4:	bfb8      	it	lt
 8005bb6:	9204      	strlt	r2, [sp, #16]
 8005bb8:	7823      	ldrb	r3, [r4, #0]
 8005bba:	2b2e      	cmp	r3, #46	@ 0x2e
 8005bbc:	d10a      	bne.n	8005bd4 <_svfiprintf_r+0x130>
 8005bbe:	7863      	ldrb	r3, [r4, #1]
 8005bc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bc2:	d132      	bne.n	8005c2a <_svfiprintf_r+0x186>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	1d1a      	adds	r2, r3, #4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	9203      	str	r2, [sp, #12]
 8005bcc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005bd0:	3402      	adds	r4, #2
 8005bd2:	9305      	str	r3, [sp, #20]
 8005bd4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005c8c <_svfiprintf_r+0x1e8>
 8005bd8:	7821      	ldrb	r1, [r4, #0]
 8005bda:	2203      	movs	r2, #3
 8005bdc:	4650      	mov	r0, sl
 8005bde:	f7fa fad7 	bl	8000190 <memchr>
 8005be2:	b138      	cbz	r0, 8005bf4 <_svfiprintf_r+0x150>
 8005be4:	9b04      	ldr	r3, [sp, #16]
 8005be6:	eba0 000a 	sub.w	r0, r0, sl
 8005bea:	2240      	movs	r2, #64	@ 0x40
 8005bec:	4082      	lsls	r2, r0
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	3401      	adds	r4, #1
 8005bf2:	9304      	str	r3, [sp, #16]
 8005bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf8:	4825      	ldr	r0, [pc, #148]	@ (8005c90 <_svfiprintf_r+0x1ec>)
 8005bfa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bfe:	2206      	movs	r2, #6
 8005c00:	f7fa fac6 	bl	8000190 <memchr>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d036      	beq.n	8005c76 <_svfiprintf_r+0x1d2>
 8005c08:	4b22      	ldr	r3, [pc, #136]	@ (8005c94 <_svfiprintf_r+0x1f0>)
 8005c0a:	bb1b      	cbnz	r3, 8005c54 <_svfiprintf_r+0x1b0>
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	3307      	adds	r3, #7
 8005c10:	f023 0307 	bic.w	r3, r3, #7
 8005c14:	3308      	adds	r3, #8
 8005c16:	9303      	str	r3, [sp, #12]
 8005c18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c1a:	4433      	add	r3, r6
 8005c1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c1e:	e76a      	b.n	8005af6 <_svfiprintf_r+0x52>
 8005c20:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c24:	460c      	mov	r4, r1
 8005c26:	2001      	movs	r0, #1
 8005c28:	e7a8      	b.n	8005b7c <_svfiprintf_r+0xd8>
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	3401      	adds	r4, #1
 8005c2e:	9305      	str	r3, [sp, #20]
 8005c30:	4619      	mov	r1, r3
 8005c32:	f04f 0c0a 	mov.w	ip, #10
 8005c36:	4620      	mov	r0, r4
 8005c38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c3c:	3a30      	subs	r2, #48	@ 0x30
 8005c3e:	2a09      	cmp	r2, #9
 8005c40:	d903      	bls.n	8005c4a <_svfiprintf_r+0x1a6>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0c6      	beq.n	8005bd4 <_svfiprintf_r+0x130>
 8005c46:	9105      	str	r1, [sp, #20]
 8005c48:	e7c4      	b.n	8005bd4 <_svfiprintf_r+0x130>
 8005c4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c4e:	4604      	mov	r4, r0
 8005c50:	2301      	movs	r3, #1
 8005c52:	e7f0      	b.n	8005c36 <_svfiprintf_r+0x192>
 8005c54:	ab03      	add	r3, sp, #12
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	462a      	mov	r2, r5
 8005c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c98 <_svfiprintf_r+0x1f4>)
 8005c5c:	a904      	add	r1, sp, #16
 8005c5e:	4638      	mov	r0, r7
 8005c60:	f3af 8000 	nop.w
 8005c64:	1c42      	adds	r2, r0, #1
 8005c66:	4606      	mov	r6, r0
 8005c68:	d1d6      	bne.n	8005c18 <_svfiprintf_r+0x174>
 8005c6a:	89ab      	ldrh	r3, [r5, #12]
 8005c6c:	065b      	lsls	r3, r3, #25
 8005c6e:	f53f af2d 	bmi.w	8005acc <_svfiprintf_r+0x28>
 8005c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c74:	e72c      	b.n	8005ad0 <_svfiprintf_r+0x2c>
 8005c76:	ab03      	add	r3, sp, #12
 8005c78:	9300      	str	r3, [sp, #0]
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	4b06      	ldr	r3, [pc, #24]	@ (8005c98 <_svfiprintf_r+0x1f4>)
 8005c7e:	a904      	add	r1, sp, #16
 8005c80:	4638      	mov	r0, r7
 8005c82:	f000 f879 	bl	8005d78 <_printf_i>
 8005c86:	e7ed      	b.n	8005c64 <_svfiprintf_r+0x1c0>
 8005c88:	08006364 	.word	0x08006364
 8005c8c:	0800636a 	.word	0x0800636a
 8005c90:	0800636e 	.word	0x0800636e
 8005c94:	00000000 	.word	0x00000000
 8005c98:	080059ed 	.word	0x080059ed

08005c9c <_printf_common>:
 8005c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca0:	4616      	mov	r6, r2
 8005ca2:	4698      	mov	r8, r3
 8005ca4:	688a      	ldr	r2, [r1, #8]
 8005ca6:	690b      	ldr	r3, [r1, #16]
 8005ca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cac:	4293      	cmp	r3, r2
 8005cae:	bfb8      	it	lt
 8005cb0:	4613      	movlt	r3, r2
 8005cb2:	6033      	str	r3, [r6, #0]
 8005cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005cb8:	4607      	mov	r7, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	b10a      	cbz	r2, 8005cc2 <_printf_common+0x26>
 8005cbe:	3301      	adds	r3, #1
 8005cc0:	6033      	str	r3, [r6, #0]
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	0699      	lsls	r1, r3, #26
 8005cc6:	bf42      	ittt	mi
 8005cc8:	6833      	ldrmi	r3, [r6, #0]
 8005cca:	3302      	addmi	r3, #2
 8005ccc:	6033      	strmi	r3, [r6, #0]
 8005cce:	6825      	ldr	r5, [r4, #0]
 8005cd0:	f015 0506 	ands.w	r5, r5, #6
 8005cd4:	d106      	bne.n	8005ce4 <_printf_common+0x48>
 8005cd6:	f104 0a19 	add.w	sl, r4, #25
 8005cda:	68e3      	ldr	r3, [r4, #12]
 8005cdc:	6832      	ldr	r2, [r6, #0]
 8005cde:	1a9b      	subs	r3, r3, r2
 8005ce0:	42ab      	cmp	r3, r5
 8005ce2:	dc26      	bgt.n	8005d32 <_printf_common+0x96>
 8005ce4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ce8:	6822      	ldr	r2, [r4, #0]
 8005cea:	3b00      	subs	r3, #0
 8005cec:	bf18      	it	ne
 8005cee:	2301      	movne	r3, #1
 8005cf0:	0692      	lsls	r2, r2, #26
 8005cf2:	d42b      	bmi.n	8005d4c <_printf_common+0xb0>
 8005cf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	4638      	mov	r0, r7
 8005cfc:	47c8      	blx	r9
 8005cfe:	3001      	adds	r0, #1
 8005d00:	d01e      	beq.n	8005d40 <_printf_common+0xa4>
 8005d02:	6823      	ldr	r3, [r4, #0]
 8005d04:	6922      	ldr	r2, [r4, #16]
 8005d06:	f003 0306 	and.w	r3, r3, #6
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	bf02      	ittt	eq
 8005d0e:	68e5      	ldreq	r5, [r4, #12]
 8005d10:	6833      	ldreq	r3, [r6, #0]
 8005d12:	1aed      	subeq	r5, r5, r3
 8005d14:	68a3      	ldr	r3, [r4, #8]
 8005d16:	bf0c      	ite	eq
 8005d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d1c:	2500      	movne	r5, #0
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	bfc4      	itt	gt
 8005d22:	1a9b      	subgt	r3, r3, r2
 8005d24:	18ed      	addgt	r5, r5, r3
 8005d26:	2600      	movs	r6, #0
 8005d28:	341a      	adds	r4, #26
 8005d2a:	42b5      	cmp	r5, r6
 8005d2c:	d11a      	bne.n	8005d64 <_printf_common+0xc8>
 8005d2e:	2000      	movs	r0, #0
 8005d30:	e008      	b.n	8005d44 <_printf_common+0xa8>
 8005d32:	2301      	movs	r3, #1
 8005d34:	4652      	mov	r2, sl
 8005d36:	4641      	mov	r1, r8
 8005d38:	4638      	mov	r0, r7
 8005d3a:	47c8      	blx	r9
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	d103      	bne.n	8005d48 <_printf_common+0xac>
 8005d40:	f04f 30ff 	mov.w	r0, #4294967295
 8005d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d48:	3501      	adds	r5, #1
 8005d4a:	e7c6      	b.n	8005cda <_printf_common+0x3e>
 8005d4c:	18e1      	adds	r1, r4, r3
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	2030      	movs	r0, #48	@ 0x30
 8005d52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d56:	4422      	add	r2, r4
 8005d58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d60:	3302      	adds	r3, #2
 8005d62:	e7c7      	b.n	8005cf4 <_printf_common+0x58>
 8005d64:	2301      	movs	r3, #1
 8005d66:	4622      	mov	r2, r4
 8005d68:	4641      	mov	r1, r8
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	47c8      	blx	r9
 8005d6e:	3001      	adds	r0, #1
 8005d70:	d0e6      	beq.n	8005d40 <_printf_common+0xa4>
 8005d72:	3601      	adds	r6, #1
 8005d74:	e7d9      	b.n	8005d2a <_printf_common+0x8e>
	...

08005d78 <_printf_i>:
 8005d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	7e0f      	ldrb	r7, [r1, #24]
 8005d7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d80:	2f78      	cmp	r7, #120	@ 0x78
 8005d82:	4691      	mov	r9, r2
 8005d84:	4680      	mov	r8, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	469a      	mov	sl, r3
 8005d8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d8e:	d807      	bhi.n	8005da0 <_printf_i+0x28>
 8005d90:	2f62      	cmp	r7, #98	@ 0x62
 8005d92:	d80a      	bhi.n	8005daa <_printf_i+0x32>
 8005d94:	2f00      	cmp	r7, #0
 8005d96:	f000 80d2 	beq.w	8005f3e <_printf_i+0x1c6>
 8005d9a:	2f58      	cmp	r7, #88	@ 0x58
 8005d9c:	f000 80b9 	beq.w	8005f12 <_printf_i+0x19a>
 8005da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005da4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005da8:	e03a      	b.n	8005e20 <_printf_i+0xa8>
 8005daa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005dae:	2b15      	cmp	r3, #21
 8005db0:	d8f6      	bhi.n	8005da0 <_printf_i+0x28>
 8005db2:	a101      	add	r1, pc, #4	@ (adr r1, 8005db8 <_printf_i+0x40>)
 8005db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005db8:	08005e11 	.word	0x08005e11
 8005dbc:	08005e25 	.word	0x08005e25
 8005dc0:	08005da1 	.word	0x08005da1
 8005dc4:	08005da1 	.word	0x08005da1
 8005dc8:	08005da1 	.word	0x08005da1
 8005dcc:	08005da1 	.word	0x08005da1
 8005dd0:	08005e25 	.word	0x08005e25
 8005dd4:	08005da1 	.word	0x08005da1
 8005dd8:	08005da1 	.word	0x08005da1
 8005ddc:	08005da1 	.word	0x08005da1
 8005de0:	08005da1 	.word	0x08005da1
 8005de4:	08005f25 	.word	0x08005f25
 8005de8:	08005e4f 	.word	0x08005e4f
 8005dec:	08005edf 	.word	0x08005edf
 8005df0:	08005da1 	.word	0x08005da1
 8005df4:	08005da1 	.word	0x08005da1
 8005df8:	08005f47 	.word	0x08005f47
 8005dfc:	08005da1 	.word	0x08005da1
 8005e00:	08005e4f 	.word	0x08005e4f
 8005e04:	08005da1 	.word	0x08005da1
 8005e08:	08005da1 	.word	0x08005da1
 8005e0c:	08005ee7 	.word	0x08005ee7
 8005e10:	6833      	ldr	r3, [r6, #0]
 8005e12:	1d1a      	adds	r2, r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6032      	str	r2, [r6, #0]
 8005e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e20:	2301      	movs	r3, #1
 8005e22:	e09d      	b.n	8005f60 <_printf_i+0x1e8>
 8005e24:	6833      	ldr	r3, [r6, #0]
 8005e26:	6820      	ldr	r0, [r4, #0]
 8005e28:	1d19      	adds	r1, r3, #4
 8005e2a:	6031      	str	r1, [r6, #0]
 8005e2c:	0606      	lsls	r6, r0, #24
 8005e2e:	d501      	bpl.n	8005e34 <_printf_i+0xbc>
 8005e30:	681d      	ldr	r5, [r3, #0]
 8005e32:	e003      	b.n	8005e3c <_printf_i+0xc4>
 8005e34:	0645      	lsls	r5, r0, #25
 8005e36:	d5fb      	bpl.n	8005e30 <_printf_i+0xb8>
 8005e38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e3c:	2d00      	cmp	r5, #0
 8005e3e:	da03      	bge.n	8005e48 <_printf_i+0xd0>
 8005e40:	232d      	movs	r3, #45	@ 0x2d
 8005e42:	426d      	negs	r5, r5
 8005e44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e48:	4859      	ldr	r0, [pc, #356]	@ (8005fb0 <_printf_i+0x238>)
 8005e4a:	230a      	movs	r3, #10
 8005e4c:	e011      	b.n	8005e72 <_printf_i+0xfa>
 8005e4e:	6821      	ldr	r1, [r4, #0]
 8005e50:	6833      	ldr	r3, [r6, #0]
 8005e52:	0608      	lsls	r0, r1, #24
 8005e54:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e58:	d402      	bmi.n	8005e60 <_printf_i+0xe8>
 8005e5a:	0649      	lsls	r1, r1, #25
 8005e5c:	bf48      	it	mi
 8005e5e:	b2ad      	uxthmi	r5, r5
 8005e60:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e62:	4853      	ldr	r0, [pc, #332]	@ (8005fb0 <_printf_i+0x238>)
 8005e64:	6033      	str	r3, [r6, #0]
 8005e66:	bf14      	ite	ne
 8005e68:	230a      	movne	r3, #10
 8005e6a:	2308      	moveq	r3, #8
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e72:	6866      	ldr	r6, [r4, #4]
 8005e74:	60a6      	str	r6, [r4, #8]
 8005e76:	2e00      	cmp	r6, #0
 8005e78:	bfa2      	ittt	ge
 8005e7a:	6821      	ldrge	r1, [r4, #0]
 8005e7c:	f021 0104 	bicge.w	r1, r1, #4
 8005e80:	6021      	strge	r1, [r4, #0]
 8005e82:	b90d      	cbnz	r5, 8005e88 <_printf_i+0x110>
 8005e84:	2e00      	cmp	r6, #0
 8005e86:	d04b      	beq.n	8005f20 <_printf_i+0x1a8>
 8005e88:	4616      	mov	r6, r2
 8005e8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e8e:	fb03 5711 	mls	r7, r3, r1, r5
 8005e92:	5dc7      	ldrb	r7, [r0, r7]
 8005e94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e98:	462f      	mov	r7, r5
 8005e9a:	42bb      	cmp	r3, r7
 8005e9c:	460d      	mov	r5, r1
 8005e9e:	d9f4      	bls.n	8005e8a <_printf_i+0x112>
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d10b      	bne.n	8005ebc <_printf_i+0x144>
 8005ea4:	6823      	ldr	r3, [r4, #0]
 8005ea6:	07df      	lsls	r7, r3, #31
 8005ea8:	d508      	bpl.n	8005ebc <_printf_i+0x144>
 8005eaa:	6923      	ldr	r3, [r4, #16]
 8005eac:	6861      	ldr	r1, [r4, #4]
 8005eae:	4299      	cmp	r1, r3
 8005eb0:	bfde      	ittt	le
 8005eb2:	2330      	movle	r3, #48	@ 0x30
 8005eb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005eb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ebc:	1b92      	subs	r2, r2, r6
 8005ebe:	6122      	str	r2, [r4, #16]
 8005ec0:	f8cd a000 	str.w	sl, [sp]
 8005ec4:	464b      	mov	r3, r9
 8005ec6:	aa03      	add	r2, sp, #12
 8005ec8:	4621      	mov	r1, r4
 8005eca:	4640      	mov	r0, r8
 8005ecc:	f7ff fee6 	bl	8005c9c <_printf_common>
 8005ed0:	3001      	adds	r0, #1
 8005ed2:	d14a      	bne.n	8005f6a <_printf_i+0x1f2>
 8005ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed8:	b004      	add	sp, #16
 8005eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f043 0320 	orr.w	r3, r3, #32
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	4833      	ldr	r0, [pc, #204]	@ (8005fb4 <_printf_i+0x23c>)
 8005ee8:	2778      	movs	r7, #120	@ 0x78
 8005eea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	6831      	ldr	r1, [r6, #0]
 8005ef2:	061f      	lsls	r7, r3, #24
 8005ef4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ef8:	d402      	bmi.n	8005f00 <_printf_i+0x188>
 8005efa:	065f      	lsls	r7, r3, #25
 8005efc:	bf48      	it	mi
 8005efe:	b2ad      	uxthmi	r5, r5
 8005f00:	6031      	str	r1, [r6, #0]
 8005f02:	07d9      	lsls	r1, r3, #31
 8005f04:	bf44      	itt	mi
 8005f06:	f043 0320 	orrmi.w	r3, r3, #32
 8005f0a:	6023      	strmi	r3, [r4, #0]
 8005f0c:	b11d      	cbz	r5, 8005f16 <_printf_i+0x19e>
 8005f0e:	2310      	movs	r3, #16
 8005f10:	e7ac      	b.n	8005e6c <_printf_i+0xf4>
 8005f12:	4827      	ldr	r0, [pc, #156]	@ (8005fb0 <_printf_i+0x238>)
 8005f14:	e7e9      	b.n	8005eea <_printf_i+0x172>
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	f023 0320 	bic.w	r3, r3, #32
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	e7f6      	b.n	8005f0e <_printf_i+0x196>
 8005f20:	4616      	mov	r6, r2
 8005f22:	e7bd      	b.n	8005ea0 <_printf_i+0x128>
 8005f24:	6833      	ldr	r3, [r6, #0]
 8005f26:	6825      	ldr	r5, [r4, #0]
 8005f28:	6961      	ldr	r1, [r4, #20]
 8005f2a:	1d18      	adds	r0, r3, #4
 8005f2c:	6030      	str	r0, [r6, #0]
 8005f2e:	062e      	lsls	r6, r5, #24
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	d501      	bpl.n	8005f38 <_printf_i+0x1c0>
 8005f34:	6019      	str	r1, [r3, #0]
 8005f36:	e002      	b.n	8005f3e <_printf_i+0x1c6>
 8005f38:	0668      	lsls	r0, r5, #25
 8005f3a:	d5fb      	bpl.n	8005f34 <_printf_i+0x1bc>
 8005f3c:	8019      	strh	r1, [r3, #0]
 8005f3e:	2300      	movs	r3, #0
 8005f40:	6123      	str	r3, [r4, #16]
 8005f42:	4616      	mov	r6, r2
 8005f44:	e7bc      	b.n	8005ec0 <_printf_i+0x148>
 8005f46:	6833      	ldr	r3, [r6, #0]
 8005f48:	1d1a      	adds	r2, r3, #4
 8005f4a:	6032      	str	r2, [r6, #0]
 8005f4c:	681e      	ldr	r6, [r3, #0]
 8005f4e:	6862      	ldr	r2, [r4, #4]
 8005f50:	2100      	movs	r1, #0
 8005f52:	4630      	mov	r0, r6
 8005f54:	f7fa f91c 	bl	8000190 <memchr>
 8005f58:	b108      	cbz	r0, 8005f5e <_printf_i+0x1e6>
 8005f5a:	1b80      	subs	r0, r0, r6
 8005f5c:	6060      	str	r0, [r4, #4]
 8005f5e:	6863      	ldr	r3, [r4, #4]
 8005f60:	6123      	str	r3, [r4, #16]
 8005f62:	2300      	movs	r3, #0
 8005f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f68:	e7aa      	b.n	8005ec0 <_printf_i+0x148>
 8005f6a:	6923      	ldr	r3, [r4, #16]
 8005f6c:	4632      	mov	r2, r6
 8005f6e:	4649      	mov	r1, r9
 8005f70:	4640      	mov	r0, r8
 8005f72:	47d0      	blx	sl
 8005f74:	3001      	adds	r0, #1
 8005f76:	d0ad      	beq.n	8005ed4 <_printf_i+0x15c>
 8005f78:	6823      	ldr	r3, [r4, #0]
 8005f7a:	079b      	lsls	r3, r3, #30
 8005f7c:	d413      	bmi.n	8005fa6 <_printf_i+0x22e>
 8005f7e:	68e0      	ldr	r0, [r4, #12]
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	4298      	cmp	r0, r3
 8005f84:	bfb8      	it	lt
 8005f86:	4618      	movlt	r0, r3
 8005f88:	e7a6      	b.n	8005ed8 <_printf_i+0x160>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4632      	mov	r2, r6
 8005f8e:	4649      	mov	r1, r9
 8005f90:	4640      	mov	r0, r8
 8005f92:	47d0      	blx	sl
 8005f94:	3001      	adds	r0, #1
 8005f96:	d09d      	beq.n	8005ed4 <_printf_i+0x15c>
 8005f98:	3501      	adds	r5, #1
 8005f9a:	68e3      	ldr	r3, [r4, #12]
 8005f9c:	9903      	ldr	r1, [sp, #12]
 8005f9e:	1a5b      	subs	r3, r3, r1
 8005fa0:	42ab      	cmp	r3, r5
 8005fa2:	dcf2      	bgt.n	8005f8a <_printf_i+0x212>
 8005fa4:	e7eb      	b.n	8005f7e <_printf_i+0x206>
 8005fa6:	2500      	movs	r5, #0
 8005fa8:	f104 0619 	add.w	r6, r4, #25
 8005fac:	e7f5      	b.n	8005f9a <_printf_i+0x222>
 8005fae:	bf00      	nop
 8005fb0:	08006375 	.word	0x08006375
 8005fb4:	08006386 	.word	0x08006386

08005fb8 <memmove>:
 8005fb8:	4288      	cmp	r0, r1
 8005fba:	b510      	push	{r4, lr}
 8005fbc:	eb01 0402 	add.w	r4, r1, r2
 8005fc0:	d902      	bls.n	8005fc8 <memmove+0x10>
 8005fc2:	4284      	cmp	r4, r0
 8005fc4:	4623      	mov	r3, r4
 8005fc6:	d807      	bhi.n	8005fd8 <memmove+0x20>
 8005fc8:	1e43      	subs	r3, r0, #1
 8005fca:	42a1      	cmp	r1, r4
 8005fcc:	d008      	beq.n	8005fe0 <memmove+0x28>
 8005fce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fd6:	e7f8      	b.n	8005fca <memmove+0x12>
 8005fd8:	4402      	add	r2, r0
 8005fda:	4601      	mov	r1, r0
 8005fdc:	428a      	cmp	r2, r1
 8005fde:	d100      	bne.n	8005fe2 <memmove+0x2a>
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005fe6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005fea:	e7f7      	b.n	8005fdc <memmove+0x24>

08005fec <_sbrk_r>:
 8005fec:	b538      	push	{r3, r4, r5, lr}
 8005fee:	4d06      	ldr	r5, [pc, #24]	@ (8006008 <_sbrk_r+0x1c>)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	4604      	mov	r4, r0
 8005ff4:	4608      	mov	r0, r1
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	f7fa ffba 	bl	8000f70 <_sbrk>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_sbrk_r+0x1a>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_sbrk_r+0x1a>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	2000028c 	.word	0x2000028c

0800600c <memcpy>:
 800600c:	440a      	add	r2, r1
 800600e:	4291      	cmp	r1, r2
 8006010:	f100 33ff 	add.w	r3, r0, #4294967295
 8006014:	d100      	bne.n	8006018 <memcpy+0xc>
 8006016:	4770      	bx	lr
 8006018:	b510      	push	{r4, lr}
 800601a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800601e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006022:	4291      	cmp	r1, r2
 8006024:	d1f9      	bne.n	800601a <memcpy+0xe>
 8006026:	bd10      	pop	{r4, pc}

08006028 <_realloc_r>:
 8006028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602c:	4680      	mov	r8, r0
 800602e:	4615      	mov	r5, r2
 8006030:	460c      	mov	r4, r1
 8006032:	b921      	cbnz	r1, 800603e <_realloc_r+0x16>
 8006034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006038:	4611      	mov	r1, r2
 800603a:	f7ff bc4b 	b.w	80058d4 <_malloc_r>
 800603e:	b92a      	cbnz	r2, 800604c <_realloc_r+0x24>
 8006040:	f7ff fbdc 	bl	80057fc <_free_r>
 8006044:	2400      	movs	r4, #0
 8006046:	4620      	mov	r0, r4
 8006048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800604c:	f000 f81a 	bl	8006084 <_malloc_usable_size_r>
 8006050:	4285      	cmp	r5, r0
 8006052:	4606      	mov	r6, r0
 8006054:	d802      	bhi.n	800605c <_realloc_r+0x34>
 8006056:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800605a:	d8f4      	bhi.n	8006046 <_realloc_r+0x1e>
 800605c:	4629      	mov	r1, r5
 800605e:	4640      	mov	r0, r8
 8006060:	f7ff fc38 	bl	80058d4 <_malloc_r>
 8006064:	4607      	mov	r7, r0
 8006066:	2800      	cmp	r0, #0
 8006068:	d0ec      	beq.n	8006044 <_realloc_r+0x1c>
 800606a:	42b5      	cmp	r5, r6
 800606c:	462a      	mov	r2, r5
 800606e:	4621      	mov	r1, r4
 8006070:	bf28      	it	cs
 8006072:	4632      	movcs	r2, r6
 8006074:	f7ff ffca 	bl	800600c <memcpy>
 8006078:	4621      	mov	r1, r4
 800607a:	4640      	mov	r0, r8
 800607c:	f7ff fbbe 	bl	80057fc <_free_r>
 8006080:	463c      	mov	r4, r7
 8006082:	e7e0      	b.n	8006046 <_realloc_r+0x1e>

08006084 <_malloc_usable_size_r>:
 8006084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006088:	1f18      	subs	r0, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	bfbc      	itt	lt
 800608e:	580b      	ldrlt	r3, [r1, r0]
 8006090:	18c0      	addlt	r0, r0, r3
 8006092:	4770      	bx	lr

08006094 <_init>:
 8006094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006096:	bf00      	nop
 8006098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800609a:	bc08      	pop	{r3}
 800609c:	469e      	mov	lr, r3
 800609e:	4770      	bx	lr

080060a0 <_fini>:
 80060a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060a2:	bf00      	nop
 80060a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a6:	bc08      	pop	{r3}
 80060a8:	469e      	mov	lr, r3
 80060aa:	4770      	bx	lr
